/*
Copyright 2015 The Kubernetes Authors All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package v1

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg3_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg2_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg6_runtime "k8s.io/kubernetes/pkg/runtime"
	pkg1_types "k8s.io/kubernetes/pkg/types"
	pkg5_intstr "k8s.io/kubernetes/pkg/util/intstr"
	"reflect"
	"runtime"
	pkg4_inf "speter.net/go/exp/math/dec/inf"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg3_resource.Quantity
		var v1 pkg2_unversioned.Time
		var v2 pkg6_runtime.RawExtension
		var v3 pkg1_types.UID
		var v4 pkg5_intstr.IntOrString
		var v5 pkg4_inf.Dec
		var v6 time.Time
		_, _, _, _, _, _, _ = v0, v1, v2, v3, v4, v5, v6
	}
}

func (x *ObjectMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [12]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Name != ""
			yyq2[1] = x.GenerateName != ""
			yyq2[2] = x.Namespace != ""
			yyq2[3] = x.SelfLink != ""
			yyq2[4] = x.UID != ""
			yyq2[5] = x.ResourceVersion != ""
			yyq2[6] = x.Generation != 0
			yyq2[7] = true
			yyq2[8] = x.DeletionTimestamp != nil
			yyq2[9] = x.DeletionGracePeriodSeconds != nil
			yyq2[10] = len(x.Labels) != 0
			yyq2[11] = len(x.Annotations) != 0
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(12)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generateName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selfLink"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generation"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[7] {
					yy25 := &x.CreationTimestamp
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else if z.HasExtensions() && z.EncExt(yy25) {
					} else if yym26 {
						z.EncBinaryMarshal(yy25)
					} else if !yym26 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy25)
					} else {
						z.EncFallback(yy25)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("creationTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy27 := &x.CreationTimestamp
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else if z.HasExtensions() && z.EncExt(yy27) {
					} else if yym28 {
						z.EncBinaryMarshal(yy27)
					} else if !yym28 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy27)
					} else {
						z.EncFallback(yy27)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[8] {
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym30 := z.EncBinary()
						_ = yym30
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym30 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym30 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym31 := z.EncBinary()
						_ = yym31
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym31 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym31 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[9] {
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy33 := *x.DeletionGracePeriodSeconds
						yym34 := z.EncBinary()
						_ = yym34
						if false {
						} else {
							r.EncodeInt(int64(yy33))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy35 := *x.DeletionGracePeriodSeconds
						yym36 := z.EncBinary()
						_ = yym36
						if false {
						} else {
							r.EncodeInt(int64(yy35))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[10] {
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labels"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym39 := z.EncBinary()
						_ = yym39
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[11] {
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym41 := z.EncBinary()
						_ = yym41
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("annotations"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym42 := z.EncBinary()
						_ = yym42
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym43 := z.DecBinary()
	_ = yym43
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct44 := r.ContainerType()
		if yyct44 == codecSelferValueTypeMap1234 {
			yyl44 := r.ReadMapStart()
			if yyl44 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl44, d)
			}
		} else if yyct44 == codecSelferValueTypeArray1234 {
			yyl44 := r.ReadArrayStart()
			if yyl44 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl44, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys45Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys45Slc
	var yyhl45 bool = l >= 0
	for yyj45 := 0; ; yyj45++ {
		if yyhl45 {
			if yyj45 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys45Slc = r.DecodeBytes(yys45Slc, true, true)
		yys45 := string(yys45Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys45 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "generateName":
			if r.TryDecodeAsNil() {
				x.GenerateName = ""
			} else {
				x.GenerateName = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "selfLink":
			if r.TryDecodeAsNil() {
				x.SelfLink = ""
			} else {
				x.SelfLink = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "generation":
			if r.TryDecodeAsNil() {
				x.Generation = 0
			} else {
				x.Generation = int64(r.DecodeInt(64))
			}
		case "creationTimestamp":
			if r.TryDecodeAsNil() {
				x.CreationTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv53 := &x.CreationTimestamp
				yym54 := z.DecBinary()
				_ = yym54
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv53) {
				} else if yym54 {
					z.DecBinaryUnmarshal(yyv53)
				} else if !yym54 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv53)
				} else {
					z.DecFallback(yyv53, false)
				}
			}
		case "deletionTimestamp":
			if r.TryDecodeAsNil() {
				if x.DeletionTimestamp != nil {
					x.DeletionTimestamp = nil
				}
			} else {
				if x.DeletionTimestamp == nil {
					x.DeletionTimestamp = new(pkg2_unversioned.Time)
				}
				yym56 := z.DecBinary()
				_ = yym56
				if false {
				} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
				} else if yym56 {
					z.DecBinaryUnmarshal(x.DeletionTimestamp)
				} else if !yym56 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.DeletionTimestamp)
				} else {
					z.DecFallback(x.DeletionTimestamp, false)
				}
			}
		case "deletionGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.DeletionGracePeriodSeconds != nil {
					x.DeletionGracePeriodSeconds = nil
				}
			} else {
				if x.DeletionGracePeriodSeconds == nil {
					x.DeletionGracePeriodSeconds = new(int64)
				}
				yym58 := z.DecBinary()
				_ = yym58
				if false {
				} else {
					*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv59 := &x.Labels
				yym60 := z.DecBinary()
				_ = yym60
				if false {
				} else {
					z.F.DecMapStringStringX(yyv59, false, d)
				}
			}
		case "annotations":
			if r.TryDecodeAsNil() {
				x.Annotations = nil
			} else {
				yyv61 := &x.Annotations
				yym62 := z.DecBinary()
				_ = yym62
				if false {
				} else {
					z.F.DecMapStringStringX(yyv61, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys45)
		} // end switch yys45
	} // end for yyj45
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj63 int
	var yyb63 bool
	var yyhl63 bool = l >= 0
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.GenerateName = ""
	} else {
		x.GenerateName = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SelfLink = ""
	} else {
		x.SelfLink = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Generation = 0
	} else {
		x.Generation = int64(r.DecodeInt(64))
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CreationTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv71 := &x.CreationTimestamp
		yym72 := z.DecBinary()
		_ = yym72
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv71) {
		} else if yym72 {
			z.DecBinaryUnmarshal(yyv71)
		} else if !yym72 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv71)
		} else {
			z.DecFallback(yyv71, false)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionTimestamp != nil {
			x.DeletionTimestamp = nil
		}
	} else {
		if x.DeletionTimestamp == nil {
			x.DeletionTimestamp = new(pkg2_unversioned.Time)
		}
		yym74 := z.DecBinary()
		_ = yym74
		if false {
		} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
		} else if yym74 {
			z.DecBinaryUnmarshal(x.DeletionTimestamp)
		} else if !yym74 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.DeletionTimestamp)
		} else {
			z.DecFallback(x.DeletionTimestamp, false)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionGracePeriodSeconds != nil {
			x.DeletionGracePeriodSeconds = nil
		}
	} else {
		if x.DeletionGracePeriodSeconds == nil {
			x.DeletionGracePeriodSeconds = new(int64)
		}
		yym76 := z.DecBinary()
		_ = yym76
		if false {
		} else {
			*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv77 := &x.Labels
		yym78 := z.DecBinary()
		_ = yym78
		if false {
		} else {
			z.F.DecMapStringStringX(yyv77, false, d)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Annotations = nil
	} else {
		yyv79 := &x.Annotations
		yym80 := z.DecBinary()
		_ = yym80
		if false {
		} else {
			z.F.DecMapStringStringX(yyv79, false, d)
		}
	}
	for {
		yyj63++
		if yyhl63 {
			yyb63 = yyj63 > l
		} else {
			yyb63 = r.CheckBreak()
		}
		if yyb63 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj63-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Volume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym81 := z.EncBinary()
		_ = yym81
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep82 := !z.EncBinary()
			yy2arr82 := z.EncBasicHandle().StructToArray
			var yyq82 [17]bool
			_, _, _ = yysep82, yyq82, yy2arr82
			const yyr82 bool = false
			yyq82[1] = x.VolumeSource.HostPath != nil && x.HostPath != nil
			yyq82[2] = x.VolumeSource.EmptyDir != nil && x.EmptyDir != nil
			yyq82[3] = x.VolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq82[4] = x.VolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq82[5] = x.VolumeSource.GitRepo != nil && x.GitRepo != nil
			yyq82[6] = x.VolumeSource.Secret != nil && x.Secret != nil
			yyq82[7] = x.VolumeSource.NFS != nil && x.NFS != nil
			yyq82[8] = x.VolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq82[9] = x.VolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq82[10] = x.VolumeSource.PersistentVolumeClaim != nil && x.PersistentVolumeClaim != nil
			yyq82[11] = x.VolumeSource.RBD != nil && x.RBD != nil
			yyq82[12] = x.VolumeSource.Cinder != nil && x.Cinder != nil
			yyq82[13] = x.VolumeSource.CephFS != nil && x.CephFS != nil
			yyq82[14] = x.VolumeSource.Flocker != nil && x.Flocker != nil
			yyq82[15] = x.VolumeSource.DownwardAPI != nil && x.DownwardAPI != nil
			yyq82[16] = x.VolumeSource.FC != nil && x.FC != nil
			var yynn82 int
			if yyr82 || yy2arr82 {
				r.EncodeArrayStart(17)
			} else {
				yynn82 = 1
				for _, b := range yyq82 {
					if b {
						yynn82++
					}
				}
				r.EncodeMapStart(yynn82)
				yynn82 = 0
			}
			if yyr82 || yy2arr82 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym84 := z.EncBinary()
				_ = yym84
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym85 := z.EncBinary()
				_ = yym85
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			var yyn86 bool
			if x.VolumeSource.HostPath == nil {
				yyn86 = true
				goto LABEL86
			}
		LABEL86:
			if yyr82 || yy2arr82 {
				if yyn86 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[1] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn86 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn87 bool
			if x.VolumeSource.EmptyDir == nil {
				yyn87 = true
				goto LABEL87
			}
		LABEL87:
			if yyr82 || yy2arr82 {
				if yyn87 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[2] {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn87 {
						r.EncodeNil()
					} else {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn88 bool
			if x.VolumeSource.GCEPersistentDisk == nil {
				yyn88 = true
				goto LABEL88
			}
		LABEL88:
			if yyr82 || yy2arr82 {
				if yyn88 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[3] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn88 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn89 bool
			if x.VolumeSource.AWSElasticBlockStore == nil {
				yyn89 = true
				goto LABEL89
			}
		LABEL89:
			if yyr82 || yy2arr82 {
				if yyn89 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[4] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn89 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn90 bool
			if x.VolumeSource.GitRepo == nil {
				yyn90 = true
				goto LABEL90
			}
		LABEL90:
			if yyr82 || yy2arr82 {
				if yyn90 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[5] {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn90 {
						r.EncodeNil()
					} else {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn91 bool
			if x.VolumeSource.Secret == nil {
				yyn91 = true
				goto LABEL91
			}
		LABEL91:
			if yyr82 || yy2arr82 {
				if yyn91 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[6] {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn91 {
						r.EncodeNil()
					} else {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn92 bool
			if x.VolumeSource.NFS == nil {
				yyn92 = true
				goto LABEL92
			}
		LABEL92:
			if yyr82 || yy2arr82 {
				if yyn92 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[7] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn92 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn93 bool
			if x.VolumeSource.ISCSI == nil {
				yyn93 = true
				goto LABEL93
			}
		LABEL93:
			if yyr82 || yy2arr82 {
				if yyn93 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn93 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn94 bool
			if x.VolumeSource.Glusterfs == nil {
				yyn94 = true
				goto LABEL94
			}
		LABEL94:
			if yyr82 || yy2arr82 {
				if yyn94 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[9] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn94 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn95 bool
			if x.VolumeSource.PersistentVolumeClaim == nil {
				yyn95 = true
				goto LABEL95
			}
		LABEL95:
			if yyr82 || yy2arr82 {
				if yyn95 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[10] {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn95 {
						r.EncodeNil()
					} else {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn96 bool
			if x.VolumeSource.RBD == nil {
				yyn96 = true
				goto LABEL96
			}
		LABEL96:
			if yyr82 || yy2arr82 {
				if yyn96 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[11] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn96 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn97 bool
			if x.VolumeSource.Cinder == nil {
				yyn97 = true
				goto LABEL97
			}
		LABEL97:
			if yyr82 || yy2arr82 {
				if yyn97 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[12] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn97 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn98 bool
			if x.VolumeSource.CephFS == nil {
				yyn98 = true
				goto LABEL98
			}
		LABEL98:
			if yyr82 || yy2arr82 {
				if yyn98 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[13] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn98 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn99 bool
			if x.VolumeSource.Flocker == nil {
				yyn99 = true
				goto LABEL99
			}
		LABEL99:
			if yyr82 || yy2arr82 {
				if yyn99 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[14] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn99 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn100 bool
			if x.VolumeSource.DownwardAPI == nil {
				yyn100 = true
				goto LABEL100
			}
		LABEL100:
			if yyr82 || yy2arr82 {
				if yyn100 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[15] {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn100 {
						r.EncodeNil()
					} else {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn101 bool
			if x.VolumeSource.FC == nil {
				yyn101 = true
				goto LABEL101
			}
		LABEL101:
			if yyr82 || yy2arr82 {
				if yyn101 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[16] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn101 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr82 || yy2arr82 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Volume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym102 := z.DecBinary()
	_ = yym102
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct103 := r.ContainerType()
		if yyct103 == codecSelferValueTypeMap1234 {
			yyl103 := r.ReadMapStart()
			if yyl103 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl103, d)
			}
		} else if yyct103 == codecSelferValueTypeArray1234 {
			yyl103 := r.ReadArrayStart()
			if yyl103 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl103, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Volume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys104Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys104Slc
	var yyhl104 bool = l >= 0
	for yyj104 := 0; ; yyj104++ {
		if yyhl104 {
			if yyj104 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys104Slc = r.DecodeBytes(yys104Slc, true, true)
		yys104 := string(yys104Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys104 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPath":
			if x.VolumeSource.HostPath == nil {
				x.VolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if x.VolumeSource.EmptyDir == nil {
				x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.VolumeSource.GCEPersistentDisk == nil {
				x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.VolumeSource.AWSElasticBlockStore == nil {
				x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if x.VolumeSource.GitRepo == nil {
				x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if x.VolumeSource.Secret == nil {
				x.VolumeSource.Secret = new(SecretVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.VolumeSource.NFS == nil {
				x.VolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.VolumeSource.ISCSI == nil {
				x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.VolumeSource.Glusterfs == nil {
				x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if x.VolumeSource.PersistentVolumeClaim == nil {
				x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.VolumeSource.RBD == nil {
				x.VolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.VolumeSource.Cinder == nil {
				x.VolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.VolumeSource.CephFS == nil {
				x.VolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.VolumeSource.Flocker == nil {
				x.VolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if x.VolumeSource.DownwardAPI == nil {
				x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if x.VolumeSource.FC == nil {
				x.VolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys104)
		} // end switch yys104
	} // end for yyj104
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Volume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj122 int
	var yyb122 bool
	var yyhl122 bool = l >= 0
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	if x.VolumeSource.HostPath == nil {
		x.VolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.VolumeSource.EmptyDir == nil {
		x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GCEPersistentDisk == nil {
		x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AWSElasticBlockStore == nil {
		x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GitRepo == nil {
		x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Secret == nil {
		x.VolumeSource.Secret = new(SecretVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	if x.VolumeSource.NFS == nil {
		x.VolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ISCSI == nil {
		x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Glusterfs == nil {
		x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.VolumeSource.PersistentVolumeClaim == nil {
		x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	if x.VolumeSource.RBD == nil {
		x.VolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Cinder == nil {
		x.VolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.VolumeSource.CephFS == nil {
		x.VolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Flocker == nil {
		x.VolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.VolumeSource.DownwardAPI == nil {
		x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FC == nil {
		x.VolumeSource.FC = new(FCVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	for {
		yyj122++
		if yyhl122 {
			yyb122 = yyj122 > l
		} else {
			yyb122 = r.CheckBreak()
		}
		if yyb122 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj122-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym140 := z.EncBinary()
		_ = yym140
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep141 := !z.EncBinary()
			yy2arr141 := z.EncBasicHandle().StructToArray
			var yyq141 [16]bool
			_, _, _ = yysep141, yyq141, yy2arr141
			const yyr141 bool = false
			yyq141[0] = x.HostPath != nil
			yyq141[1] = x.EmptyDir != nil
			yyq141[2] = x.GCEPersistentDisk != nil
			yyq141[3] = x.AWSElasticBlockStore != nil
			yyq141[4] = x.GitRepo != nil
			yyq141[5] = x.Secret != nil
			yyq141[6] = x.NFS != nil
			yyq141[7] = x.ISCSI != nil
			yyq141[8] = x.Glusterfs != nil
			yyq141[9] = x.PersistentVolumeClaim != nil
			yyq141[10] = x.RBD != nil
			yyq141[11] = x.Cinder != nil
			yyq141[12] = x.CephFS != nil
			yyq141[13] = x.Flocker != nil
			yyq141[14] = x.DownwardAPI != nil
			yyq141[15] = x.FC != nil
			var yynn141 int
			if yyr141 || yy2arr141 {
				r.EncodeArrayStart(16)
			} else {
				yynn141 = 0
				for _, b := range yyq141 {
					if b {
						yynn141++
					}
				}
				r.EncodeMapStart(yynn141)
				yynn141 = 0
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[0] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[1] {
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[2] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[3] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[4] {
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[5] {
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[6] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[8] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[9] {
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[10] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[11] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[12] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[13] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[14] {
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[15] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym158 := z.DecBinary()
	_ = yym158
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct159 := r.ContainerType()
		if yyct159 == codecSelferValueTypeMap1234 {
			yyl159 := r.ReadMapStart()
			if yyl159 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl159, d)
			}
		} else if yyct159 == codecSelferValueTypeArray1234 {
			yyl159 := r.ReadArrayStart()
			if yyl159 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl159, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys160Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys160Slc
	var yyhl160 bool = l >= 0
	for yyj160 := 0; ; yyj160++ {
		if yyhl160 {
			if yyj160 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys160Slc = r.DecodeBytes(yys160Slc, true, true)
		yys160 := string(yys160Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys160 {
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys160)
		} // end switch yys160
	} // end for yyj160
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj177 int
	var yyb177 bool
	var yyhl177 bool = l >= 0
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	for {
		yyj177++
		if yyhl177 {
			yyb177 = yyj177 > l
		} else {
			yyb177 = r.CheckBreak()
		}
		if yyb177 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj177-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym194 := z.EncBinary()
		_ = yym194
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep195 := !z.EncBinary()
			yy2arr195 := z.EncBasicHandle().StructToArray
			var yyq195 [2]bool
			_, _, _ = yysep195, yyq195, yy2arr195
			const yyr195 bool = false
			yyq195[1] = x.ReadOnly != false
			var yynn195 int
			if yyr195 || yy2arr195 {
				r.EncodeArrayStart(2)
			} else {
				yynn195 = 1
				for _, b := range yyq195 {
					if b {
						yynn195++
					}
				}
				r.EncodeMapStart(yynn195)
				yynn195 = 0
			}
			if yyr195 || yy2arr195 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym197 := z.EncBinary()
				_ = yym197
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("claimName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym198 := z.EncBinary()
				_ = yym198
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			}
			if yyr195 || yy2arr195 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq195[1] {
					yym200 := z.EncBinary()
					_ = yym200
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq195[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym201 := z.EncBinary()
					_ = yym201
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr195 || yy2arr195 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym202 := z.DecBinary()
	_ = yym202
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct203 := r.ContainerType()
		if yyct203 == codecSelferValueTypeMap1234 {
			yyl203 := r.ReadMapStart()
			if yyl203 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl203, d)
			}
		} else if yyct203 == codecSelferValueTypeArray1234 {
			yyl203 := r.ReadArrayStart()
			if yyl203 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl203, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys204Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys204Slc
	var yyhl204 bool = l >= 0
	for yyj204 := 0; ; yyj204++ {
		if yyhl204 {
			if yyj204 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys204Slc = r.DecodeBytes(yys204Slc, true, true)
		yys204 := string(yys204Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys204 {
		case "claimName":
			if r.TryDecodeAsNil() {
				x.ClaimName = ""
			} else {
				x.ClaimName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys204)
		} // end switch yys204
	} // end for yyj204
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj207 int
	var yyb207 bool
	var yyhl207 bool = l >= 0
	yyj207++
	if yyhl207 {
		yyb207 = yyj207 > l
	} else {
		yyb207 = r.CheckBreak()
	}
	if yyb207 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClaimName = ""
	} else {
		x.ClaimName = string(r.DecodeString())
	}
	yyj207++
	if yyhl207 {
		yyb207 = yyj207 > l
	} else {
		yyb207 = r.CheckBreak()
	}
	if yyb207 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj207++
		if yyhl207 {
			yyb207 = yyj207 > l
		} else {
			yyb207 = r.CheckBreak()
		}
		if yyb207 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj207-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym210 := z.EncBinary()
		_ = yym210
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep211 := !z.EncBinary()
			yy2arr211 := z.EncBasicHandle().StructToArray
			var yyq211 [11]bool
			_, _, _ = yysep211, yyq211, yy2arr211
			const yyr211 bool = false
			yyq211[0] = x.GCEPersistentDisk != nil
			yyq211[1] = x.AWSElasticBlockStore != nil
			yyq211[2] = x.HostPath != nil
			yyq211[3] = x.Glusterfs != nil
			yyq211[4] = x.NFS != nil
			yyq211[5] = x.RBD != nil
			yyq211[6] = x.ISCSI != nil
			yyq211[7] = x.Cinder != nil
			yyq211[8] = x.CephFS != nil
			yyq211[9] = x.FC != nil
			yyq211[10] = x.Flocker != nil
			var yynn211 int
			if yyr211 || yy2arr211 {
				r.EncodeArrayStart(11)
			} else {
				yynn211 = 0
				for _, b := range yyq211 {
					if b {
						yynn211++
					}
				}
				r.EncodeMapStart(yynn211)
				yynn211 = 0
			}
			if yyr211 || yy2arr211 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq211[0] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq211[1] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq211[2] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq211[3] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq211[4] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq211[5] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq211[6] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq211[7] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq211[8] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq211[9] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq211[10] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym223 := z.DecBinary()
	_ = yym223
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct224 := r.ContainerType()
		if yyct224 == codecSelferValueTypeMap1234 {
			yyl224 := r.ReadMapStart()
			if yyl224 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl224, d)
			}
		} else if yyct224 == codecSelferValueTypeArray1234 {
			yyl224 := r.ReadArrayStart()
			if yyl224 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl224, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys225Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys225Slc
	var yyhl225 bool = l >= 0
	for yyj225 := 0; ; yyj225++ {
		if yyhl225 {
			if yyj225 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys225Slc = r.DecodeBytes(yys225Slc, true, true)
		yys225 := string(yys225Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys225 {
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys225)
		} // end switch yys225
	} // end for yyj225
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj237 int
	var yyb237 bool
	var yyhl237 bool = l >= 0
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	for {
		yyj237++
		if yyhl237 {
			yyb237 = yyj237 > l
		} else {
			yyb237 = r.CheckBreak()
		}
		if yyb237 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj237-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym249 := z.EncBinary()
		_ = yym249
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep250 := !z.EncBinary()
			yy2arr250 := z.EncBasicHandle().StructToArray
			var yyq250 [5]bool
			_, _, _ = yysep250, yyq250, yy2arr250
			const yyr250 bool = false
			yyq250[0] = x.Kind != ""
			yyq250[1] = x.APIVersion != ""
			yyq250[2] = true
			yyq250[3] = true
			yyq250[4] = true
			var yynn250 int
			if yyr250 || yy2arr250 {
				r.EncodeArrayStart(5)
			} else {
				yynn250 = 0
				for _, b := range yyq250 {
					if b {
						yynn250++
					}
				}
				r.EncodeMapStart(yynn250)
				yynn250 = 0
			}
			if yyr250 || yy2arr250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq250[0] {
					yym252 := z.EncBinary()
					_ = yym252
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq250[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym253 := z.EncBinary()
					_ = yym253
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr250 || yy2arr250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq250[1] {
					yym255 := z.EncBinary()
					_ = yym255
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq250[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym256 := z.EncBinary()
					_ = yym256
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr250 || yy2arr250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq250[2] {
					yy258 := &x.ObjectMeta
					yy258.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy259 := &x.ObjectMeta
					yy259.CodecEncodeSelf(e)
				}
			}
			if yyr250 || yy2arr250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq250[3] {
					yy261 := &x.Spec
					yy261.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy262 := &x.Spec
					yy262.CodecEncodeSelf(e)
				}
			}
			if yyr250 || yy2arr250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq250[4] {
					yy264 := &x.Status
					yy264.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy265 := &x.Status
					yy265.CodecEncodeSelf(e)
				}
			}
			if yyr250 || yy2arr250 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym266 := z.DecBinary()
	_ = yym266
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct267 := r.ContainerType()
		if yyct267 == codecSelferValueTypeMap1234 {
			yyl267 := r.ReadMapStart()
			if yyl267 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl267, d)
			}
		} else if yyct267 == codecSelferValueTypeArray1234 {
			yyl267 := r.ReadArrayStart()
			if yyl267 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl267, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys268Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys268Slc
	var yyhl268 bool = l >= 0
	for yyj268 := 0; ; yyj268++ {
		if yyhl268 {
			if yyj268 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys268Slc = r.DecodeBytes(yys268Slc, true, true)
		yys268 := string(yys268Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys268 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv271 := &x.ObjectMeta
				yyv271.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeSpec{}
			} else {
				yyv272 := &x.Spec
				yyv272.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeStatus{}
			} else {
				yyv273 := &x.Status
				yyv273.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys268)
		} // end switch yys268
	} // end for yyj268
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj274 int
	var yyb274 bool
	var yyhl274 bool = l >= 0
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv277 := &x.ObjectMeta
		yyv277.CodecDecodeSelf(d)
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeSpec{}
	} else {
		yyv278 := &x.Spec
		yyv278.CodecDecodeSelf(d)
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeStatus{}
	} else {
		yyv279 := &x.Status
		yyv279.CodecDecodeSelf(d)
	}
	for {
		yyj274++
		if yyhl274 {
			yyb274 = yyj274 > l
		} else {
			yyb274 = r.CheckBreak()
		}
		if yyb274 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj274-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym280 := z.EncBinary()
		_ = yym280
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep281 := !z.EncBinary()
			yy2arr281 := z.EncBasicHandle().StructToArray
			var yyq281 [15]bool
			_, _, _ = yysep281, yyq281, yy2arr281
			const yyr281 bool = false
			yyq281[0] = len(x.Capacity) != 0
			yyq281[1] = x.PersistentVolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq281[2] = x.PersistentVolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq281[3] = x.PersistentVolumeSource.HostPath != nil && x.HostPath != nil
			yyq281[4] = x.PersistentVolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq281[5] = x.PersistentVolumeSource.NFS != nil && x.NFS != nil
			yyq281[6] = x.PersistentVolumeSource.RBD != nil && x.RBD != nil
			yyq281[7] = x.PersistentVolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq281[8] = x.PersistentVolumeSource.Cinder != nil && x.Cinder != nil
			yyq281[9] = x.PersistentVolumeSource.CephFS != nil && x.CephFS != nil
			yyq281[10] = x.PersistentVolumeSource.FC != nil && x.FC != nil
			yyq281[11] = x.PersistentVolumeSource.Flocker != nil && x.Flocker != nil
			yyq281[12] = len(x.AccessModes) != 0
			yyq281[13] = x.ClaimRef != nil
			yyq281[14] = x.PersistentVolumeReclaimPolicy != ""
			var yynn281 int
			if yyr281 || yy2arr281 {
				r.EncodeArrayStart(15)
			} else {
				yynn281 = 0
				for _, b := range yyq281 {
					if b {
						yynn281++
					}
				}
				r.EncodeMapStart(yynn281)
				yynn281 = 0
			}
			if yyr281 || yy2arr281 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq281[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq281[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			var yyn283 bool
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				yyn283 = true
				goto LABEL283
			}
		LABEL283:
			if yyr281 || yy2arr281 {
				if yyn283 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq281[1] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn283 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn284 bool
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				yyn284 = true
				goto LABEL284
			}
		LABEL284:
			if yyr281 || yy2arr281 {
				if yyn284 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq281[2] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn284 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn285 bool
			if x.PersistentVolumeSource.HostPath == nil {
				yyn285 = true
				goto LABEL285
			}
		LABEL285:
			if yyr281 || yy2arr281 {
				if yyn285 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq281[3] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn285 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn286 bool
			if x.PersistentVolumeSource.Glusterfs == nil {
				yyn286 = true
				goto LABEL286
			}
		LABEL286:
			if yyr281 || yy2arr281 {
				if yyn286 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq281[4] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn286 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn287 bool
			if x.PersistentVolumeSource.NFS == nil {
				yyn287 = true
				goto LABEL287
			}
		LABEL287:
			if yyr281 || yy2arr281 {
				if yyn287 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq281[5] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn287 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn288 bool
			if x.PersistentVolumeSource.RBD == nil {
				yyn288 = true
				goto LABEL288
			}
		LABEL288:
			if yyr281 || yy2arr281 {
				if yyn288 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq281[6] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn288 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn289 bool
			if x.PersistentVolumeSource.ISCSI == nil {
				yyn289 = true
				goto LABEL289
			}
		LABEL289:
			if yyr281 || yy2arr281 {
				if yyn289 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq281[7] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn289 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn290 bool
			if x.PersistentVolumeSource.Cinder == nil {
				yyn290 = true
				goto LABEL290
			}
		LABEL290:
			if yyr281 || yy2arr281 {
				if yyn290 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq281[8] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn290 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn291 bool
			if x.PersistentVolumeSource.CephFS == nil {
				yyn291 = true
				goto LABEL291
			}
		LABEL291:
			if yyr281 || yy2arr281 {
				if yyn291 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq281[9] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn291 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn292 bool
			if x.PersistentVolumeSource.FC == nil {
				yyn292 = true
				goto LABEL292
			}
		LABEL292:
			if yyr281 || yy2arr281 {
				if yyn292 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq281[10] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn292 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn293 bool
			if x.PersistentVolumeSource.Flocker == nil {
				yyn293 = true
				goto LABEL293
			}
		LABEL293:
			if yyr281 || yy2arr281 {
				if yyn293 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq281[11] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn293 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr281 || yy2arr281 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq281[12] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym295 := z.EncBinary()
						_ = yym295
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq281[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym296 := z.EncBinary()
						_ = yym296
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr281 || yy2arr281 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq281[13] {
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq281[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("claimRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr281 || yy2arr281 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq281[14] {
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq281[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeReclaimPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr281 || yy2arr281 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym299 := z.DecBinary()
	_ = yym299
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct300 := r.ContainerType()
		if yyct300 == codecSelferValueTypeMap1234 {
			yyl300 := r.ReadMapStart()
			if yyl300 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl300, d)
			}
		} else if yyct300 == codecSelferValueTypeArray1234 {
			yyl300 := r.ReadArrayStart()
			if yyl300 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl300, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys301Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys301Slc
	var yyhl301 bool = l >= 0
	for yyj301 := 0; ; yyj301++ {
		if yyhl301 {
			if yyj301 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys301Slc = r.DecodeBytes(yys301Slc, true, true)
		yys301 := string(yys301Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys301 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv302 := &x.Capacity
				yyv302.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if x.PersistentVolumeSource.HostPath == nil {
				x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.PersistentVolumeSource.Glusterfs == nil {
				x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.PersistentVolumeSource.NFS == nil {
				x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.PersistentVolumeSource.RBD == nil {
				x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.PersistentVolumeSource.ISCSI == nil {
				x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.PersistentVolumeSource.Cinder == nil {
				x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.PersistentVolumeSource.CephFS == nil {
				x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if x.PersistentVolumeSource.FC == nil {
				x.PersistentVolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.PersistentVolumeSource.Flocker == nil {
				x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv314 := &x.AccessModes
				yym315 := z.DecBinary()
				_ = yym315
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv314), d)
				}
			}
		case "claimRef":
			if r.TryDecodeAsNil() {
				if x.ClaimRef != nil {
					x.ClaimRef = nil
				}
			} else {
				if x.ClaimRef == nil {
					x.ClaimRef = new(ObjectReference)
				}
				x.ClaimRef.CodecDecodeSelf(d)
			}
		case "persistentVolumeReclaimPolicy":
			if r.TryDecodeAsNil() {
				x.PersistentVolumeReclaimPolicy = ""
			} else {
				x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys301)
		} // end switch yys301
	} // end for yyj301
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj318 int
	var yyb318 bool
	var yyhl318 bool = l >= 0
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv319 := &x.Capacity
		yyv319.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.GCEPersistentDisk == nil {
		x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
		x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.HostPath == nil {
		x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Glusterfs == nil {
		x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.NFS == nil {
		x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.RBD == nil {
		x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.ISCSI == nil {
		x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Cinder == nil {
		x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.CephFS == nil {
		x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FC == nil {
		x.PersistentVolumeSource.FC = new(FCVolumeSource)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Flocker == nil {
		x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv331 := &x.AccessModes
		yym332 := z.DecBinary()
		_ = yym332
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv331), d)
		}
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ClaimRef != nil {
			x.ClaimRef = nil
		}
	} else {
		if x.ClaimRef == nil {
			x.ClaimRef = new(ObjectReference)
		}
		x.ClaimRef.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PersistentVolumeReclaimPolicy = ""
	} else {
		x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
	}
	for {
		yyj318++
		if yyhl318 {
			yyb318 = yyj318 > l
		} else {
			yyb318 = r.CheckBreak()
		}
		if yyb318 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj318-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeReclaimPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym335 := z.EncBinary()
	_ = yym335
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeReclaimPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym336 := z.DecBinary()
	_ = yym336
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PersistentVolumeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym337 := z.EncBinary()
		_ = yym337
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep338 := !z.EncBinary()
			yy2arr338 := z.EncBasicHandle().StructToArray
			var yyq338 [3]bool
			_, _, _ = yysep338, yyq338, yy2arr338
			const yyr338 bool = false
			yyq338[0] = x.Phase != ""
			yyq338[1] = x.Message != ""
			yyq338[2] = x.Reason != ""
			var yynn338 int
			if yyr338 || yy2arr338 {
				r.EncodeArrayStart(3)
			} else {
				yynn338 = 0
				for _, b := range yyq338 {
					if b {
						yynn338++
					}
				}
				r.EncodeMapStart(yynn338)
				yynn338 = 0
			}
			if yyr338 || yy2arr338 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq338[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq338[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr338 || yy2arr338 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq338[1] {
					yym341 := z.EncBinary()
					_ = yym341
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq338[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym342 := z.EncBinary()
					_ = yym342
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr338 || yy2arr338 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq338[2] {
					yym344 := z.EncBinary()
					_ = yym344
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq338[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym345 := z.EncBinary()
					_ = yym345
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr338 || yy2arr338 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym346 := z.DecBinary()
	_ = yym346
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct347 := r.ContainerType()
		if yyct347 == codecSelferValueTypeMap1234 {
			yyl347 := r.ReadMapStart()
			if yyl347 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl347, d)
			}
		} else if yyct347 == codecSelferValueTypeArray1234 {
			yyl347 := r.ReadArrayStart()
			if yyl347 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl347, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys348Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys348Slc
	var yyhl348 bool = l >= 0
	for yyj348 := 0; ; yyj348++ {
		if yyhl348 {
			if yyj348 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys348Slc = r.DecodeBytes(yys348Slc, true, true)
		yys348 := string(yys348Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys348 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumePhase(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys348)
		} // end switch yys348
	} // end for yyj348
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj352 int
	var yyb352 bool
	var yyhl352 bool = l >= 0
	yyj352++
	if yyhl352 {
		yyb352 = yyj352 > l
	} else {
		yyb352 = r.CheckBreak()
	}
	if yyb352 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumePhase(r.DecodeString())
	}
	yyj352++
	if yyhl352 {
		yyb352 = yyj352 > l
	} else {
		yyb352 = r.CheckBreak()
	}
	if yyb352 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj352++
	if yyhl352 {
		yyb352 = yyj352 > l
	} else {
		yyb352 = r.CheckBreak()
	}
	if yyb352 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	for {
		yyj352++
		if yyhl352 {
			yyb352 = yyj352 > l
		} else {
			yyb352 = r.CheckBreak()
		}
		if yyb352 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj352-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym356 := z.EncBinary()
		_ = yym356
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep357 := !z.EncBinary()
			yy2arr357 := z.EncBasicHandle().StructToArray
			var yyq357 [4]bool
			_, _, _ = yysep357, yyq357, yy2arr357
			const yyr357 bool = false
			yyq357[0] = x.Kind != ""
			yyq357[1] = x.APIVersion != ""
			yyq357[2] = true
			var yynn357 int
			if yyr357 || yy2arr357 {
				r.EncodeArrayStart(4)
			} else {
				yynn357 = 1
				for _, b := range yyq357 {
					if b {
						yynn357++
					}
				}
				r.EncodeMapStart(yynn357)
				yynn357 = 0
			}
			if yyr357 || yy2arr357 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq357[0] {
					yym359 := z.EncBinary()
					_ = yym359
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq357[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym360 := z.EncBinary()
					_ = yym360
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr357 || yy2arr357 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq357[1] {
					yym362 := z.EncBinary()
					_ = yym362
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq357[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym363 := z.EncBinary()
					_ = yym363
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr357 || yy2arr357 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq357[2] {
					yy365 := &x.ListMeta
					yym366 := z.EncBinary()
					_ = yym366
					if false {
					} else if z.HasExtensions() && z.EncExt(yy365) {
					} else {
						z.EncFallback(yy365)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq357[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy367 := &x.ListMeta
					yym368 := z.EncBinary()
					_ = yym368
					if false {
					} else if z.HasExtensions() && z.EncExt(yy367) {
					} else {
						z.EncFallback(yy367)
					}
				}
			}
			if yyr357 || yy2arr357 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym370 := z.EncBinary()
					_ = yym370
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym371 := z.EncBinary()
					_ = yym371
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			}
			if yyr357 || yy2arr357 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym372 := z.DecBinary()
	_ = yym372
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct373 := r.ContainerType()
		if yyct373 == codecSelferValueTypeMap1234 {
			yyl373 := r.ReadMapStart()
			if yyl373 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl373, d)
			}
		} else if yyct373 == codecSelferValueTypeArray1234 {
			yyl373 := r.ReadArrayStart()
			if yyl373 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl373, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys374Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys374Slc
	var yyhl374 bool = l >= 0
	for yyj374 := 0; ; yyj374++ {
		if yyhl374 {
			if yyj374 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys374Slc = r.DecodeBytes(yys374Slc, true, true)
		yys374 := string(yys374Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys374 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv377 := &x.ListMeta
				yym378 := z.DecBinary()
				_ = yym378
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv377) {
				} else {
					z.DecFallback(yyv377, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv379 := &x.Items
				yym380 := z.DecBinary()
				_ = yym380
				if false {
				} else {
					h.decSlicePersistentVolume((*[]PersistentVolume)(yyv379), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys374)
		} // end switch yys374
	} // end for yyj374
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj381 int
	var yyb381 bool
	var yyhl381 bool = l >= 0
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv384 := &x.ListMeta
		yym385 := z.DecBinary()
		_ = yym385
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv384) {
		} else {
			z.DecFallback(yyv384, false)
		}
	}
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv386 := &x.Items
		yym387 := z.DecBinary()
		_ = yym387
		if false {
		} else {
			h.decSlicePersistentVolume((*[]PersistentVolume)(yyv386), d)
		}
	}
	for {
		yyj381++
		if yyhl381 {
			yyb381 = yyj381 > l
		} else {
			yyb381 = r.CheckBreak()
		}
		if yyb381 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj381-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaim) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym388 := z.EncBinary()
		_ = yym388
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep389 := !z.EncBinary()
			yy2arr389 := z.EncBasicHandle().StructToArray
			var yyq389 [5]bool
			_, _, _ = yysep389, yyq389, yy2arr389
			const yyr389 bool = false
			yyq389[0] = x.Kind != ""
			yyq389[1] = x.APIVersion != ""
			yyq389[2] = true
			yyq389[3] = true
			yyq389[4] = true
			var yynn389 int
			if yyr389 || yy2arr389 {
				r.EncodeArrayStart(5)
			} else {
				yynn389 = 0
				for _, b := range yyq389 {
					if b {
						yynn389++
					}
				}
				r.EncodeMapStart(yynn389)
				yynn389 = 0
			}
			if yyr389 || yy2arr389 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq389[0] {
					yym391 := z.EncBinary()
					_ = yym391
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq389[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym392 := z.EncBinary()
					_ = yym392
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr389 || yy2arr389 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq389[1] {
					yym394 := z.EncBinary()
					_ = yym394
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq389[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym395 := z.EncBinary()
					_ = yym395
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr389 || yy2arr389 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq389[2] {
					yy397 := &x.ObjectMeta
					yy397.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq389[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy398 := &x.ObjectMeta
					yy398.CodecEncodeSelf(e)
				}
			}
			if yyr389 || yy2arr389 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq389[3] {
					yy400 := &x.Spec
					yy400.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq389[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy401 := &x.Spec
					yy401.CodecEncodeSelf(e)
				}
			}
			if yyr389 || yy2arr389 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq389[4] {
					yy403 := &x.Status
					yy403.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq389[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy404 := &x.Status
					yy404.CodecEncodeSelf(e)
				}
			}
			if yyr389 || yy2arr389 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaim) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym405 := z.DecBinary()
	_ = yym405
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct406 := r.ContainerType()
		if yyct406 == codecSelferValueTypeMap1234 {
			yyl406 := r.ReadMapStart()
			if yyl406 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl406, d)
			}
		} else if yyct406 == codecSelferValueTypeArray1234 {
			yyl406 := r.ReadArrayStart()
			if yyl406 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl406, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys407Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys407Slc
	var yyhl407 bool = l >= 0
	for yyj407 := 0; ; yyj407++ {
		if yyhl407 {
			if yyj407 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys407Slc = r.DecodeBytes(yys407Slc, true, true)
		yys407 := string(yys407Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys407 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv410 := &x.ObjectMeta
				yyv410.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeClaimSpec{}
			} else {
				yyv411 := &x.Spec
				yyv411.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeClaimStatus{}
			} else {
				yyv412 := &x.Status
				yyv412.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys407)
		} // end switch yys407
	} // end for yyj407
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj413 int
	var yyb413 bool
	var yyhl413 bool = l >= 0
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv416 := &x.ObjectMeta
		yyv416.CodecDecodeSelf(d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeClaimSpec{}
	} else {
		yyv417 := &x.Spec
		yyv417.CodecDecodeSelf(d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeClaimStatus{}
	} else {
		yyv418 := &x.Status
		yyv418.CodecDecodeSelf(d)
	}
	for {
		yyj413++
		if yyhl413 {
			yyb413 = yyj413 > l
		} else {
			yyb413 = r.CheckBreak()
		}
		if yyb413 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj413-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym419 := z.EncBinary()
		_ = yym419
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep420 := !z.EncBinary()
			yy2arr420 := z.EncBasicHandle().StructToArray
			var yyq420 [4]bool
			_, _, _ = yysep420, yyq420, yy2arr420
			const yyr420 bool = false
			yyq420[0] = x.Kind != ""
			yyq420[1] = x.APIVersion != ""
			yyq420[2] = true
			var yynn420 int
			if yyr420 || yy2arr420 {
				r.EncodeArrayStart(4)
			} else {
				yynn420 = 1
				for _, b := range yyq420 {
					if b {
						yynn420++
					}
				}
				r.EncodeMapStart(yynn420)
				yynn420 = 0
			}
			if yyr420 || yy2arr420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq420[0] {
					yym422 := z.EncBinary()
					_ = yym422
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq420[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym423 := z.EncBinary()
					_ = yym423
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr420 || yy2arr420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq420[1] {
					yym425 := z.EncBinary()
					_ = yym425
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq420[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym426 := z.EncBinary()
					_ = yym426
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr420 || yy2arr420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq420[2] {
					yy428 := &x.ListMeta
					yym429 := z.EncBinary()
					_ = yym429
					if false {
					} else if z.HasExtensions() && z.EncExt(yy428) {
					} else {
						z.EncFallback(yy428)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq420[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy430 := &x.ListMeta
					yym431 := z.EncBinary()
					_ = yym431
					if false {
					} else if z.HasExtensions() && z.EncExt(yy430) {
					} else {
						z.EncFallback(yy430)
					}
				}
			}
			if yyr420 || yy2arr420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym433 := z.EncBinary()
					_ = yym433
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym434 := z.EncBinary()
					_ = yym434
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			}
			if yyr420 || yy2arr420 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym435 := z.DecBinary()
	_ = yym435
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct436 := r.ContainerType()
		if yyct436 == codecSelferValueTypeMap1234 {
			yyl436 := r.ReadMapStart()
			if yyl436 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl436, d)
			}
		} else if yyct436 == codecSelferValueTypeArray1234 {
			yyl436 := r.ReadArrayStart()
			if yyl436 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl436, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys437Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys437Slc
	var yyhl437 bool = l >= 0
	for yyj437 := 0; ; yyj437++ {
		if yyhl437 {
			if yyj437 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys437Slc = r.DecodeBytes(yys437Slc, true, true)
		yys437 := string(yys437Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys437 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv440 := &x.ListMeta
				yym441 := z.DecBinary()
				_ = yym441
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv440) {
				} else {
					z.DecFallback(yyv440, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv442 := &x.Items
				yym443 := z.DecBinary()
				_ = yym443
				if false {
				} else {
					h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv442), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys437)
		} // end switch yys437
	} // end for yyj437
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj444 int
	var yyb444 bool
	var yyhl444 bool = l >= 0
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv447 := &x.ListMeta
		yym448 := z.DecBinary()
		_ = yym448
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv447) {
		} else {
			z.DecFallback(yyv447, false)
		}
	}
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv449 := &x.Items
		yym450 := z.DecBinary()
		_ = yym450
		if false {
		} else {
			h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv449), d)
		}
	}
	for {
		yyj444++
		if yyhl444 {
			yyb444 = yyj444 > l
		} else {
			yyb444 = r.CheckBreak()
		}
		if yyb444 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj444-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym451 := z.EncBinary()
		_ = yym451
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep452 := !z.EncBinary()
			yy2arr452 := z.EncBasicHandle().StructToArray
			var yyq452 [3]bool
			_, _, _ = yysep452, yyq452, yy2arr452
			const yyr452 bool = false
			yyq452[0] = len(x.AccessModes) != 0
			yyq452[1] = true
			yyq452[2] = x.VolumeName != ""
			var yynn452 int
			if yyr452 || yy2arr452 {
				r.EncodeArrayStart(3)
			} else {
				yynn452 = 0
				for _, b := range yyq452 {
					if b {
						yynn452++
					}
				}
				r.EncodeMapStart(yynn452)
				yynn452 = 0
			}
			if yyr452 || yy2arr452 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq452[0] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym454 := z.EncBinary()
						_ = yym454
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq452[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym455 := z.EncBinary()
						_ = yym455
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr452 || yy2arr452 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq452[1] {
					yy457 := &x.Resources
					yy457.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq452[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy458 := &x.Resources
					yy458.CodecEncodeSelf(e)
				}
			}
			if yyr452 || yy2arr452 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq452[2] {
					yym460 := z.EncBinary()
					_ = yym460
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq452[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym461 := z.EncBinary()
					_ = yym461
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				}
			}
			if yyr452 || yy2arr452 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym462 := z.DecBinary()
	_ = yym462
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct463 := r.ContainerType()
		if yyct463 == codecSelferValueTypeMap1234 {
			yyl463 := r.ReadMapStart()
			if yyl463 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl463, d)
			}
		} else if yyct463 == codecSelferValueTypeArray1234 {
			yyl463 := r.ReadArrayStart()
			if yyl463 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl463, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys464Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys464Slc
	var yyhl464 bool = l >= 0
	for yyj464 := 0; ; yyj464++ {
		if yyhl464 {
			if yyj464 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys464Slc = r.DecodeBytes(yys464Slc, true, true)
		yys464 := string(yys464Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys464 {
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv465 := &x.AccessModes
				yym466 := z.DecBinary()
				_ = yym466
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv465), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv467 := &x.Resources
				yyv467.CodecDecodeSelf(d)
			}
		case "volumeName":
			if r.TryDecodeAsNil() {
				x.VolumeName = ""
			} else {
				x.VolumeName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys464)
		} // end switch yys464
	} // end for yyj464
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj469 int
	var yyb469 bool
	var yyhl469 bool = l >= 0
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv470 := &x.AccessModes
		yym471 := z.DecBinary()
		_ = yym471
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv470), d)
		}
	}
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv472 := &x.Resources
		yyv472.CodecDecodeSelf(d)
	}
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeName = ""
	} else {
		x.VolumeName = string(r.DecodeString())
	}
	for {
		yyj469++
		if yyhl469 {
			yyb469 = yyj469 > l
		} else {
			yyb469 = r.CheckBreak()
		}
		if yyb469 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj469-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym474 := z.EncBinary()
		_ = yym474
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep475 := !z.EncBinary()
			yy2arr475 := z.EncBasicHandle().StructToArray
			var yyq475 [3]bool
			_, _, _ = yysep475, yyq475, yy2arr475
			const yyr475 bool = false
			yyq475[0] = x.Phase != ""
			yyq475[1] = len(x.AccessModes) != 0
			yyq475[2] = len(x.Capacity) != 0
			var yynn475 int
			if yyr475 || yy2arr475 {
				r.EncodeArrayStart(3)
			} else {
				yynn475 = 0
				for _, b := range yyq475 {
					if b {
						yynn475++
					}
				}
				r.EncodeMapStart(yynn475)
				yynn475 = 0
			}
			if yyr475 || yy2arr475 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq475[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq475[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr475 || yy2arr475 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq475[1] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym478 := z.EncBinary()
						_ = yym478
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq475[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym479 := z.EncBinary()
						_ = yym479
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr475 || yy2arr475 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq475[2] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq475[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr475 || yy2arr475 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym481 := z.DecBinary()
	_ = yym481
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct482 := r.ContainerType()
		if yyct482 == codecSelferValueTypeMap1234 {
			yyl482 := r.ReadMapStart()
			if yyl482 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl482, d)
			}
		} else if yyct482 == codecSelferValueTypeArray1234 {
			yyl482 := r.ReadArrayStart()
			if yyl482 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl482, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys483Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys483Slc
	var yyhl483 bool = l >= 0
	for yyj483 := 0; ; yyj483++ {
		if yyhl483 {
			if yyj483 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys483Slc = r.DecodeBytes(yys483Slc, true, true)
		yys483 := string(yys483Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys483 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv485 := &x.AccessModes
				yym486 := z.DecBinary()
				_ = yym486
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv485), d)
				}
			}
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv487 := &x.Capacity
				yyv487.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys483)
		} // end switch yys483
	} // end for yyj483
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj488 int
	var yyb488 bool
	var yyhl488 bool = l >= 0
	yyj488++
	if yyhl488 {
		yyb488 = yyj488 > l
	} else {
		yyb488 = r.CheckBreak()
	}
	if yyb488 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
	}
	yyj488++
	if yyhl488 {
		yyb488 = yyj488 > l
	} else {
		yyb488 = r.CheckBreak()
	}
	if yyb488 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv490 := &x.AccessModes
		yym491 := z.DecBinary()
		_ = yym491
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv490), d)
		}
	}
	yyj488++
	if yyhl488 {
		yyb488 = yyj488 > l
	} else {
		yyb488 = r.CheckBreak()
	}
	if yyb488 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv492 := &x.Capacity
		yyv492.CodecDecodeSelf(d)
	}
	for {
		yyj488++
		if yyhl488 {
			yyb488 = yyj488 > l
		} else {
			yyb488 = r.CheckBreak()
		}
		if yyb488 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj488-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeAccessMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym493 := z.EncBinary()
	_ = yym493
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeAccessMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym494 := z.DecBinary()
	_ = yym494
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym495 := z.EncBinary()
	_ = yym495
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym496 := z.DecBinary()
	_ = yym496
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumeClaimPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym497 := z.EncBinary()
	_ = yym497
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeClaimPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym498 := z.DecBinary()
	_ = yym498
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *HostPathVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym499 := z.EncBinary()
		_ = yym499
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep500 := !z.EncBinary()
			yy2arr500 := z.EncBasicHandle().StructToArray
			var yyq500 [1]bool
			_, _, _ = yysep500, yyq500, yy2arr500
			const yyr500 bool = false
			var yynn500 int
			if yyr500 || yy2arr500 {
				r.EncodeArrayStart(1)
			} else {
				yynn500 = 1
				for _, b := range yyq500 {
					if b {
						yynn500++
					}
				}
				r.EncodeMapStart(yynn500)
				yynn500 = 0
			}
			if yyr500 || yy2arr500 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym502 := z.EncBinary()
				_ = yym502
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym503 := z.EncBinary()
				_ = yym503
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr500 || yy2arr500 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HostPathVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym504 := z.DecBinary()
	_ = yym504
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct505 := r.ContainerType()
		if yyct505 == codecSelferValueTypeMap1234 {
			yyl505 := r.ReadMapStart()
			if yyl505 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl505, d)
			}
		} else if yyct505 == codecSelferValueTypeArray1234 {
			yyl505 := r.ReadArrayStart()
			if yyl505 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl505, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys506Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys506Slc
	var yyhl506 bool = l >= 0
	for yyj506 := 0; ; yyj506++ {
		if yyhl506 {
			if yyj506 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys506Slc = r.DecodeBytes(yys506Slc, true, true)
		yys506 := string(yys506Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys506 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys506)
		} // end switch yys506
	} // end for yyj506
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HostPathVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj508 int
	var yyb508 bool
	var yyhl508 bool = l >= 0
	yyj508++
	if yyhl508 {
		yyb508 = yyj508 > l
	} else {
		yyb508 = r.CheckBreak()
	}
	if yyb508 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj508++
		if yyhl508 {
			yyb508 = yyj508 > l
		} else {
			yyb508 = r.CheckBreak()
		}
		if yyb508 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj508-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EmptyDirVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym510 := z.EncBinary()
		_ = yym510
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep511 := !z.EncBinary()
			yy2arr511 := z.EncBasicHandle().StructToArray
			var yyq511 [1]bool
			_, _, _ = yysep511, yyq511, yy2arr511
			const yyr511 bool = false
			yyq511[0] = x.Medium != ""
			var yynn511 int
			if yyr511 || yy2arr511 {
				r.EncodeArrayStart(1)
			} else {
				yynn511 = 0
				for _, b := range yyq511 {
					if b {
						yynn511++
					}
				}
				r.EncodeMapStart(yynn511)
				yynn511 = 0
			}
			if yyr511 || yy2arr511 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq511[0] {
					x.Medium.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq511[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("medium"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Medium.CodecEncodeSelf(e)
				}
			}
			if yyr511 || yy2arr511 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EmptyDirVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym513 := z.DecBinary()
	_ = yym513
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct514 := r.ContainerType()
		if yyct514 == codecSelferValueTypeMap1234 {
			yyl514 := r.ReadMapStart()
			if yyl514 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl514, d)
			}
		} else if yyct514 == codecSelferValueTypeArray1234 {
			yyl514 := r.ReadArrayStart()
			if yyl514 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl514, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys515Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys515Slc
	var yyhl515 bool = l >= 0
	for yyj515 := 0; ; yyj515++ {
		if yyhl515 {
			if yyj515 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys515Slc = r.DecodeBytes(yys515Slc, true, true)
		yys515 := string(yys515Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys515 {
		case "medium":
			if r.TryDecodeAsNil() {
				x.Medium = ""
			} else {
				x.Medium = StorageMedium(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys515)
		} // end switch yys515
	} // end for yyj515
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj517 int
	var yyb517 bool
	var yyhl517 bool = l >= 0
	yyj517++
	if yyhl517 {
		yyb517 = yyj517 > l
	} else {
		yyb517 = r.CheckBreak()
	}
	if yyb517 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Medium = ""
	} else {
		x.Medium = StorageMedium(r.DecodeString())
	}
	for {
		yyj517++
		if yyhl517 {
			yyb517 = yyj517 > l
		} else {
			yyb517 = r.CheckBreak()
		}
		if yyb517 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj517-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GlusterfsVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym519 := z.EncBinary()
		_ = yym519
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep520 := !z.EncBinary()
			yy2arr520 := z.EncBasicHandle().StructToArray
			var yyq520 [3]bool
			_, _, _ = yysep520, yyq520, yy2arr520
			const yyr520 bool = false
			yyq520[2] = x.ReadOnly != false
			var yynn520 int
			if yyr520 || yy2arr520 {
				r.EncodeArrayStart(3)
			} else {
				yynn520 = 2
				for _, b := range yyq520 {
					if b {
						yynn520++
					}
				}
				r.EncodeMapStart(yynn520)
				yynn520 = 0
			}
			if yyr520 || yy2arr520 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym522 := z.EncBinary()
				_ = yym522
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("endpoints"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym523 := z.EncBinary()
				_ = yym523
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			}
			if yyr520 || yy2arr520 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym525 := z.EncBinary()
				_ = yym525
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym526 := z.EncBinary()
				_ = yym526
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr520 || yy2arr520 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq520[2] {
					yym528 := z.EncBinary()
					_ = yym528
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq520[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym529 := z.EncBinary()
					_ = yym529
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr520 || yy2arr520 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GlusterfsVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym530 := z.DecBinary()
	_ = yym530
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct531 := r.ContainerType()
		if yyct531 == codecSelferValueTypeMap1234 {
			yyl531 := r.ReadMapStart()
			if yyl531 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl531, d)
			}
		} else if yyct531 == codecSelferValueTypeArray1234 {
			yyl531 := r.ReadArrayStart()
			if yyl531 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl531, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys532Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys532Slc
	var yyhl532 bool = l >= 0
	for yyj532 := 0; ; yyj532++ {
		if yyhl532 {
			if yyj532 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys532Slc = r.DecodeBytes(yys532Slc, true, true)
		yys532 := string(yys532Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys532 {
		case "endpoints":
			if r.TryDecodeAsNil() {
				x.EndpointsName = ""
			} else {
				x.EndpointsName = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys532)
		} // end switch yys532
	} // end for yyj532
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj536 int
	var yyb536 bool
	var yyhl536 bool = l >= 0
	yyj536++
	if yyhl536 {
		yyb536 = yyj536 > l
	} else {
		yyb536 = r.CheckBreak()
	}
	if yyb536 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EndpointsName = ""
	} else {
		x.EndpointsName = string(r.DecodeString())
	}
	yyj536++
	if yyhl536 {
		yyb536 = yyj536 > l
	} else {
		yyb536 = r.CheckBreak()
	}
	if yyb536 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj536++
	if yyhl536 {
		yyb536 = yyj536 > l
	} else {
		yyb536 = r.CheckBreak()
	}
	if yyb536 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj536++
		if yyhl536 {
			yyb536 = yyj536 > l
		} else {
			yyb536 = r.CheckBreak()
		}
		if yyb536 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj536-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x StorageMedium) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym540 := z.EncBinary()
	_ = yym540
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *StorageMedium) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym541 := z.DecBinary()
	_ = yym541
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *RBDVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym542 := z.EncBinary()
		_ = yym542
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep543 := !z.EncBinary()
			yy2arr543 := z.EncBasicHandle().StructToArray
			var yyq543 [8]bool
			_, _, _ = yysep543, yyq543, yy2arr543
			const yyr543 bool = false
			yyq543[2] = x.FSType != ""
			yyq543[7] = x.ReadOnly != false
			var yynn543 int
			if yyr543 || yy2arr543 {
				r.EncodeArrayStart(8)
			} else {
				yynn543 = 6
				for _, b := range yyq543 {
					if b {
						yynn543++
					}
				}
				r.EncodeMapStart(yynn543)
				yynn543 = 0
			}
			if yyr543 || yy2arr543 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym545 := z.EncBinary()
					_ = yym545
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym546 := z.EncBinary()
					_ = yym546
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			}
			if yyr543 || yy2arr543 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym548 := z.EncBinary()
				_ = yym548
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym549 := z.EncBinary()
				_ = yym549
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			}
			if yyr543 || yy2arr543 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq543[2] {
					yym551 := z.EncBinary()
					_ = yym551
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq543[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym552 := z.EncBinary()
					_ = yym552
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr543 || yy2arr543 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym554 := z.EncBinary()
				_ = yym554
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pool"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym555 := z.EncBinary()
				_ = yym555
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
				}
			}
			if yyr543 || yy2arr543 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym557 := z.EncBinary()
				_ = yym557
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("user"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym558 := z.EncBinary()
				_ = yym558
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
				}
			}
			if yyr543 || yy2arr543 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym560 := z.EncBinary()
				_ = yym560
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("keyring"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym561 := z.EncBinary()
				_ = yym561
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
				}
			}
			if yyr543 || yy2arr543 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.SecretRef == nil {
					r.EncodeNil()
				} else {
					x.SecretRef.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.SecretRef == nil {
					r.EncodeNil()
				} else {
					x.SecretRef.CodecEncodeSelf(e)
				}
			}
			if yyr543 || yy2arr543 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq543[7] {
					yym564 := z.EncBinary()
					_ = yym564
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq543[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym565 := z.EncBinary()
					_ = yym565
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr543 || yy2arr543 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RBDVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym566 := z.DecBinary()
	_ = yym566
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct567 := r.ContainerType()
		if yyct567 == codecSelferValueTypeMap1234 {
			yyl567 := r.ReadMapStart()
			if yyl567 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl567, d)
			}
		} else if yyct567 == codecSelferValueTypeArray1234 {
			yyl567 := r.ReadArrayStart()
			if yyl567 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl567, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys568Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys568Slc
	var yyhl568 bool = l >= 0
	for yyj568 := 0; ; yyj568++ {
		if yyhl568 {
			if yyj568 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys568Slc = r.DecodeBytes(yys568Slc, true, true)
		yys568 := string(yys568Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys568 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.CephMonitors = nil
			} else {
				yyv569 := &x.CephMonitors
				yym570 := z.DecBinary()
				_ = yym570
				if false {
				} else {
					z.F.DecSliceStringX(yyv569, false, d)
				}
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.RBDImage = ""
			} else {
				x.RBDImage = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "pool":
			if r.TryDecodeAsNil() {
				x.RBDPool = ""
			} else {
				x.RBDPool = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.RadosUser = ""
			} else {
				x.RadosUser = string(r.DecodeString())
			}
		case "keyring":
			if r.TryDecodeAsNil() {
				x.Keyring = ""
			} else {
				x.Keyring = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys568)
		} // end switch yys568
	} // end for yyj568
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RBDVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj578 int
	var yyb578 bool
	var yyhl578 bool = l >= 0
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CephMonitors = nil
	} else {
		yyv579 := &x.CephMonitors
		yym580 := z.DecBinary()
		_ = yym580
		if false {
		} else {
			z.F.DecSliceStringX(yyv579, false, d)
		}
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDImage = ""
	} else {
		x.RBDImage = string(r.DecodeString())
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDPool = ""
	} else {
		x.RBDPool = string(r.DecodeString())
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RadosUser = ""
	} else {
		x.RadosUser = string(r.DecodeString())
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Keyring = ""
	} else {
		x.Keyring = string(r.DecodeString())
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj578++
		if yyhl578 {
			yyb578 = yyj578 > l
		} else {
			yyb578 = r.CheckBreak()
		}
		if yyb578 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj578-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CinderVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym588 := z.EncBinary()
		_ = yym588
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep589 := !z.EncBinary()
			yy2arr589 := z.EncBasicHandle().StructToArray
			var yyq589 [3]bool
			_, _, _ = yysep589, yyq589, yy2arr589
			const yyr589 bool = false
			yyq589[1] = x.FSType != ""
			yyq589[2] = x.ReadOnly != false
			var yynn589 int
			if yyr589 || yy2arr589 {
				r.EncodeArrayStart(3)
			} else {
				yynn589 = 1
				for _, b := range yyq589 {
					if b {
						yynn589++
					}
				}
				r.EncodeMapStart(yynn589)
				yynn589 = 0
			}
			if yyr589 || yy2arr589 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym591 := z.EncBinary()
				_ = yym591
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym592 := z.EncBinary()
				_ = yym592
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr589 || yy2arr589 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq589[1] {
					yym594 := z.EncBinary()
					_ = yym594
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq589[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym595 := z.EncBinary()
					_ = yym595
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr589 || yy2arr589 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq589[2] {
					yym597 := z.EncBinary()
					_ = yym597
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq589[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym598 := z.EncBinary()
					_ = yym598
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr589 || yy2arr589 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CinderVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym599 := z.DecBinary()
	_ = yym599
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct600 := r.ContainerType()
		if yyct600 == codecSelferValueTypeMap1234 {
			yyl600 := r.ReadMapStart()
			if yyl600 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl600, d)
			}
		} else if yyct600 == codecSelferValueTypeArray1234 {
			yyl600 := r.ReadArrayStart()
			if yyl600 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl600, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys601Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys601Slc
	var yyhl601 bool = l >= 0
	for yyj601 := 0; ; yyj601++ {
		if yyhl601 {
			if yyj601 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys601Slc = r.DecodeBytes(yys601Slc, true, true)
		yys601 := string(yys601Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys601 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys601)
		} // end switch yys601
	} // end for yyj601
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CinderVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj605 int
	var yyb605 bool
	var yyhl605 bool = l >= 0
	yyj605++
	if yyhl605 {
		yyb605 = yyj605 > l
	} else {
		yyb605 = r.CheckBreak()
	}
	if yyb605 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj605++
	if yyhl605 {
		yyb605 = yyj605 > l
	} else {
		yyb605 = r.CheckBreak()
	}
	if yyb605 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj605++
	if yyhl605 {
		yyb605 = yyj605 > l
	} else {
		yyb605 = r.CheckBreak()
	}
	if yyb605 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj605++
		if yyhl605 {
			yyb605 = yyj605 > l
		} else {
			yyb605 = r.CheckBreak()
		}
		if yyb605 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj605-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CephFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym609 := z.EncBinary()
		_ = yym609
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep610 := !z.EncBinary()
			yy2arr610 := z.EncBasicHandle().StructToArray
			var yyq610 [5]bool
			_, _, _ = yysep610, yyq610, yy2arr610
			const yyr610 bool = false
			yyq610[1] = x.User != ""
			yyq610[2] = x.SecretFile != ""
			yyq610[3] = x.SecretRef != nil
			yyq610[4] = x.ReadOnly != false
			var yynn610 int
			if yyr610 || yy2arr610 {
				r.EncodeArrayStart(5)
			} else {
				yynn610 = 1
				for _, b := range yyq610 {
					if b {
						yynn610++
					}
				}
				r.EncodeMapStart(yynn610)
				yynn610 = 0
			}
			if yyr610 || yy2arr610 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym612 := z.EncBinary()
					_ = yym612
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym613 := z.EncBinary()
					_ = yym613
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			}
			if yyr610 || yy2arr610 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq610[1] {
					yym615 := z.EncBinary()
					_ = yym615
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq610[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym616 := z.EncBinary()
					_ = yym616
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr610 || yy2arr610 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq610[2] {
					yym618 := z.EncBinary()
					_ = yym618
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq610[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym619 := z.EncBinary()
					_ = yym619
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				}
			}
			if yyr610 || yy2arr610 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq610[3] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq610[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr610 || yy2arr610 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq610[4] {
					yym622 := z.EncBinary()
					_ = yym622
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq610[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym623 := z.EncBinary()
					_ = yym623
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr610 || yy2arr610 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CephFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym624 := z.DecBinary()
	_ = yym624
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct625 := r.ContainerType()
		if yyct625 == codecSelferValueTypeMap1234 {
			yyl625 := r.ReadMapStart()
			if yyl625 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl625, d)
			}
		} else if yyct625 == codecSelferValueTypeArray1234 {
			yyl625 := r.ReadArrayStart()
			if yyl625 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl625, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys626Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys626Slc
	var yyhl626 bool = l >= 0
	for yyj626 := 0; ; yyj626++ {
		if yyhl626 {
			if yyj626 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys626Slc = r.DecodeBytes(yys626Slc, true, true)
		yys626 := string(yys626Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys626 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.Monitors = nil
			} else {
				yyv627 := &x.Monitors
				yym628 := z.DecBinary()
				_ = yym628
				if false {
				} else {
					z.F.DecSliceStringX(yyv627, false, d)
				}
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "secretFile":
			if r.TryDecodeAsNil() {
				x.SecretFile = ""
			} else {
				x.SecretFile = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys626)
		} // end switch yys626
	} // end for yyj626
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CephFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj633 int
	var yyb633 bool
	var yyhl633 bool = l >= 0
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Monitors = nil
	} else {
		yyv634 := &x.Monitors
		yym635 := z.DecBinary()
		_ = yym635
		if false {
		} else {
			z.F.DecSliceStringX(yyv634, false, d)
		}
	}
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretFile = ""
	} else {
		x.SecretFile = string(r.DecodeString())
	}
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj633++
		if yyhl633 {
			yyb633 = yyj633 > l
		} else {
			yyb633 = r.CheckBreak()
		}
		if yyb633 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj633-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlockerVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym640 := z.EncBinary()
		_ = yym640
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep641 := !z.EncBinary()
			yy2arr641 := z.EncBasicHandle().StructToArray
			var yyq641 [1]bool
			_, _, _ = yysep641, yyq641, yy2arr641
			const yyr641 bool = false
			var yynn641 int
			if yyr641 || yy2arr641 {
				r.EncodeArrayStart(1)
			} else {
				yynn641 = 1
				for _, b := range yyq641 {
					if b {
						yynn641++
					}
				}
				r.EncodeMapStart(yynn641)
				yynn641 = 0
			}
			if yyr641 || yy2arr641 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym643 := z.EncBinary()
				_ = yym643
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("datasetName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym644 := z.EncBinary()
				_ = yym644
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			}
			if yyr641 || yy2arr641 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlockerVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym645 := z.DecBinary()
	_ = yym645
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct646 := r.ContainerType()
		if yyct646 == codecSelferValueTypeMap1234 {
			yyl646 := r.ReadMapStart()
			if yyl646 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl646, d)
			}
		} else if yyct646 == codecSelferValueTypeArray1234 {
			yyl646 := r.ReadArrayStart()
			if yyl646 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl646, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys647Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys647Slc
	var yyhl647 bool = l >= 0
	for yyj647 := 0; ; yyj647++ {
		if yyhl647 {
			if yyj647 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys647Slc = r.DecodeBytes(yys647Slc, true, true)
		yys647 := string(yys647Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys647 {
		case "datasetName":
			if r.TryDecodeAsNil() {
				x.DatasetName = ""
			} else {
				x.DatasetName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys647)
		} // end switch yys647
	} // end for yyj647
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlockerVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj649 int
	var yyb649 bool
	var yyhl649 bool = l >= 0
	yyj649++
	if yyhl649 {
		yyb649 = yyj649 > l
	} else {
		yyb649 = r.CheckBreak()
	}
	if yyb649 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DatasetName = ""
	} else {
		x.DatasetName = string(r.DecodeString())
	}
	for {
		yyj649++
		if yyhl649 {
			yyb649 = yyj649 > l
		} else {
			yyb649 = r.CheckBreak()
		}
		if yyb649 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj649-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x Protocol) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym651 := z.EncBinary()
	_ = yym651
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Protocol) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym652 := z.DecBinary()
	_ = yym652
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym653 := z.EncBinary()
		_ = yym653
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep654 := !z.EncBinary()
			yy2arr654 := z.EncBasicHandle().StructToArray
			var yyq654 [4]bool
			_, _, _ = yysep654, yyq654, yy2arr654
			const yyr654 bool = false
			yyq654[2] = x.Partition != 0
			yyq654[3] = x.ReadOnly != false
			var yynn654 int
			if yyr654 || yy2arr654 {
				r.EncodeArrayStart(4)
			} else {
				yynn654 = 2
				for _, b := range yyq654 {
					if b {
						yynn654++
					}
				}
				r.EncodeMapStart(yynn654)
				yynn654 = 0
			}
			if yyr654 || yy2arr654 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym656 := z.EncBinary()
				_ = yym656
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pdName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym657 := z.EncBinary()
				_ = yym657
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			}
			if yyr654 || yy2arr654 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym659 := z.EncBinary()
				_ = yym659
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fsType"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym660 := z.EncBinary()
				_ = yym660
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			}
			if yyr654 || yy2arr654 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq654[2] {
					yym662 := z.EncBinary()
					_ = yym662
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq654[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym663 := z.EncBinary()
					_ = yym663
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr654 || yy2arr654 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq654[3] {
					yym665 := z.EncBinary()
					_ = yym665
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq654[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym666 := z.EncBinary()
					_ = yym666
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr654 || yy2arr654 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym667 := z.DecBinary()
	_ = yym667
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct668 := r.ContainerType()
		if yyct668 == codecSelferValueTypeMap1234 {
			yyl668 := r.ReadMapStart()
			if yyl668 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl668, d)
			}
		} else if yyct668 == codecSelferValueTypeArray1234 {
			yyl668 := r.ReadArrayStart()
			if yyl668 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl668, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys669Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys669Slc
	var yyhl669 bool = l >= 0
	for yyj669 := 0; ; yyj669++ {
		if yyhl669 {
			if yyj669 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys669Slc = r.DecodeBytes(yys669Slc, true, true)
		yys669 := string(yys669Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys669 {
		case "pdName":
			if r.TryDecodeAsNil() {
				x.PDName = ""
			} else {
				x.PDName = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys669)
		} // end switch yys669
	} // end for yyj669
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj674 int
	var yyb674 bool
	var yyhl674 bool = l >= 0
	yyj674++
	if yyhl674 {
		yyb674 = yyj674 > l
	} else {
		yyb674 = r.CheckBreak()
	}
	if yyb674 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PDName = ""
	} else {
		x.PDName = string(r.DecodeString())
	}
	yyj674++
	if yyhl674 {
		yyb674 = yyj674 > l
	} else {
		yyb674 = r.CheckBreak()
	}
	if yyb674 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj674++
	if yyhl674 {
		yyb674 = yyj674 > l
	} else {
		yyb674 = r.CheckBreak()
	}
	if yyb674 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj674++
	if yyhl674 {
		yyb674 = yyj674 > l
	} else {
		yyb674 = r.CheckBreak()
	}
	if yyb674 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj674++
		if yyhl674 {
			yyb674 = yyj674 > l
		} else {
			yyb674 = r.CheckBreak()
		}
		if yyb674 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj674-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym679 := z.EncBinary()
		_ = yym679
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep680 := !z.EncBinary()
			yy2arr680 := z.EncBasicHandle().StructToArray
			var yyq680 [4]bool
			_, _, _ = yysep680, yyq680, yy2arr680
			const yyr680 bool = false
			yyq680[2] = x.Partition != 0
			yyq680[3] = x.ReadOnly != false
			var yynn680 int
			if yyr680 || yy2arr680 {
				r.EncodeArrayStart(4)
			} else {
				yynn680 = 2
				for _, b := range yyq680 {
					if b {
						yynn680++
					}
				}
				r.EncodeMapStart(yynn680)
				yynn680 = 0
			}
			if yyr680 || yy2arr680 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym682 := z.EncBinary()
				_ = yym682
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym683 := z.EncBinary()
				_ = yym683
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr680 || yy2arr680 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym685 := z.EncBinary()
				_ = yym685
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fsType"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym686 := z.EncBinary()
				_ = yym686
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			}
			if yyr680 || yy2arr680 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq680[2] {
					yym688 := z.EncBinary()
					_ = yym688
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq680[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym689 := z.EncBinary()
					_ = yym689
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr680 || yy2arr680 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq680[3] {
					yym691 := z.EncBinary()
					_ = yym691
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq680[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym692 := z.EncBinary()
					_ = yym692
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr680 || yy2arr680 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym693 := z.DecBinary()
	_ = yym693
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct694 := r.ContainerType()
		if yyct694 == codecSelferValueTypeMap1234 {
			yyl694 := r.ReadMapStart()
			if yyl694 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl694, d)
			}
		} else if yyct694 == codecSelferValueTypeArray1234 {
			yyl694 := r.ReadArrayStart()
			if yyl694 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl694, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys695Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys695Slc
	var yyhl695 bool = l >= 0
	for yyj695 := 0; ; yyj695++ {
		if yyhl695 {
			if yyj695 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys695Slc = r.DecodeBytes(yys695Slc, true, true)
		yys695 := string(yys695Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys695 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys695)
		} // end switch yys695
	} // end for yyj695
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj700 int
	var yyb700 bool
	var yyhl700 bool = l >= 0
	yyj700++
	if yyhl700 {
		yyb700 = yyj700 > l
	} else {
		yyb700 = r.CheckBreak()
	}
	if yyb700 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj700++
	if yyhl700 {
		yyb700 = yyj700 > l
	} else {
		yyb700 = r.CheckBreak()
	}
	if yyb700 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj700++
	if yyhl700 {
		yyb700 = yyj700 > l
	} else {
		yyb700 = r.CheckBreak()
	}
	if yyb700 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj700++
	if yyhl700 {
		yyb700 = yyj700 > l
	} else {
		yyb700 = r.CheckBreak()
	}
	if yyb700 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj700++
		if yyhl700 {
			yyb700 = yyj700 > l
		} else {
			yyb700 = r.CheckBreak()
		}
		if yyb700 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj700-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GitRepoVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym705 := z.EncBinary()
		_ = yym705
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep706 := !z.EncBinary()
			yy2arr706 := z.EncBasicHandle().StructToArray
			var yyq706 [3]bool
			_, _, _ = yysep706, yyq706, yy2arr706
			const yyr706 bool = false
			yyq706[1] = x.Revision != ""
			yyq706[2] = x.Directory != ""
			var yynn706 int
			if yyr706 || yy2arr706 {
				r.EncodeArrayStart(3)
			} else {
				yynn706 = 1
				for _, b := range yyq706 {
					if b {
						yynn706++
					}
				}
				r.EncodeMapStart(yynn706)
				yynn706 = 0
			}
			if yyr706 || yy2arr706 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym708 := z.EncBinary()
				_ = yym708
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("repository"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym709 := z.EncBinary()
				_ = yym709
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			}
			if yyr706 || yy2arr706 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq706[1] {
					yym711 := z.EncBinary()
					_ = yym711
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq706[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revision"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym712 := z.EncBinary()
					_ = yym712
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				}
			}
			if yyr706 || yy2arr706 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq706[2] {
					yym714 := z.EncBinary()
					_ = yym714
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq706[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("directory"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym715 := z.EncBinary()
					_ = yym715
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				}
			}
			if yyr706 || yy2arr706 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GitRepoVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym716 := z.DecBinary()
	_ = yym716
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct717 := r.ContainerType()
		if yyct717 == codecSelferValueTypeMap1234 {
			yyl717 := r.ReadMapStart()
			if yyl717 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl717, d)
			}
		} else if yyct717 == codecSelferValueTypeArray1234 {
			yyl717 := r.ReadArrayStart()
			if yyl717 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl717, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys718Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys718Slc
	var yyhl718 bool = l >= 0
	for yyj718 := 0; ; yyj718++ {
		if yyhl718 {
			if yyj718 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys718Slc = r.DecodeBytes(yys718Slc, true, true)
		yys718 := string(yys718Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys718 {
		case "repository":
			if r.TryDecodeAsNil() {
				x.Repository = ""
			} else {
				x.Repository = string(r.DecodeString())
			}
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = ""
			} else {
				x.Revision = string(r.DecodeString())
			}
		case "directory":
			if r.TryDecodeAsNil() {
				x.Directory = ""
			} else {
				x.Directory = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys718)
		} // end switch yys718
	} // end for yyj718
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj722 int
	var yyb722 bool
	var yyhl722 bool = l >= 0
	yyj722++
	if yyhl722 {
		yyb722 = yyj722 > l
	} else {
		yyb722 = r.CheckBreak()
	}
	if yyb722 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Repository = ""
	} else {
		x.Repository = string(r.DecodeString())
	}
	yyj722++
	if yyhl722 {
		yyb722 = yyj722 > l
	} else {
		yyb722 = r.CheckBreak()
	}
	if yyb722 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Revision = ""
	} else {
		x.Revision = string(r.DecodeString())
	}
	yyj722++
	if yyhl722 {
		yyb722 = yyj722 > l
	} else {
		yyb722 = r.CheckBreak()
	}
	if yyb722 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Directory = ""
	} else {
		x.Directory = string(r.DecodeString())
	}
	for {
		yyj722++
		if yyhl722 {
			yyb722 = yyj722 > l
		} else {
			yyb722 = r.CheckBreak()
		}
		if yyb722 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj722-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym726 := z.EncBinary()
		_ = yym726
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep727 := !z.EncBinary()
			yy2arr727 := z.EncBasicHandle().StructToArray
			var yyq727 [1]bool
			_, _, _ = yysep727, yyq727, yy2arr727
			const yyr727 bool = false
			var yynn727 int
			if yyr727 || yy2arr727 {
				r.EncodeArrayStart(1)
			} else {
				yynn727 = 1
				for _, b := range yyq727 {
					if b {
						yynn727++
					}
				}
				r.EncodeMapStart(yynn727)
				yynn727 = 0
			}
			if yyr727 || yy2arr727 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym729 := z.EncBinary()
				_ = yym729
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secretName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym730 := z.EncBinary()
				_ = yym730
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			}
			if yyr727 || yy2arr727 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym731 := z.DecBinary()
	_ = yym731
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct732 := r.ContainerType()
		if yyct732 == codecSelferValueTypeMap1234 {
			yyl732 := r.ReadMapStart()
			if yyl732 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl732, d)
			}
		} else if yyct732 == codecSelferValueTypeArray1234 {
			yyl732 := r.ReadArrayStart()
			if yyl732 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl732, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys733Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys733Slc
	var yyhl733 bool = l >= 0
	for yyj733 := 0; ; yyj733++ {
		if yyhl733 {
			if yyj733 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys733Slc = r.DecodeBytes(yys733Slc, true, true)
		yys733 := string(yys733Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys733 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys733)
		} // end switch yys733
	} // end for yyj733
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj735 int
	var yyb735 bool
	var yyhl735 bool = l >= 0
	yyj735++
	if yyhl735 {
		yyb735 = yyj735 > l
	} else {
		yyb735 = r.CheckBreak()
	}
	if yyb735 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	for {
		yyj735++
		if yyhl735 {
			yyb735 = yyj735 > l
		} else {
			yyb735 = r.CheckBreak()
		}
		if yyb735 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj735-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym737 := z.EncBinary()
		_ = yym737
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep738 := !z.EncBinary()
			yy2arr738 := z.EncBasicHandle().StructToArray
			var yyq738 [3]bool
			_, _, _ = yysep738, yyq738, yy2arr738
			const yyr738 bool = false
			yyq738[2] = x.ReadOnly != false
			var yynn738 int
			if yyr738 || yy2arr738 {
				r.EncodeArrayStart(3)
			} else {
				yynn738 = 2
				for _, b := range yyq738 {
					if b {
						yynn738++
					}
				}
				r.EncodeMapStart(yynn738)
				yynn738 = 0
			}
			if yyr738 || yy2arr738 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym740 := z.EncBinary()
				_ = yym740
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("server"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym741 := z.EncBinary()
				_ = yym741
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			}
			if yyr738 || yy2arr738 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym743 := z.EncBinary()
				_ = yym743
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym744 := z.EncBinary()
				_ = yym744
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr738 || yy2arr738 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq738[2] {
					yym746 := z.EncBinary()
					_ = yym746
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq738[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym747 := z.EncBinary()
					_ = yym747
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr738 || yy2arr738 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym748 := z.DecBinary()
	_ = yym748
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct749 := r.ContainerType()
		if yyct749 == codecSelferValueTypeMap1234 {
			yyl749 := r.ReadMapStart()
			if yyl749 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl749, d)
			}
		} else if yyct749 == codecSelferValueTypeArray1234 {
			yyl749 := r.ReadArrayStart()
			if yyl749 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl749, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys750Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys750Slc
	var yyhl750 bool = l >= 0
	for yyj750 := 0; ; yyj750++ {
		if yyhl750 {
			if yyj750 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys750Slc = r.DecodeBytes(yys750Slc, true, true)
		yys750 := string(yys750Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys750 {
		case "server":
			if r.TryDecodeAsNil() {
				x.Server = ""
			} else {
				x.Server = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys750)
		} // end switch yys750
	} // end for yyj750
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj754 int
	var yyb754 bool
	var yyhl754 bool = l >= 0
	yyj754++
	if yyhl754 {
		yyb754 = yyj754 > l
	} else {
		yyb754 = r.CheckBreak()
	}
	if yyb754 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Server = ""
	} else {
		x.Server = string(r.DecodeString())
	}
	yyj754++
	if yyhl754 {
		yyb754 = yyj754 > l
	} else {
		yyb754 = r.CheckBreak()
	}
	if yyb754 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj754++
	if yyhl754 {
		yyb754 = yyj754 > l
	} else {
		yyb754 = r.CheckBreak()
	}
	if yyb754 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj754++
		if yyhl754 {
			yyb754 = yyj754 > l
		} else {
			yyb754 = r.CheckBreak()
		}
		if yyb754 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj754-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ISCSIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym758 := z.EncBinary()
		_ = yym758
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep759 := !z.EncBinary()
			yy2arr759 := z.EncBasicHandle().StructToArray
			var yyq759 [6]bool
			_, _, _ = yysep759, yyq759, yy2arr759
			const yyr759 bool = false
			yyq759[3] = x.ISCSIInterface != ""
			yyq759[5] = x.ReadOnly != false
			var yynn759 int
			if yyr759 || yy2arr759 {
				r.EncodeArrayStart(6)
			} else {
				yynn759 = 4
				for _, b := range yyq759 {
					if b {
						yynn759++
					}
				}
				r.EncodeMapStart(yynn759)
				yynn759 = 0
			}
			if yyr759 || yy2arr759 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym761 := z.EncBinary()
				_ = yym761
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetPortal"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym762 := z.EncBinary()
				_ = yym762
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
				}
			}
			if yyr759 || yy2arr759 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym764 := z.EncBinary()
				_ = yym764
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("iqn"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym765 := z.EncBinary()
				_ = yym765
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
				}
			}
			if yyr759 || yy2arr759 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym767 := z.EncBinary()
				_ = yym767
				if false {
				} else {
					r.EncodeInt(int64(x.Lun))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym768 := z.EncBinary()
				_ = yym768
				if false {
				} else {
					r.EncodeInt(int64(x.Lun))
				}
			}
			if yyr759 || yy2arr759 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq759[3] {
					yym770 := z.EncBinary()
					_ = yym770
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq759[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsiInterface"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym771 := z.EncBinary()
					_ = yym771
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				}
			}
			if yyr759 || yy2arr759 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym773 := z.EncBinary()
				_ = yym773
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fsType"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym774 := z.EncBinary()
				_ = yym774
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			}
			if yyr759 || yy2arr759 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq759[5] {
					yym776 := z.EncBinary()
					_ = yym776
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq759[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym777 := z.EncBinary()
					_ = yym777
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr759 || yy2arr759 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ISCSIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym778 := z.DecBinary()
	_ = yym778
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct779 := r.ContainerType()
		if yyct779 == codecSelferValueTypeMap1234 {
			yyl779 := r.ReadMapStart()
			if yyl779 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl779, d)
			}
		} else if yyct779 == codecSelferValueTypeArray1234 {
			yyl779 := r.ReadArrayStart()
			if yyl779 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl779, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys780Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys780Slc
	var yyhl780 bool = l >= 0
	for yyj780 := 0; ; yyj780++ {
		if yyhl780 {
			if yyj780 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys780Slc = r.DecodeBytes(yys780Slc, true, true)
		yys780 := string(yys780Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys780 {
		case "targetPortal":
			if r.TryDecodeAsNil() {
				x.TargetPortal = ""
			} else {
				x.TargetPortal = string(r.DecodeString())
			}
		case "iqn":
			if r.TryDecodeAsNil() {
				x.IQN = ""
			} else {
				x.IQN = string(r.DecodeString())
			}
		case "lun":
			if r.TryDecodeAsNil() {
				x.Lun = 0
			} else {
				x.Lun = int32(r.DecodeInt(32))
			}
		case "iscsiInterface":
			if r.TryDecodeAsNil() {
				x.ISCSIInterface = ""
			} else {
				x.ISCSIInterface = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys780)
		} // end switch yys780
	} // end for yyj780
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj787 int
	var yyb787 bool
	var yyhl787 bool = l >= 0
	yyj787++
	if yyhl787 {
		yyb787 = yyj787 > l
	} else {
		yyb787 = r.CheckBreak()
	}
	if yyb787 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPortal = ""
	} else {
		x.TargetPortal = string(r.DecodeString())
	}
	yyj787++
	if yyhl787 {
		yyb787 = yyj787 > l
	} else {
		yyb787 = r.CheckBreak()
	}
	if yyb787 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IQN = ""
	} else {
		x.IQN = string(r.DecodeString())
	}
	yyj787++
	if yyhl787 {
		yyb787 = yyj787 > l
	} else {
		yyb787 = r.CheckBreak()
	}
	if yyb787 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Lun = 0
	} else {
		x.Lun = int32(r.DecodeInt(32))
	}
	yyj787++
	if yyhl787 {
		yyb787 = yyj787 > l
	} else {
		yyb787 = r.CheckBreak()
	}
	if yyb787 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ISCSIInterface = ""
	} else {
		x.ISCSIInterface = string(r.DecodeString())
	}
	yyj787++
	if yyhl787 {
		yyb787 = yyj787 > l
	} else {
		yyb787 = r.CheckBreak()
	}
	if yyb787 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj787++
	if yyhl787 {
		yyb787 = yyj787 > l
	} else {
		yyb787 = r.CheckBreak()
	}
	if yyb787 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj787++
		if yyhl787 {
			yyb787 = yyj787 > l
		} else {
			yyb787 = r.CheckBreak()
		}
		if yyb787 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj787-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FCVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym794 := z.EncBinary()
		_ = yym794
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep795 := !z.EncBinary()
			yy2arr795 := z.EncBasicHandle().StructToArray
			var yyq795 [4]bool
			_, _, _ = yysep795, yyq795, yy2arr795
			const yyr795 bool = false
			yyq795[3] = x.ReadOnly != false
			var yynn795 int
			if yyr795 || yy2arr795 {
				r.EncodeArrayStart(4)
			} else {
				yynn795 = 3
				for _, b := range yyq795 {
					if b {
						yynn795++
					}
				}
				r.EncodeMapStart(yynn795)
				yynn795 = 0
			}
			if yyr795 || yy2arr795 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym797 := z.EncBinary()
					_ = yym797
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetWWNs"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym798 := z.EncBinary()
					_ = yym798
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			}
			if yyr795 || yy2arr795 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy800 := *x.Lun
					yym801 := z.EncBinary()
					_ = yym801
					if false {
					} else {
						r.EncodeInt(int64(yy800))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy802 := *x.Lun
					yym803 := z.EncBinary()
					_ = yym803
					if false {
					} else {
						r.EncodeInt(int64(yy802))
					}
				}
			}
			if yyr795 || yy2arr795 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym805 := z.EncBinary()
				_ = yym805
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fsType"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym806 := z.EncBinary()
				_ = yym806
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			}
			if yyr795 || yy2arr795 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq795[3] {
					yym808 := z.EncBinary()
					_ = yym808
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq795[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym809 := z.EncBinary()
					_ = yym809
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr795 || yy2arr795 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FCVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym810 := z.DecBinary()
	_ = yym810
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct811 := r.ContainerType()
		if yyct811 == codecSelferValueTypeMap1234 {
			yyl811 := r.ReadMapStart()
			if yyl811 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl811, d)
			}
		} else if yyct811 == codecSelferValueTypeArray1234 {
			yyl811 := r.ReadArrayStart()
			if yyl811 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl811, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys812Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys812Slc
	var yyhl812 bool = l >= 0
	for yyj812 := 0; ; yyj812++ {
		if yyhl812 {
			if yyj812 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys812Slc = r.DecodeBytes(yys812Slc, true, true)
		yys812 := string(yys812Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys812 {
		case "targetWWNs":
			if r.TryDecodeAsNil() {
				x.TargetWWNs = nil
			} else {
				yyv813 := &x.TargetWWNs
				yym814 := z.DecBinary()
				_ = yym814
				if false {
				} else {
					z.F.DecSliceStringX(yyv813, false, d)
				}
			}
		case "lun":
			if r.TryDecodeAsNil() {
				if x.Lun != nil {
					x.Lun = nil
				}
			} else {
				if x.Lun == nil {
					x.Lun = new(int32)
				}
				yym816 := z.DecBinary()
				_ = yym816
				if false {
				} else {
					*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
				}
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys812)
		} // end switch yys812
	} // end for yyj812
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FCVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj819 int
	var yyb819 bool
	var yyhl819 bool = l >= 0
	yyj819++
	if yyhl819 {
		yyb819 = yyj819 > l
	} else {
		yyb819 = r.CheckBreak()
	}
	if yyb819 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetWWNs = nil
	} else {
		yyv820 := &x.TargetWWNs
		yym821 := z.DecBinary()
		_ = yym821
		if false {
		} else {
			z.F.DecSliceStringX(yyv820, false, d)
		}
	}
	yyj819++
	if yyhl819 {
		yyb819 = yyj819 > l
	} else {
		yyb819 = r.CheckBreak()
	}
	if yyb819 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lun != nil {
			x.Lun = nil
		}
	} else {
		if x.Lun == nil {
			x.Lun = new(int32)
		}
		yym823 := z.DecBinary()
		_ = yym823
		if false {
		} else {
			*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
		}
	}
	yyj819++
	if yyhl819 {
		yyb819 = yyj819 > l
	} else {
		yyb819 = r.CheckBreak()
	}
	if yyb819 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj819++
	if yyhl819 {
		yyb819 = yyj819 > l
	} else {
		yyb819 = r.CheckBreak()
	}
	if yyb819 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj819++
		if yyhl819 {
			yyb819 = yyj819 > l
		} else {
			yyb819 = r.CheckBreak()
		}
		if yyb819 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj819-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym826 := z.EncBinary()
		_ = yym826
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep827 := !z.EncBinary()
			yy2arr827 := z.EncBasicHandle().StructToArray
			var yyq827 [5]bool
			_, _, _ = yysep827, yyq827, yy2arr827
			const yyr827 bool = false
			yyq827[0] = x.Name != ""
			yyq827[1] = x.HostPort != 0
			yyq827[3] = x.Protocol != ""
			yyq827[4] = x.HostIP != ""
			var yynn827 int
			if yyr827 || yy2arr827 {
				r.EncodeArrayStart(5)
			} else {
				yynn827 = 1
				for _, b := range yyq827 {
					if b {
						yynn827++
					}
				}
				r.EncodeMapStart(yynn827)
				yynn827 = 0
			}
			if yyr827 || yy2arr827 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq827[0] {
					yym829 := z.EncBinary()
					_ = yym829
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq827[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym830 := z.EncBinary()
					_ = yym830
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr827 || yy2arr827 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq827[1] {
					yym832 := z.EncBinary()
					_ = yym832
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq827[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym833 := z.EncBinary()
					_ = yym833
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				}
			}
			if yyr827 || yy2arr827 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym835 := z.EncBinary()
				_ = yym835
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym836 := z.EncBinary()
				_ = yym836
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			}
			if yyr827 || yy2arr827 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq827[3] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq827[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr827 || yy2arr827 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq827[4] {
					yym839 := z.EncBinary()
					_ = yym839
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq827[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym840 := z.EncBinary()
					_ = yym840
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr827 || yy2arr827 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym841 := z.DecBinary()
	_ = yym841
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct842 := r.ContainerType()
		if yyct842 == codecSelferValueTypeMap1234 {
			yyl842 := r.ReadMapStart()
			if yyl842 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl842, d)
			}
		} else if yyct842 == codecSelferValueTypeArray1234 {
			yyl842 := r.ReadArrayStart()
			if yyl842 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl842, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys843Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys843Slc
	var yyhl843 bool = l >= 0
	for yyj843 := 0; ; yyj843++ {
		if yyhl843 {
			if yyj843 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys843Slc = r.DecodeBytes(yys843Slc, true, true)
		yys843 := string(yys843Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys843 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPort":
			if r.TryDecodeAsNil() {
				x.HostPort = 0
			} else {
				x.HostPort = int32(r.DecodeInt(32))
			}
		case "containerPort":
			if r.TryDecodeAsNil() {
				x.ContainerPort = 0
			} else {
				x.ContainerPort = int32(r.DecodeInt(32))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys843)
		} // end switch yys843
	} // end for yyj843
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj849 int
	var yyb849 bool
	var yyhl849 bool = l >= 0
	yyj849++
	if yyhl849 {
		yyb849 = yyj849 > l
	} else {
		yyb849 = r.CheckBreak()
	}
	if yyb849 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj849++
	if yyhl849 {
		yyb849 = yyj849 > l
	} else {
		yyb849 = r.CheckBreak()
	}
	if yyb849 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPort = 0
	} else {
		x.HostPort = int32(r.DecodeInt(32))
	}
	yyj849++
	if yyhl849 {
		yyb849 = yyj849 > l
	} else {
		yyb849 = r.CheckBreak()
	}
	if yyb849 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerPort = 0
	} else {
		x.ContainerPort = int32(r.DecodeInt(32))
	}
	yyj849++
	if yyhl849 {
		yyb849 = yyj849 > l
	} else {
		yyb849 = r.CheckBreak()
	}
	if yyb849 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj849++
	if yyhl849 {
		yyb849 = yyj849 > l
	} else {
		yyb849 = r.CheckBreak()
	}
	if yyb849 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	for {
		yyj849++
		if yyhl849 {
			yyb849 = yyj849 > l
		} else {
			yyb849 = r.CheckBreak()
		}
		if yyb849 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj849-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeMount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym855 := z.EncBinary()
		_ = yym855
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep856 := !z.EncBinary()
			yy2arr856 := z.EncBasicHandle().StructToArray
			var yyq856 [3]bool
			_, _, _ = yysep856, yyq856, yy2arr856
			const yyr856 bool = false
			yyq856[1] = x.ReadOnly != false
			var yynn856 int
			if yyr856 || yy2arr856 {
				r.EncodeArrayStart(3)
			} else {
				yynn856 = 2
				for _, b := range yyq856 {
					if b {
						yynn856++
					}
				}
				r.EncodeMapStart(yynn856)
				yynn856 = 0
			}
			if yyr856 || yy2arr856 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym858 := z.EncBinary()
				_ = yym858
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym859 := z.EncBinary()
				_ = yym859
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr856 || yy2arr856 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq856[1] {
					yym861 := z.EncBinary()
					_ = yym861
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq856[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym862 := z.EncBinary()
					_ = yym862
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr856 || yy2arr856 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym864 := z.EncBinary()
				_ = yym864
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("mountPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym865 := z.EncBinary()
				_ = yym865
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			}
			if yyr856 || yy2arr856 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeMount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym866 := z.DecBinary()
	_ = yym866
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct867 := r.ContainerType()
		if yyct867 == codecSelferValueTypeMap1234 {
			yyl867 := r.ReadMapStart()
			if yyl867 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl867, d)
			}
		} else if yyct867 == codecSelferValueTypeArray1234 {
			yyl867 := r.ReadArrayStart()
			if yyl867 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl867, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeMount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys868Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys868Slc
	var yyhl868 bool = l >= 0
	for yyj868 := 0; ; yyj868++ {
		if yyhl868 {
			if yyj868 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys868Slc = r.DecodeBytes(yys868Slc, true, true)
		yys868 := string(yys868Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys868 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "mountPath":
			if r.TryDecodeAsNil() {
				x.MountPath = ""
			} else {
				x.MountPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys868)
		} // end switch yys868
	} // end for yyj868
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeMount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj872 int
	var yyb872 bool
	var yyhl872 bool = l >= 0
	yyj872++
	if yyhl872 {
		yyb872 = yyj872 > l
	} else {
		yyb872 = r.CheckBreak()
	}
	if yyb872 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj872++
	if yyhl872 {
		yyb872 = yyj872 > l
	} else {
		yyb872 = r.CheckBreak()
	}
	if yyb872 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj872++
	if yyhl872 {
		yyb872 = yyj872 > l
	} else {
		yyb872 = r.CheckBreak()
	}
	if yyb872 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MountPath = ""
	} else {
		x.MountPath = string(r.DecodeString())
	}
	for {
		yyj872++
		if yyhl872 {
			yyb872 = yyj872 > l
		} else {
			yyb872 = r.CheckBreak()
		}
		if yyb872 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj872-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVar) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym876 := z.EncBinary()
		_ = yym876
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep877 := !z.EncBinary()
			yy2arr877 := z.EncBasicHandle().StructToArray
			var yyq877 [3]bool
			_, _, _ = yysep877, yyq877, yy2arr877
			const yyr877 bool = false
			yyq877[1] = x.Value != ""
			yyq877[2] = x.ValueFrom != nil
			var yynn877 int
			if yyr877 || yy2arr877 {
				r.EncodeArrayStart(3)
			} else {
				yynn877 = 1
				for _, b := range yyq877 {
					if b {
						yynn877++
					}
				}
				r.EncodeMapStart(yynn877)
				yynn877 = 0
			}
			if yyr877 || yy2arr877 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym879 := z.EncBinary()
				_ = yym879
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym880 := z.EncBinary()
				_ = yym880
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr877 || yy2arr877 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq877[1] {
					yym882 := z.EncBinary()
					_ = yym882
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq877[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym883 := z.EncBinary()
					_ = yym883
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr877 || yy2arr877 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq877[2] {
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq877[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("valueFrom"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				}
			}
			if yyr877 || yy2arr877 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVar) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym885 := z.DecBinary()
	_ = yym885
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct886 := r.ContainerType()
		if yyct886 == codecSelferValueTypeMap1234 {
			yyl886 := r.ReadMapStart()
			if yyl886 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl886, d)
			}
		} else if yyct886 == codecSelferValueTypeArray1234 {
			yyl886 := r.ReadArrayStart()
			if yyl886 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl886, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVar) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys887Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys887Slc
	var yyhl887 bool = l >= 0
	for yyj887 := 0; ; yyj887++ {
		if yyhl887 {
			if yyj887 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys887Slc = r.DecodeBytes(yys887Slc, true, true)
		yys887 := string(yys887Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys887 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "valueFrom":
			if r.TryDecodeAsNil() {
				if x.ValueFrom != nil {
					x.ValueFrom = nil
				}
			} else {
				if x.ValueFrom == nil {
					x.ValueFrom = new(EnvVarSource)
				}
				x.ValueFrom.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys887)
		} // end switch yys887
	} // end for yyj887
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVar) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj891 int
	var yyb891 bool
	var yyhl891 bool = l >= 0
	yyj891++
	if yyhl891 {
		yyb891 = yyj891 > l
	} else {
		yyb891 = r.CheckBreak()
	}
	if yyb891 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj891++
	if yyhl891 {
		yyb891 = yyj891 > l
	} else {
		yyb891 = r.CheckBreak()
	}
	if yyb891 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj891++
	if yyhl891 {
		yyb891 = yyj891 > l
	} else {
		yyb891 = r.CheckBreak()
	}
	if yyb891 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ValueFrom != nil {
			x.ValueFrom = nil
		}
	} else {
		if x.ValueFrom == nil {
			x.ValueFrom = new(EnvVarSource)
		}
		x.ValueFrom.CodecDecodeSelf(d)
	}
	for {
		yyj891++
		if yyhl891 {
			yyb891 = yyj891 > l
		} else {
			yyb891 = r.CheckBreak()
		}
		if yyb891 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj891-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVarSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym895 := z.EncBinary()
		_ = yym895
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep896 := !z.EncBinary()
			yy2arr896 := z.EncBasicHandle().StructToArray
			var yyq896 [1]bool
			_, _, _ = yysep896, yyq896, yy2arr896
			const yyr896 bool = false
			var yynn896 int
			if yyr896 || yy2arr896 {
				r.EncodeArrayStart(1)
			} else {
				yynn896 = 1
				for _, b := range yyq896 {
					if b {
						yynn896++
					}
				}
				r.EncodeMapStart(yynn896)
				yynn896 = 0
			}
			if yyr896 || yy2arr896 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.FieldRef == nil {
					r.EncodeNil()
				} else {
					x.FieldRef.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.FieldRef == nil {
					r.EncodeNil()
				} else {
					x.FieldRef.CodecEncodeSelf(e)
				}
			}
			if yyr896 || yy2arr896 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVarSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym898 := z.DecBinary()
	_ = yym898
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct899 := r.ContainerType()
		if yyct899 == codecSelferValueTypeMap1234 {
			yyl899 := r.ReadMapStart()
			if yyl899 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl899, d)
			}
		} else if yyct899 == codecSelferValueTypeArray1234 {
			yyl899 := r.ReadArrayStart()
			if yyl899 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl899, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVarSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys900Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys900Slc
	var yyhl900 bool = l >= 0
	for yyj900 := 0; ; yyj900++ {
		if yyhl900 {
			if yyj900 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys900Slc = r.DecodeBytes(yys900Slc, true, true)
		yys900 := string(yys900Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys900 {
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys900)
		} // end switch yys900
	} // end for yyj900
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVarSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj902 int
	var yyb902 bool
	var yyhl902 bool = l >= 0
	yyj902++
	if yyhl902 {
		yyb902 = yyj902 > l
	} else {
		yyb902 = r.CheckBreak()
	}
	if yyb902 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	for {
		yyj902++
		if yyhl902 {
			yyb902 = yyj902 > l
		} else {
			yyb902 = r.CheckBreak()
		}
		if yyb902 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj902-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym904 := z.EncBinary()
		_ = yym904
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep905 := !z.EncBinary()
			yy2arr905 := z.EncBasicHandle().StructToArray
			var yyq905 [2]bool
			_, _, _ = yysep905, yyq905, yy2arr905
			const yyr905 bool = false
			yyq905[0] = x.APIVersion != ""
			var yynn905 int
			if yyr905 || yy2arr905 {
				r.EncodeArrayStart(2)
			} else {
				yynn905 = 1
				for _, b := range yyq905 {
					if b {
						yynn905++
					}
				}
				r.EncodeMapStart(yynn905)
				yynn905 = 0
			}
			if yyr905 || yy2arr905 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq905[0] {
					yym907 := z.EncBinary()
					_ = yym907
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq905[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym908 := z.EncBinary()
					_ = yym908
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr905 || yy2arr905 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym910 := z.EncBinary()
				_ = yym910
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym911 := z.EncBinary()
				_ = yym911
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			}
			if yyr905 || yy2arr905 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym912 := z.DecBinary()
	_ = yym912
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct913 := r.ContainerType()
		if yyct913 == codecSelferValueTypeMap1234 {
			yyl913 := r.ReadMapStart()
			if yyl913 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl913, d)
			}
		} else if yyct913 == codecSelferValueTypeArray1234 {
			yyl913 := r.ReadArrayStart()
			if yyl913 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl913, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys914Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys914Slc
	var yyhl914 bool = l >= 0
	for yyj914 := 0; ; yyj914++ {
		if yyhl914 {
			if yyj914 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys914Slc = r.DecodeBytes(yys914Slc, true, true)
		yys914 := string(yys914Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys914 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys914)
		} // end switch yys914
	} // end for yyj914
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj917 int
	var yyb917 bool
	var yyhl917 bool = l >= 0
	yyj917++
	if yyhl917 {
		yyb917 = yyj917 > l
	} else {
		yyb917 = r.CheckBreak()
	}
	if yyb917 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj917++
	if yyhl917 {
		yyb917 = yyj917 > l
	} else {
		yyb917 = r.CheckBreak()
	}
	if yyb917 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj917++
		if yyhl917 {
			yyb917 = yyj917 > l
		} else {
			yyb917 = r.CheckBreak()
		}
		if yyb917 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj917-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPGetAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym920 := z.EncBinary()
		_ = yym920
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep921 := !z.EncBinary()
			yy2arr921 := z.EncBasicHandle().StructToArray
			var yyq921 [4]bool
			_, _, _ = yysep921, yyq921, yy2arr921
			const yyr921 bool = false
			yyq921[0] = x.Path != ""
			yyq921[2] = x.Host != ""
			yyq921[3] = x.Scheme != ""
			var yynn921 int
			if yyr921 || yy2arr921 {
				r.EncodeArrayStart(4)
			} else {
				yynn921 = 1
				for _, b := range yyq921 {
					if b {
						yynn921++
					}
				}
				r.EncodeMapStart(yynn921)
				yynn921 = 0
			}
			if yyr921 || yy2arr921 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq921[0] {
					yym923 := z.EncBinary()
					_ = yym923
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq921[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym924 := z.EncBinary()
					_ = yym924
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr921 || yy2arr921 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy926 := &x.Port
				yym927 := z.EncBinary()
				_ = yym927
				if false {
				} else if z.HasExtensions() && z.EncExt(yy926) {
				} else if !yym927 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy926)
				} else {
					z.EncFallback(yy926)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy928 := &x.Port
				yym929 := z.EncBinary()
				_ = yym929
				if false {
				} else if z.HasExtensions() && z.EncExt(yy928) {
				} else if !yym929 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy928)
				} else {
					z.EncFallback(yy928)
				}
			}
			if yyr921 || yy2arr921 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq921[2] {
					yym931 := z.EncBinary()
					_ = yym931
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq921[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym932 := z.EncBinary()
					_ = yym932
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr921 || yy2arr921 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq921[3] {
					x.Scheme.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq921[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scheme"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Scheme.CodecEncodeSelf(e)
				}
			}
			if yyr921 || yy2arr921 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPGetAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym934 := z.DecBinary()
	_ = yym934
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct935 := r.ContainerType()
		if yyct935 == codecSelferValueTypeMap1234 {
			yyl935 := r.ReadMapStart()
			if yyl935 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl935, d)
			}
		} else if yyct935 == codecSelferValueTypeArray1234 {
			yyl935 := r.ReadArrayStart()
			if yyl935 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl935, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys936Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys936Slc
	var yyhl936 bool = l >= 0
	for yyj936 := 0; ; yyj936++ {
		if yyhl936 {
			if yyj936 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys936Slc = r.DecodeBytes(yys936Slc, true, true)
		yys936 := string(yys936Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys936 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg5_intstr.IntOrString{}
			} else {
				yyv938 := &x.Port
				yym939 := z.DecBinary()
				_ = yym939
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv938) {
				} else if !yym939 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv938)
				} else {
					z.DecFallback(yyv938, false)
				}
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "scheme":
			if r.TryDecodeAsNil() {
				x.Scheme = ""
			} else {
				x.Scheme = URIScheme(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys936)
		} // end switch yys936
	} // end for yyj936
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPGetAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj942 int
	var yyb942 bool
	var yyhl942 bool = l >= 0
	yyj942++
	if yyhl942 {
		yyb942 = yyj942 > l
	} else {
		yyb942 = r.CheckBreak()
	}
	if yyb942 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj942++
	if yyhl942 {
		yyb942 = yyj942 > l
	} else {
		yyb942 = r.CheckBreak()
	}
	if yyb942 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg5_intstr.IntOrString{}
	} else {
		yyv944 := &x.Port
		yym945 := z.DecBinary()
		_ = yym945
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv944) {
		} else if !yym945 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv944)
		} else {
			z.DecFallback(yyv944, false)
		}
	}
	yyj942++
	if yyhl942 {
		yyb942 = yyj942 > l
	} else {
		yyb942 = r.CheckBreak()
	}
	if yyb942 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj942++
	if yyhl942 {
		yyb942 = yyj942 > l
	} else {
		yyb942 = r.CheckBreak()
	}
	if yyb942 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scheme = ""
	} else {
		x.Scheme = URIScheme(r.DecodeString())
	}
	for {
		yyj942++
		if yyhl942 {
			yyb942 = yyj942 > l
		} else {
			yyb942 = r.CheckBreak()
		}
		if yyb942 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj942-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x URIScheme) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym948 := z.EncBinary()
	_ = yym948
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *URIScheme) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym949 := z.DecBinary()
	_ = yym949
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *TCPSocketAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym950 := z.EncBinary()
		_ = yym950
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep951 := !z.EncBinary()
			yy2arr951 := z.EncBasicHandle().StructToArray
			var yyq951 [1]bool
			_, _, _ = yysep951, yyq951, yy2arr951
			const yyr951 bool = false
			var yynn951 int
			if yyr951 || yy2arr951 {
				r.EncodeArrayStart(1)
			} else {
				yynn951 = 1
				for _, b := range yyq951 {
					if b {
						yynn951++
					}
				}
				r.EncodeMapStart(yynn951)
				yynn951 = 0
			}
			if yyr951 || yy2arr951 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy953 := &x.Port
				yym954 := z.EncBinary()
				_ = yym954
				if false {
				} else if z.HasExtensions() && z.EncExt(yy953) {
				} else if !yym954 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy953)
				} else {
					z.EncFallback(yy953)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy955 := &x.Port
				yym956 := z.EncBinary()
				_ = yym956
				if false {
				} else if z.HasExtensions() && z.EncExt(yy955) {
				} else if !yym956 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy955)
				} else {
					z.EncFallback(yy955)
				}
			}
			if yyr951 || yy2arr951 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *TCPSocketAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym957 := z.DecBinary()
	_ = yym957
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct958 := r.ContainerType()
		if yyct958 == codecSelferValueTypeMap1234 {
			yyl958 := r.ReadMapStart()
			if yyl958 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl958, d)
			}
		} else if yyct958 == codecSelferValueTypeArray1234 {
			yyl958 := r.ReadArrayStart()
			if yyl958 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl958, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys959Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys959Slc
	var yyhl959 bool = l >= 0
	for yyj959 := 0; ; yyj959++ {
		if yyhl959 {
			if yyj959 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys959Slc = r.DecodeBytes(yys959Slc, true, true)
		yys959 := string(yys959Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys959 {
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg5_intstr.IntOrString{}
			} else {
				yyv960 := &x.Port
				yym961 := z.DecBinary()
				_ = yym961
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv960) {
				} else if !yym961 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv960)
				} else {
					z.DecFallback(yyv960, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys959)
		} // end switch yys959
	} // end for yyj959
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *TCPSocketAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj962 int
	var yyb962 bool
	var yyhl962 bool = l >= 0
	yyj962++
	if yyhl962 {
		yyb962 = yyj962 > l
	} else {
		yyb962 = r.CheckBreak()
	}
	if yyb962 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg5_intstr.IntOrString{}
	} else {
		yyv963 := &x.Port
		yym964 := z.DecBinary()
		_ = yym964
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv963) {
		} else if !yym964 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv963)
		} else {
			z.DecFallback(yyv963, false)
		}
	}
	for {
		yyj962++
		if yyhl962 {
			yyb962 = yyj962 > l
		} else {
			yyb962 = r.CheckBreak()
		}
		if yyb962 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj962-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExecAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym965 := z.EncBinary()
		_ = yym965
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep966 := !z.EncBinary()
			yy2arr966 := z.EncBasicHandle().StructToArray
			var yyq966 [1]bool
			_, _, _ = yysep966, yyq966, yy2arr966
			const yyr966 bool = false
			yyq966[0] = len(x.Command) != 0
			var yynn966 int
			if yyr966 || yy2arr966 {
				r.EncodeArrayStart(1)
			} else {
				yynn966 = 0
				for _, b := range yyq966 {
					if b {
						yynn966++
					}
				}
				r.EncodeMapStart(yynn966)
				yynn966 = 0
			}
			if yyr966 || yy2arr966 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq966[0] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym968 := z.EncBinary()
						_ = yym968
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq966[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym969 := z.EncBinary()
						_ = yym969
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr966 || yy2arr966 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExecAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym970 := z.DecBinary()
	_ = yym970
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct971 := r.ContainerType()
		if yyct971 == codecSelferValueTypeMap1234 {
			yyl971 := r.ReadMapStart()
			if yyl971 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl971, d)
			}
		} else if yyct971 == codecSelferValueTypeArray1234 {
			yyl971 := r.ReadArrayStart()
			if yyl971 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl971, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExecAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys972Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys972Slc
	var yyhl972 bool = l >= 0
	for yyj972 := 0; ; yyj972++ {
		if yyhl972 {
			if yyj972 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys972Slc = r.DecodeBytes(yys972Slc, true, true)
		yys972 := string(yys972Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys972 {
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv973 := &x.Command
				yym974 := z.DecBinary()
				_ = yym974
				if false {
				} else {
					z.F.DecSliceStringX(yyv973, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys972)
		} // end switch yys972
	} // end for yyj972
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExecAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj975 int
	var yyb975 bool
	var yyhl975 bool = l >= 0
	yyj975++
	if yyhl975 {
		yyb975 = yyj975 > l
	} else {
		yyb975 = r.CheckBreak()
	}
	if yyb975 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv976 := &x.Command
		yym977 := z.DecBinary()
		_ = yym977
		if false {
		} else {
			z.F.DecSliceStringX(yyv976, false, d)
		}
	}
	for {
		yyj975++
		if yyhl975 {
			yyb975 = yyj975 > l
		} else {
			yyb975 = r.CheckBreak()
		}
		if yyb975 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj975-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Probe) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym978 := z.EncBinary()
		_ = yym978
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep979 := !z.EncBinary()
			yy2arr979 := z.EncBasicHandle().StructToArray
			var yyq979 [8]bool
			_, _, _ = yysep979, yyq979, yy2arr979
			const yyr979 bool = false
			yyq979[0] = x.Handler.Exec != nil && x.Exec != nil
			yyq979[1] = x.Handler.HTTPGet != nil && x.HTTPGet != nil
			yyq979[2] = x.Handler.TCPSocket != nil && x.TCPSocket != nil
			yyq979[3] = x.InitialDelaySeconds != 0
			yyq979[4] = x.TimeoutSeconds != 0
			yyq979[5] = x.PeriodSeconds != 0
			yyq979[6] = x.SuccessThreshold != 0
			yyq979[7] = x.FailureThreshold != 0
			var yynn979 int
			if yyr979 || yy2arr979 {
				r.EncodeArrayStart(8)
			} else {
				yynn979 = 0
				for _, b := range yyq979 {
					if b {
						yynn979++
					}
				}
				r.EncodeMapStart(yynn979)
				yynn979 = 0
			}
			var yyn980 bool
			if x.Handler.Exec == nil {
				yyn980 = true
				goto LABEL980
			}
		LABEL980:
			if yyr979 || yy2arr979 {
				if yyn980 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq979[0] {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq979[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn980 {
						r.EncodeNil()
					} else {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn981 bool
			if x.Handler.HTTPGet == nil {
				yyn981 = true
				goto LABEL981
			}
		LABEL981:
			if yyr979 || yy2arr979 {
				if yyn981 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq979[1] {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq979[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn981 {
						r.EncodeNil()
					} else {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn982 bool
			if x.Handler.TCPSocket == nil {
				yyn982 = true
				goto LABEL982
			}
		LABEL982:
			if yyr979 || yy2arr979 {
				if yyn982 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq979[2] {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq979[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn982 {
						r.EncodeNil()
					} else {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr979 || yy2arr979 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq979[3] {
					yym984 := z.EncBinary()
					_ = yym984
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq979[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("initialDelaySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym985 := z.EncBinary()
					_ = yym985
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				}
			}
			if yyr979 || yy2arr979 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq979[4] {
					yym987 := z.EncBinary()
					_ = yym987
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq979[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym988 := z.EncBinary()
					_ = yym988
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				}
			}
			if yyr979 || yy2arr979 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq979[5] {
					yym990 := z.EncBinary()
					_ = yym990
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq979[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("periodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym991 := z.EncBinary()
					_ = yym991
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				}
			}
			if yyr979 || yy2arr979 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq979[6] {
					yym993 := z.EncBinary()
					_ = yym993
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq979[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("successThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym994 := z.EncBinary()
					_ = yym994
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				}
			}
			if yyr979 || yy2arr979 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq979[7] {
					yym996 := z.EncBinary()
					_ = yym996
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq979[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("failureThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym997 := z.EncBinary()
					_ = yym997
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				}
			}
			if yyr979 || yy2arr979 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Probe) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym998 := z.DecBinary()
	_ = yym998
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct999 := r.ContainerType()
		if yyct999 == codecSelferValueTypeMap1234 {
			yyl999 := r.ReadMapStart()
			if yyl999 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl999, d)
			}
		} else if yyct999 == codecSelferValueTypeArray1234 {
			yyl999 := r.ReadArrayStart()
			if yyl999 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl999, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Probe) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1000Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1000Slc
	var yyhl1000 bool = l >= 0
	for yyj1000 := 0; ; yyj1000++ {
		if yyhl1000 {
			if yyj1000 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1000Slc = r.DecodeBytes(yys1000Slc, true, true)
		yys1000 := string(yys1000Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1000 {
		case "exec":
			if x.Handler.Exec == nil {
				x.Handler.Exec = new(ExecAction)
			}
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if x.Handler.HTTPGet == nil {
				x.Handler.HTTPGet = new(HTTPGetAction)
			}
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if x.Handler.TCPSocket == nil {
				x.Handler.TCPSocket = new(TCPSocketAction)
			}
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		case "initialDelaySeconds":
			if r.TryDecodeAsNil() {
				x.InitialDelaySeconds = 0
			} else {
				x.InitialDelaySeconds = int32(r.DecodeInt(32))
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				x.TimeoutSeconds = 0
			} else {
				x.TimeoutSeconds = int32(r.DecodeInt(32))
			}
		case "periodSeconds":
			if r.TryDecodeAsNil() {
				x.PeriodSeconds = 0
			} else {
				x.PeriodSeconds = int32(r.DecodeInt(32))
			}
		case "successThreshold":
			if r.TryDecodeAsNil() {
				x.SuccessThreshold = 0
			} else {
				x.SuccessThreshold = int32(r.DecodeInt(32))
			}
		case "failureThreshold":
			if r.TryDecodeAsNil() {
				x.FailureThreshold = 0
			} else {
				x.FailureThreshold = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1000)
		} // end switch yys1000
	} // end for yyj1000
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Probe) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1009 int
	var yyb1009 bool
	var yyhl1009 bool = l >= 0
	if x.Handler.Exec == nil {
		x.Handler.Exec = new(ExecAction)
	}
	yyj1009++
	if yyhl1009 {
		yyb1009 = yyj1009 > l
	} else {
		yyb1009 = r.CheckBreak()
	}
	if yyb1009 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	if x.Handler.HTTPGet == nil {
		x.Handler.HTTPGet = new(HTTPGetAction)
	}
	yyj1009++
	if yyhl1009 {
		yyb1009 = yyj1009 > l
	} else {
		yyb1009 = r.CheckBreak()
	}
	if yyb1009 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	if x.Handler.TCPSocket == nil {
		x.Handler.TCPSocket = new(TCPSocketAction)
	}
	yyj1009++
	if yyhl1009 {
		yyb1009 = yyj1009 > l
	} else {
		yyb1009 = r.CheckBreak()
	}
	if yyb1009 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	yyj1009++
	if yyhl1009 {
		yyb1009 = yyj1009 > l
	} else {
		yyb1009 = r.CheckBreak()
	}
	if yyb1009 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InitialDelaySeconds = 0
	} else {
		x.InitialDelaySeconds = int32(r.DecodeInt(32))
	}
	yyj1009++
	if yyhl1009 {
		yyb1009 = yyj1009 > l
	} else {
		yyb1009 = r.CheckBreak()
	}
	if yyb1009 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TimeoutSeconds = 0
	} else {
		x.TimeoutSeconds = int32(r.DecodeInt(32))
	}
	yyj1009++
	if yyhl1009 {
		yyb1009 = yyj1009 > l
	} else {
		yyb1009 = r.CheckBreak()
	}
	if yyb1009 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PeriodSeconds = 0
	} else {
		x.PeriodSeconds = int32(r.DecodeInt(32))
	}
	yyj1009++
	if yyhl1009 {
		yyb1009 = yyj1009 > l
	} else {
		yyb1009 = r.CheckBreak()
	}
	if yyb1009 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SuccessThreshold = 0
	} else {
		x.SuccessThreshold = int32(r.DecodeInt(32))
	}
	yyj1009++
	if yyhl1009 {
		yyb1009 = yyj1009 > l
	} else {
		yyb1009 = r.CheckBreak()
	}
	if yyb1009 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FailureThreshold = 0
	} else {
		x.FailureThreshold = int32(r.DecodeInt(32))
	}
	for {
		yyj1009++
		if yyhl1009 {
			yyb1009 = yyj1009 > l
		} else {
			yyb1009 = r.CheckBreak()
		}
		if yyb1009 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1009-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PullPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1018 := z.EncBinary()
	_ = yym1018
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PullPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1019 := z.DecBinary()
	_ = yym1019
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Capability) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1020 := z.EncBinary()
	_ = yym1020
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Capability) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1021 := z.DecBinary()
	_ = yym1021
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Capabilities) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1022 := z.EncBinary()
		_ = yym1022
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1023 := !z.EncBinary()
			yy2arr1023 := z.EncBasicHandle().StructToArray
			var yyq1023 [2]bool
			_, _, _ = yysep1023, yyq1023, yy2arr1023
			const yyr1023 bool = false
			yyq1023[0] = len(x.Add) != 0
			yyq1023[1] = len(x.Drop) != 0
			var yynn1023 int
			if yyr1023 || yy2arr1023 {
				r.EncodeArrayStart(2)
			} else {
				yynn1023 = 0
				for _, b := range yyq1023 {
					if b {
						yynn1023++
					}
				}
				r.EncodeMapStart(yynn1023)
				yynn1023 = 0
			}
			if yyr1023 || yy2arr1023 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1023[0] {
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1025 := z.EncBinary()
						_ = yym1025
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1023[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("add"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1026 := z.EncBinary()
						_ = yym1026
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				}
			}
			if yyr1023 || yy2arr1023 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1023[1] {
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1028 := z.EncBinary()
						_ = yym1028
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1023[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("drop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1029 := z.EncBinary()
						_ = yym1029
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				}
			}
			if yyr1023 || yy2arr1023 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Capabilities) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1030 := z.DecBinary()
	_ = yym1030
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1031 := r.ContainerType()
		if yyct1031 == codecSelferValueTypeMap1234 {
			yyl1031 := r.ReadMapStart()
			if yyl1031 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1031, d)
			}
		} else if yyct1031 == codecSelferValueTypeArray1234 {
			yyl1031 := r.ReadArrayStart()
			if yyl1031 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1031, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Capabilities) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1032Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1032Slc
	var yyhl1032 bool = l >= 0
	for yyj1032 := 0; ; yyj1032++ {
		if yyhl1032 {
			if yyj1032 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1032Slc = r.DecodeBytes(yys1032Slc, true, true)
		yys1032 := string(yys1032Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1032 {
		case "add":
			if r.TryDecodeAsNil() {
				x.Add = nil
			} else {
				yyv1033 := &x.Add
				yym1034 := z.DecBinary()
				_ = yym1034
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1033), d)
				}
			}
		case "drop":
			if r.TryDecodeAsNil() {
				x.Drop = nil
			} else {
				yyv1035 := &x.Drop
				yym1036 := z.DecBinary()
				_ = yym1036
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1035), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1032)
		} // end switch yys1032
	} // end for yyj1032
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Capabilities) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1037 int
	var yyb1037 bool
	var yyhl1037 bool = l >= 0
	yyj1037++
	if yyhl1037 {
		yyb1037 = yyj1037 > l
	} else {
		yyb1037 = r.CheckBreak()
	}
	if yyb1037 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Add = nil
	} else {
		yyv1038 := &x.Add
		yym1039 := z.DecBinary()
		_ = yym1039
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1038), d)
		}
	}
	yyj1037++
	if yyhl1037 {
		yyb1037 = yyj1037 > l
	} else {
		yyb1037 = r.CheckBreak()
	}
	if yyb1037 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Drop = nil
	} else {
		yyv1040 := &x.Drop
		yym1041 := z.DecBinary()
		_ = yym1041
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1040), d)
		}
	}
	for {
		yyj1037++
		if yyhl1037 {
			yyb1037 = yyj1037 > l
		} else {
			yyb1037 = r.CheckBreak()
		}
		if yyb1037 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1037-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceRequirements) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1042 := z.EncBinary()
		_ = yym1042
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1043 := !z.EncBinary()
			yy2arr1043 := z.EncBasicHandle().StructToArray
			var yyq1043 [2]bool
			_, _, _ = yysep1043, yyq1043, yy2arr1043
			const yyr1043 bool = false
			yyq1043[0] = len(x.Limits) != 0
			yyq1043[1] = len(x.Requests) != 0
			var yynn1043 int
			if yyr1043 || yy2arr1043 {
				r.EncodeArrayStart(2)
			} else {
				yynn1043 = 0
				for _, b := range yyq1043 {
					if b {
						yynn1043++
					}
				}
				r.EncodeMapStart(yynn1043)
				yynn1043 = 0
			}
			if yyr1043 || yy2arr1043 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1043[0] {
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1043[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("limits"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1043 || yy2arr1043 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1043[1] {
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1043[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requests"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1043 || yy2arr1043 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceRequirements) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1046 := z.DecBinary()
	_ = yym1046
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1047 := r.ContainerType()
		if yyct1047 == codecSelferValueTypeMap1234 {
			yyl1047 := r.ReadMapStart()
			if yyl1047 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1047, d)
			}
		} else if yyct1047 == codecSelferValueTypeArray1234 {
			yyl1047 := r.ReadArrayStart()
			if yyl1047 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1047, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1048Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1048Slc
	var yyhl1048 bool = l >= 0
	for yyj1048 := 0; ; yyj1048++ {
		if yyhl1048 {
			if yyj1048 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1048Slc = r.DecodeBytes(yys1048Slc, true, true)
		yys1048 := string(yys1048Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1048 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv1049 := &x.Limits
				yyv1049.CodecDecodeSelf(d)
			}
		case "requests":
			if r.TryDecodeAsNil() {
				x.Requests = nil
			} else {
				yyv1050 := &x.Requests
				yyv1050.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1048)
		} // end switch yys1048
	} // end for yyj1048
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceRequirements) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1051 int
	var yyb1051 bool
	var yyhl1051 bool = l >= 0
	yyj1051++
	if yyhl1051 {
		yyb1051 = yyj1051 > l
	} else {
		yyb1051 = r.CheckBreak()
	}
	if yyb1051 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv1052 := &x.Limits
		yyv1052.CodecDecodeSelf(d)
	}
	yyj1051++
	if yyhl1051 {
		yyb1051 = yyj1051 > l
	} else {
		yyb1051 = r.CheckBreak()
	}
	if yyb1051 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Requests = nil
	} else {
		yyv1053 := &x.Requests
		yyv1053.CodecDecodeSelf(d)
	}
	for {
		yyj1051++
		if yyhl1051 {
			yyb1051 = yyj1051 > l
		} else {
			yyb1051 = r.CheckBreak()
		}
		if yyb1051 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1051-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Container) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1054 := z.EncBinary()
		_ = yym1054
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1055 := !z.EncBinary()
			yy2arr1055 := z.EncBasicHandle().StructToArray
			var yyq1055 [18]bool
			_, _, _ = yysep1055, yyq1055, yy2arr1055
			const yyr1055 bool = false
			yyq1055[1] = x.Image != ""
			yyq1055[2] = len(x.Command) != 0
			yyq1055[3] = len(x.Args) != 0
			yyq1055[4] = x.WorkingDir != ""
			yyq1055[5] = len(x.Ports) != 0
			yyq1055[6] = len(x.Env) != 0
			yyq1055[7] = true
			yyq1055[8] = len(x.VolumeMounts) != 0
			yyq1055[9] = x.LivenessProbe != nil
			yyq1055[10] = x.ReadinessProbe != nil
			yyq1055[11] = x.Lifecycle != nil
			yyq1055[12] = x.TerminationMessagePath != ""
			yyq1055[13] = x.ImagePullPolicy != ""
			yyq1055[14] = x.SecurityContext != nil
			yyq1055[15] = x.Stdin != false
			yyq1055[16] = x.StdinOnce != false
			yyq1055[17] = x.TTY != false
			var yynn1055 int
			if yyr1055 || yy2arr1055 {
				r.EncodeArrayStart(18)
			} else {
				yynn1055 = 1
				for _, b := range yyq1055 {
					if b {
						yynn1055++
					}
				}
				r.EncodeMapStart(yynn1055)
				yynn1055 = 0
			}
			if yyr1055 || yy2arr1055 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1057 := z.EncBinary()
				_ = yym1057
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1058 := z.EncBinary()
				_ = yym1058
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1055 || yy2arr1055 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1055[1] {
					yym1060 := z.EncBinary()
					_ = yym1060
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Image))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1055[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("image"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1061 := z.EncBinary()
					_ = yym1061
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Image))
					}
				}
			}
			if yyr1055 || yy2arr1055 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1055[2] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1063 := z.EncBinary()
						_ = yym1063
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1055[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1064 := z.EncBinary()
						_ = yym1064
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1055 || yy2arr1055 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1055[3] {
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1066 := z.EncBinary()
						_ = yym1066
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1055[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("args"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1067 := z.EncBinary()
						_ = yym1067
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				}
			}
			if yyr1055 || yy2arr1055 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1055[4] {
					yym1069 := z.EncBinary()
					_ = yym1069
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1055[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("workingDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1070 := z.EncBinary()
					_ = yym1070
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				}
			}
			if yyr1055 || yy2arr1055 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1055[5] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1072 := z.EncBinary()
						_ = yym1072
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1055[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1073 := z.EncBinary()
						_ = yym1073
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1055 || yy2arr1055 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1055[6] {
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1075 := z.EncBinary()
						_ = yym1075
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1055[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("env"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1076 := z.EncBinary()
						_ = yym1076
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				}
			}
			if yyr1055 || yy2arr1055 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1055[7] {
					yy1078 := &x.Resources
					yy1078.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1055[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1079 := &x.Resources
					yy1079.CodecEncodeSelf(e)
				}
			}
			if yyr1055 || yy2arr1055 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1055[8] {
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1081 := z.EncBinary()
						_ = yym1081
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1055[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeMounts"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1082 := z.EncBinary()
						_ = yym1082
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				}
			}
			if yyr1055 || yy2arr1055 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1055[9] {
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1055[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("livenessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1055 || yy2arr1055 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1055[10] {
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1055[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readinessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1055 || yy2arr1055 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1055[11] {
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1055[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lifecycle"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1055 || yy2arr1055 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1055[12] {
					yym1087 := z.EncBinary()
					_ = yym1087
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1055[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationMessagePath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1088 := z.EncBinary()
					_ = yym1088
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				}
			}
			if yyr1055 || yy2arr1055 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1055[13] {
					x.ImagePullPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1055[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.ImagePullPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1055 || yy2arr1055 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1055[14] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1055[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1055 || yy2arr1055 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1055[15] {
					yym1092 := z.EncBinary()
					_ = yym1092
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1055[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1093 := z.EncBinary()
					_ = yym1093
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr1055 || yy2arr1055 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1055[16] {
					yym1095 := z.EncBinary()
					_ = yym1095
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1055[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdinOnce"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1096 := z.EncBinary()
					_ = yym1096
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				}
			}
			if yyr1055 || yy2arr1055 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1055[17] {
					yym1098 := z.EncBinary()
					_ = yym1098
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1055[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1099 := z.EncBinary()
					_ = yym1099
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr1055 || yy2arr1055 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Container) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1100 := z.DecBinary()
	_ = yym1100
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1101 := r.ContainerType()
		if yyct1101 == codecSelferValueTypeMap1234 {
			yyl1101 := r.ReadMapStart()
			if yyl1101 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1101, d)
			}
		} else if yyct1101 == codecSelferValueTypeArray1234 {
			yyl1101 := r.ReadArrayStart()
			if yyl1101 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1101, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Container) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1102Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1102Slc
	var yyhl1102 bool = l >= 0
	for yyj1102 := 0; ; yyj1102++ {
		if yyhl1102 {
			if yyj1102 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1102Slc = r.DecodeBytes(yys1102Slc, true, true)
		yys1102 := string(yys1102Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1102 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1105 := &x.Command
				yym1106 := z.DecBinary()
				_ = yym1106
				if false {
				} else {
					z.F.DecSliceStringX(yyv1105, false, d)
				}
			}
		case "args":
			if r.TryDecodeAsNil() {
				x.Args = nil
			} else {
				yyv1107 := &x.Args
				yym1108 := z.DecBinary()
				_ = yym1108
				if false {
				} else {
					z.F.DecSliceStringX(yyv1107, false, d)
				}
			}
		case "workingDir":
			if r.TryDecodeAsNil() {
				x.WorkingDir = ""
			} else {
				x.WorkingDir = string(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1110 := &x.Ports
				yym1111 := z.DecBinary()
				_ = yym1111
				if false {
				} else {
					h.decSliceContainerPort((*[]ContainerPort)(yyv1110), d)
				}
			}
		case "env":
			if r.TryDecodeAsNil() {
				x.Env = nil
			} else {
				yyv1112 := &x.Env
				yym1113 := z.DecBinary()
				_ = yym1113
				if false {
				} else {
					h.decSliceEnvVar((*[]EnvVar)(yyv1112), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv1114 := &x.Resources
				yyv1114.CodecDecodeSelf(d)
			}
		case "volumeMounts":
			if r.TryDecodeAsNil() {
				x.VolumeMounts = nil
			} else {
				yyv1115 := &x.VolumeMounts
				yym1116 := z.DecBinary()
				_ = yym1116
				if false {
				} else {
					h.decSliceVolumeMount((*[]VolumeMount)(yyv1115), d)
				}
			}
		case "livenessProbe":
			if r.TryDecodeAsNil() {
				if x.LivenessProbe != nil {
					x.LivenessProbe = nil
				}
			} else {
				if x.LivenessProbe == nil {
					x.LivenessProbe = new(Probe)
				}
				x.LivenessProbe.CodecDecodeSelf(d)
			}
		case "readinessProbe":
			if r.TryDecodeAsNil() {
				if x.ReadinessProbe != nil {
					x.ReadinessProbe = nil
				}
			} else {
				if x.ReadinessProbe == nil {
					x.ReadinessProbe = new(Probe)
				}
				x.ReadinessProbe.CodecDecodeSelf(d)
			}
		case "lifecycle":
			if r.TryDecodeAsNil() {
				if x.Lifecycle != nil {
					x.Lifecycle = nil
				}
			} else {
				if x.Lifecycle == nil {
					x.Lifecycle = new(Lifecycle)
				}
				x.Lifecycle.CodecDecodeSelf(d)
			}
		case "terminationMessagePath":
			if r.TryDecodeAsNil() {
				x.TerminationMessagePath = ""
			} else {
				x.TerminationMessagePath = string(r.DecodeString())
			}
		case "imagePullPolicy":
			if r.TryDecodeAsNil() {
				x.ImagePullPolicy = ""
			} else {
				x.ImagePullPolicy = PullPolicy(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(SecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdinOnce":
			if r.TryDecodeAsNil() {
				x.StdinOnce = false
			} else {
				x.StdinOnce = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1102)
		} // end switch yys1102
	} // end for yyj1102
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Container) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1126 int
	var yyb1126 bool
	var yyhl1126 bool = l >= 0
	yyj1126++
	if yyhl1126 {
		yyb1126 = yyj1126 > l
	} else {
		yyb1126 = r.CheckBreak()
	}
	if yyb1126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1126++
	if yyhl1126 {
		yyb1126 = yyj1126 > l
	} else {
		yyb1126 = r.CheckBreak()
	}
	if yyb1126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1126++
	if yyhl1126 {
		yyb1126 = yyj1126 > l
	} else {
		yyb1126 = r.CheckBreak()
	}
	if yyb1126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1129 := &x.Command
		yym1130 := z.DecBinary()
		_ = yym1130
		if false {
		} else {
			z.F.DecSliceStringX(yyv1129, false, d)
		}
	}
	yyj1126++
	if yyhl1126 {
		yyb1126 = yyj1126 > l
	} else {
		yyb1126 = r.CheckBreak()
	}
	if yyb1126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Args = nil
	} else {
		yyv1131 := &x.Args
		yym1132 := z.DecBinary()
		_ = yym1132
		if false {
		} else {
			z.F.DecSliceStringX(yyv1131, false, d)
		}
	}
	yyj1126++
	if yyhl1126 {
		yyb1126 = yyj1126 > l
	} else {
		yyb1126 = r.CheckBreak()
	}
	if yyb1126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.WorkingDir = ""
	} else {
		x.WorkingDir = string(r.DecodeString())
	}
	yyj1126++
	if yyhl1126 {
		yyb1126 = yyj1126 > l
	} else {
		yyb1126 = r.CheckBreak()
	}
	if yyb1126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1134 := &x.Ports
		yym1135 := z.DecBinary()
		_ = yym1135
		if false {
		} else {
			h.decSliceContainerPort((*[]ContainerPort)(yyv1134), d)
		}
	}
	yyj1126++
	if yyhl1126 {
		yyb1126 = yyj1126 > l
	} else {
		yyb1126 = r.CheckBreak()
	}
	if yyb1126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Env = nil
	} else {
		yyv1136 := &x.Env
		yym1137 := z.DecBinary()
		_ = yym1137
		if false {
		} else {
			h.decSliceEnvVar((*[]EnvVar)(yyv1136), d)
		}
	}
	yyj1126++
	if yyhl1126 {
		yyb1126 = yyj1126 > l
	} else {
		yyb1126 = r.CheckBreak()
	}
	if yyb1126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv1138 := &x.Resources
		yyv1138.CodecDecodeSelf(d)
	}
	yyj1126++
	if yyhl1126 {
		yyb1126 = yyj1126 > l
	} else {
		yyb1126 = r.CheckBreak()
	}
	if yyb1126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeMounts = nil
	} else {
		yyv1139 := &x.VolumeMounts
		yym1140 := z.DecBinary()
		_ = yym1140
		if false {
		} else {
			h.decSliceVolumeMount((*[]VolumeMount)(yyv1139), d)
		}
	}
	yyj1126++
	if yyhl1126 {
		yyb1126 = yyj1126 > l
	} else {
		yyb1126 = r.CheckBreak()
	}
	if yyb1126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LivenessProbe != nil {
			x.LivenessProbe = nil
		}
	} else {
		if x.LivenessProbe == nil {
			x.LivenessProbe = new(Probe)
		}
		x.LivenessProbe.CodecDecodeSelf(d)
	}
	yyj1126++
	if yyhl1126 {
		yyb1126 = yyj1126 > l
	} else {
		yyb1126 = r.CheckBreak()
	}
	if yyb1126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadinessProbe != nil {
			x.ReadinessProbe = nil
		}
	} else {
		if x.ReadinessProbe == nil {
			x.ReadinessProbe = new(Probe)
		}
		x.ReadinessProbe.CodecDecodeSelf(d)
	}
	yyj1126++
	if yyhl1126 {
		yyb1126 = yyj1126 > l
	} else {
		yyb1126 = r.CheckBreak()
	}
	if yyb1126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lifecycle != nil {
			x.Lifecycle = nil
		}
	} else {
		if x.Lifecycle == nil {
			x.Lifecycle = new(Lifecycle)
		}
		x.Lifecycle.CodecDecodeSelf(d)
	}
	yyj1126++
	if yyhl1126 {
		yyb1126 = yyj1126 > l
	} else {
		yyb1126 = r.CheckBreak()
	}
	if yyb1126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TerminationMessagePath = ""
	} else {
		x.TerminationMessagePath = string(r.DecodeString())
	}
	yyj1126++
	if yyhl1126 {
		yyb1126 = yyj1126 > l
	} else {
		yyb1126 = r.CheckBreak()
	}
	if yyb1126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullPolicy = ""
	} else {
		x.ImagePullPolicy = PullPolicy(r.DecodeString())
	}
	yyj1126++
	if yyhl1126 {
		yyb1126 = yyj1126 > l
	} else {
		yyb1126 = r.CheckBreak()
	}
	if yyb1126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(SecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1126++
	if yyhl1126 {
		yyb1126 = yyj1126 > l
	} else {
		yyb1126 = r.CheckBreak()
	}
	if yyb1126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj1126++
	if yyhl1126 {
		yyb1126 = yyj1126 > l
	} else {
		yyb1126 = r.CheckBreak()
	}
	if yyb1126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StdinOnce = false
	} else {
		x.StdinOnce = bool(r.DecodeBool())
	}
	yyj1126++
	if yyhl1126 {
		yyb1126 = yyj1126 > l
	} else {
		yyb1126 = r.CheckBreak()
	}
	if yyb1126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	for {
		yyj1126++
		if yyhl1126 {
			yyb1126 = yyj1126 > l
		} else {
			yyb1126 = r.CheckBreak()
		}
		if yyb1126 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1126-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Handler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1150 := z.EncBinary()
		_ = yym1150
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1151 := !z.EncBinary()
			yy2arr1151 := z.EncBasicHandle().StructToArray
			var yyq1151 [3]bool
			_, _, _ = yysep1151, yyq1151, yy2arr1151
			const yyr1151 bool = false
			yyq1151[0] = x.Exec != nil
			yyq1151[1] = x.HTTPGet != nil
			yyq1151[2] = x.TCPSocket != nil
			var yynn1151 int
			if yyr1151 || yy2arr1151 {
				r.EncodeArrayStart(3)
			} else {
				yynn1151 = 0
				for _, b := range yyq1151 {
					if b {
						yynn1151++
					}
				}
				r.EncodeMapStart(yynn1151)
				yynn1151 = 0
			}
			if yyr1151 || yy2arr1151 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1151[0] {
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1151[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1151 || yy2arr1151 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1151[1] {
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1151[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1151 || yy2arr1151 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1151[2] {
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1151[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1151 || yy2arr1151 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Handler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1155 := z.DecBinary()
	_ = yym1155
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1156 := r.ContainerType()
		if yyct1156 == codecSelferValueTypeMap1234 {
			yyl1156 := r.ReadMapStart()
			if yyl1156 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1156, d)
			}
		} else if yyct1156 == codecSelferValueTypeArray1234 {
			yyl1156 := r.ReadArrayStart()
			if yyl1156 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1156, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Handler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1157Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1157Slc
	var yyhl1157 bool = l >= 0
	for yyj1157 := 0; ; yyj1157++ {
		if yyhl1157 {
			if yyj1157 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1157Slc = r.DecodeBytes(yys1157Slc, true, true)
		yys1157 := string(yys1157Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1157 {
		case "exec":
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1157)
		} // end switch yys1157
	} // end for yyj1157
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Handler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1161 int
	var yyb1161 bool
	var yyhl1161 bool = l >= 0
	yyj1161++
	if yyhl1161 {
		yyb1161 = yyj1161 > l
	} else {
		yyb1161 = r.CheckBreak()
	}
	if yyb1161 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1161++
	if yyhl1161 {
		yyb1161 = yyj1161 > l
	} else {
		yyb1161 = r.CheckBreak()
	}
	if yyb1161 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1161++
	if yyhl1161 {
		yyb1161 = yyj1161 > l
	} else {
		yyb1161 = r.CheckBreak()
	}
	if yyb1161 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	for {
		yyj1161++
		if yyhl1161 {
			yyb1161 = yyj1161 > l
		} else {
			yyb1161 = r.CheckBreak()
		}
		if yyb1161 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1161-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Lifecycle) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1165 := z.EncBinary()
		_ = yym1165
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1166 := !z.EncBinary()
			yy2arr1166 := z.EncBasicHandle().StructToArray
			var yyq1166 [2]bool
			_, _, _ = yysep1166, yyq1166, yy2arr1166
			const yyr1166 bool = false
			yyq1166[0] = x.PostStart != nil
			yyq1166[1] = x.PreStop != nil
			var yynn1166 int
			if yyr1166 || yy2arr1166 {
				r.EncodeArrayStart(2)
			} else {
				yynn1166 = 0
				for _, b := range yyq1166 {
					if b {
						yynn1166++
					}
				}
				r.EncodeMapStart(yynn1166)
				yynn1166 = 0
			}
			if yyr1166 || yy2arr1166 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1166[0] {
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1166[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("postStart"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1166 || yy2arr1166 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1166[1] {
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1166[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preStop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1166 || yy2arr1166 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Lifecycle) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1169 := z.DecBinary()
	_ = yym1169
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1170 := r.ContainerType()
		if yyct1170 == codecSelferValueTypeMap1234 {
			yyl1170 := r.ReadMapStart()
			if yyl1170 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1170, d)
			}
		} else if yyct1170 == codecSelferValueTypeArray1234 {
			yyl1170 := r.ReadArrayStart()
			if yyl1170 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1170, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Lifecycle) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1171Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1171Slc
	var yyhl1171 bool = l >= 0
	for yyj1171 := 0; ; yyj1171++ {
		if yyhl1171 {
			if yyj1171 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1171Slc = r.DecodeBytes(yys1171Slc, true, true)
		yys1171 := string(yys1171Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1171 {
		case "postStart":
			if r.TryDecodeAsNil() {
				if x.PostStart != nil {
					x.PostStart = nil
				}
			} else {
				if x.PostStart == nil {
					x.PostStart = new(Handler)
				}
				x.PostStart.CodecDecodeSelf(d)
			}
		case "preStop":
			if r.TryDecodeAsNil() {
				if x.PreStop != nil {
					x.PreStop = nil
				}
			} else {
				if x.PreStop == nil {
					x.PreStop = new(Handler)
				}
				x.PreStop.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1171)
		} // end switch yys1171
	} // end for yyj1171
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Lifecycle) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1174 int
	var yyb1174 bool
	var yyhl1174 bool = l >= 0
	yyj1174++
	if yyhl1174 {
		yyb1174 = yyj1174 > l
	} else {
		yyb1174 = r.CheckBreak()
	}
	if yyb1174 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PostStart != nil {
			x.PostStart = nil
		}
	} else {
		if x.PostStart == nil {
			x.PostStart = new(Handler)
		}
		x.PostStart.CodecDecodeSelf(d)
	}
	yyj1174++
	if yyhl1174 {
		yyb1174 = yyj1174 > l
	} else {
		yyb1174 = r.CheckBreak()
	}
	if yyb1174 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PreStop != nil {
			x.PreStop = nil
		}
	} else {
		if x.PreStop == nil {
			x.PreStop = new(Handler)
		}
		x.PreStop.CodecDecodeSelf(d)
	}
	for {
		yyj1174++
		if yyhl1174 {
			yyb1174 = yyj1174 > l
		} else {
			yyb1174 = r.CheckBreak()
		}
		if yyb1174 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1174-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ConditionStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1177 := z.EncBinary()
	_ = yym1177
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConditionStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1178 := z.DecBinary()
	_ = yym1178
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ContainerStateWaiting) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1179 := z.EncBinary()
		_ = yym1179
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1180 := !z.EncBinary()
			yy2arr1180 := z.EncBasicHandle().StructToArray
			var yyq1180 [2]bool
			_, _, _ = yysep1180, yyq1180, yy2arr1180
			const yyr1180 bool = false
			yyq1180[0] = x.Reason != ""
			yyq1180[1] = x.Message != ""
			var yynn1180 int
			if yyr1180 || yy2arr1180 {
				r.EncodeArrayStart(2)
			} else {
				yynn1180 = 0
				for _, b := range yyq1180 {
					if b {
						yynn1180++
					}
				}
				r.EncodeMapStart(yynn1180)
				yynn1180 = 0
			}
			if yyr1180 || yy2arr1180 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1180[0] {
					yym1182 := z.EncBinary()
					_ = yym1182
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1180[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1183 := z.EncBinary()
					_ = yym1183
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1180 || yy2arr1180 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1180[1] {
					yym1185 := z.EncBinary()
					_ = yym1185
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1180[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1186 := z.EncBinary()
					_ = yym1186
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1180 || yy2arr1180 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateWaiting) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1187 := z.DecBinary()
	_ = yym1187
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1188 := r.ContainerType()
		if yyct1188 == codecSelferValueTypeMap1234 {
			yyl1188 := r.ReadMapStart()
			if yyl1188 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1188, d)
			}
		} else if yyct1188 == codecSelferValueTypeArray1234 {
			yyl1188 := r.ReadArrayStart()
			if yyl1188 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1188, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1189Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1189Slc
	var yyhl1189 bool = l >= 0
	for yyj1189 := 0; ; yyj1189++ {
		if yyhl1189 {
			if yyj1189 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1189Slc = r.DecodeBytes(yys1189Slc, true, true)
		yys1189 := string(yys1189Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1189 {
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1189)
		} // end switch yys1189
	} // end for yyj1189
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateWaiting) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1192 int
	var yyb1192 bool
	var yyhl1192 bool = l >= 0
	yyj1192++
	if yyhl1192 {
		yyb1192 = yyj1192 > l
	} else {
		yyb1192 = r.CheckBreak()
	}
	if yyb1192 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1192++
	if yyhl1192 {
		yyb1192 = yyj1192 > l
	} else {
		yyb1192 = r.CheckBreak()
	}
	if yyb1192 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1192++
		if yyhl1192 {
			yyb1192 = yyj1192 > l
		} else {
			yyb1192 = r.CheckBreak()
		}
		if yyb1192 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1192-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateRunning) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1195 := z.EncBinary()
		_ = yym1195
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1196 := !z.EncBinary()
			yy2arr1196 := z.EncBasicHandle().StructToArray
			var yyq1196 [1]bool
			_, _, _ = yysep1196, yyq1196, yy2arr1196
			const yyr1196 bool = false
			yyq1196[0] = true
			var yynn1196 int
			if yyr1196 || yy2arr1196 {
				r.EncodeArrayStart(1)
			} else {
				yynn1196 = 0
				for _, b := range yyq1196 {
					if b {
						yynn1196++
					}
				}
				r.EncodeMapStart(yynn1196)
				yynn1196 = 0
			}
			if yyr1196 || yy2arr1196 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1196[0] {
					yy1198 := &x.StartedAt
					yym1199 := z.EncBinary()
					_ = yym1199
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1198) {
					} else if yym1199 {
						z.EncBinaryMarshal(yy1198)
					} else if !yym1199 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1198)
					} else {
						z.EncFallback(yy1198)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1196[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1200 := &x.StartedAt
					yym1201 := z.EncBinary()
					_ = yym1201
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1200) {
					} else if yym1201 {
						z.EncBinaryMarshal(yy1200)
					} else if !yym1201 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1200)
					} else {
						z.EncFallback(yy1200)
					}
				}
			}
			if yyr1196 || yy2arr1196 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateRunning) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1202 := z.DecBinary()
	_ = yym1202
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1203 := r.ContainerType()
		if yyct1203 == codecSelferValueTypeMap1234 {
			yyl1203 := r.ReadMapStart()
			if yyl1203 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1203, d)
			}
		} else if yyct1203 == codecSelferValueTypeArray1234 {
			yyl1203 := r.ReadArrayStart()
			if yyl1203 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1203, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1204Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1204Slc
	var yyhl1204 bool = l >= 0
	for yyj1204 := 0; ; yyj1204++ {
		if yyhl1204 {
			if yyj1204 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1204Slc = r.DecodeBytes(yys1204Slc, true, true)
		yys1204 := string(yys1204Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1204 {
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1205 := &x.StartedAt
				yym1206 := z.DecBinary()
				_ = yym1206
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1205) {
				} else if yym1206 {
					z.DecBinaryUnmarshal(yyv1205)
				} else if !yym1206 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1205)
				} else {
					z.DecFallback(yyv1205, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1204)
		} // end switch yys1204
	} // end for yyj1204
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateRunning) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1207 int
	var yyb1207 bool
	var yyhl1207 bool = l >= 0
	yyj1207++
	if yyhl1207 {
		yyb1207 = yyj1207 > l
	} else {
		yyb1207 = r.CheckBreak()
	}
	if yyb1207 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1208 := &x.StartedAt
		yym1209 := z.DecBinary()
		_ = yym1209
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1208) {
		} else if yym1209 {
			z.DecBinaryUnmarshal(yyv1208)
		} else if !yym1209 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1208)
		} else {
			z.DecFallback(yyv1208, false)
		}
	}
	for {
		yyj1207++
		if yyhl1207 {
			yyb1207 = yyj1207 > l
		} else {
			yyb1207 = r.CheckBreak()
		}
		if yyb1207 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1207-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateTerminated) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1210 := z.EncBinary()
		_ = yym1210
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1211 := !z.EncBinary()
			yy2arr1211 := z.EncBasicHandle().StructToArray
			var yyq1211 [7]bool
			_, _, _ = yysep1211, yyq1211, yy2arr1211
			const yyr1211 bool = false
			yyq1211[1] = x.Signal != 0
			yyq1211[2] = x.Reason != ""
			yyq1211[3] = x.Message != ""
			yyq1211[4] = true
			yyq1211[5] = true
			yyq1211[6] = x.ContainerID != ""
			var yynn1211 int
			if yyr1211 || yy2arr1211 {
				r.EncodeArrayStart(7)
			} else {
				yynn1211 = 1
				for _, b := range yyq1211 {
					if b {
						yynn1211++
					}
				}
				r.EncodeMapStart(yynn1211)
				yynn1211 = 0
			}
			if yyr1211 || yy2arr1211 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1213 := z.EncBinary()
				_ = yym1213
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exitCode"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1214 := z.EncBinary()
				_ = yym1214
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			}
			if yyr1211 || yy2arr1211 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1211[1] {
					yym1216 := z.EncBinary()
					_ = yym1216
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1211[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("signal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1217 := z.EncBinary()
					_ = yym1217
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				}
			}
			if yyr1211 || yy2arr1211 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1211[2] {
					yym1219 := z.EncBinary()
					_ = yym1219
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1211[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1220 := z.EncBinary()
					_ = yym1220
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1211 || yy2arr1211 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1211[3] {
					yym1222 := z.EncBinary()
					_ = yym1222
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1211[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1223 := z.EncBinary()
					_ = yym1223
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1211 || yy2arr1211 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1211[4] {
					yy1225 := &x.StartedAt
					yym1226 := z.EncBinary()
					_ = yym1226
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1225) {
					} else if yym1226 {
						z.EncBinaryMarshal(yy1225)
					} else if !yym1226 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1225)
					} else {
						z.EncFallback(yy1225)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1211[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1227 := &x.StartedAt
					yym1228 := z.EncBinary()
					_ = yym1228
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1227) {
					} else if yym1228 {
						z.EncBinaryMarshal(yy1227)
					} else if !yym1228 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1227)
					} else {
						z.EncFallback(yy1227)
					}
				}
			}
			if yyr1211 || yy2arr1211 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1211[5] {
					yy1230 := &x.FinishedAt
					yym1231 := z.EncBinary()
					_ = yym1231
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1230) {
					} else if yym1231 {
						z.EncBinaryMarshal(yy1230)
					} else if !yym1231 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1230)
					} else {
						z.EncFallback(yy1230)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1211[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finishedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1232 := &x.FinishedAt
					yym1233 := z.EncBinary()
					_ = yym1233
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1232) {
					} else if yym1233 {
						z.EncBinaryMarshal(yy1232)
					} else if !yym1233 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1232)
					} else {
						z.EncFallback(yy1232)
					}
				}
			}
			if yyr1211 || yy2arr1211 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1211[6] {
					yym1235 := z.EncBinary()
					_ = yym1235
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1211[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1236 := z.EncBinary()
					_ = yym1236
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1211 || yy2arr1211 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateTerminated) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1237 := z.DecBinary()
	_ = yym1237
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1238 := r.ContainerType()
		if yyct1238 == codecSelferValueTypeMap1234 {
			yyl1238 := r.ReadMapStart()
			if yyl1238 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1238, d)
			}
		} else if yyct1238 == codecSelferValueTypeArray1234 {
			yyl1238 := r.ReadArrayStart()
			if yyl1238 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1238, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1239Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1239Slc
	var yyhl1239 bool = l >= 0
	for yyj1239 := 0; ; yyj1239++ {
		if yyhl1239 {
			if yyj1239 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1239Slc = r.DecodeBytes(yys1239Slc, true, true)
		yys1239 := string(yys1239Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1239 {
		case "exitCode":
			if r.TryDecodeAsNil() {
				x.ExitCode = 0
			} else {
				x.ExitCode = int32(r.DecodeInt(32))
			}
		case "signal":
			if r.TryDecodeAsNil() {
				x.Signal = 0
			} else {
				x.Signal = int32(r.DecodeInt(32))
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1244 := &x.StartedAt
				yym1245 := z.DecBinary()
				_ = yym1245
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1244) {
				} else if yym1245 {
					z.DecBinaryUnmarshal(yyv1244)
				} else if !yym1245 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1244)
				} else {
					z.DecFallback(yyv1244, false)
				}
			}
		case "finishedAt":
			if r.TryDecodeAsNil() {
				x.FinishedAt = pkg2_unversioned.Time{}
			} else {
				yyv1246 := &x.FinishedAt
				yym1247 := z.DecBinary()
				_ = yym1247
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1246) {
				} else if yym1247 {
					z.DecBinaryUnmarshal(yyv1246)
				} else if !yym1247 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1246)
				} else {
					z.DecFallback(yyv1246, false)
				}
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1239)
		} // end switch yys1239
	} // end for yyj1239
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateTerminated) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1249 int
	var yyb1249 bool
	var yyhl1249 bool = l >= 0
	yyj1249++
	if yyhl1249 {
		yyb1249 = yyj1249 > l
	} else {
		yyb1249 = r.CheckBreak()
	}
	if yyb1249 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExitCode = 0
	} else {
		x.ExitCode = int32(r.DecodeInt(32))
	}
	yyj1249++
	if yyhl1249 {
		yyb1249 = yyj1249 > l
	} else {
		yyb1249 = r.CheckBreak()
	}
	if yyb1249 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Signal = 0
	} else {
		x.Signal = int32(r.DecodeInt(32))
	}
	yyj1249++
	if yyhl1249 {
		yyb1249 = yyj1249 > l
	} else {
		yyb1249 = r.CheckBreak()
	}
	if yyb1249 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1249++
	if yyhl1249 {
		yyb1249 = yyj1249 > l
	} else {
		yyb1249 = r.CheckBreak()
	}
	if yyb1249 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1249++
	if yyhl1249 {
		yyb1249 = yyj1249 > l
	} else {
		yyb1249 = r.CheckBreak()
	}
	if yyb1249 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1254 := &x.StartedAt
		yym1255 := z.DecBinary()
		_ = yym1255
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1254) {
		} else if yym1255 {
			z.DecBinaryUnmarshal(yyv1254)
		} else if !yym1255 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1254)
		} else {
			z.DecFallback(yyv1254, false)
		}
	}
	yyj1249++
	if yyhl1249 {
		yyb1249 = yyj1249 > l
	} else {
		yyb1249 = r.CheckBreak()
	}
	if yyb1249 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FinishedAt = pkg2_unversioned.Time{}
	} else {
		yyv1256 := &x.FinishedAt
		yym1257 := z.DecBinary()
		_ = yym1257
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1256) {
		} else if yym1257 {
			z.DecBinaryUnmarshal(yyv1256)
		} else if !yym1257 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1256)
		} else {
			z.DecFallback(yyv1256, false)
		}
	}
	yyj1249++
	if yyhl1249 {
		yyb1249 = yyj1249 > l
	} else {
		yyb1249 = r.CheckBreak()
	}
	if yyb1249 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1249++
		if yyhl1249 {
			yyb1249 = yyj1249 > l
		} else {
			yyb1249 = r.CheckBreak()
		}
		if yyb1249 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1249-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerState) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1259 := z.EncBinary()
		_ = yym1259
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1260 := !z.EncBinary()
			yy2arr1260 := z.EncBasicHandle().StructToArray
			var yyq1260 [3]bool
			_, _, _ = yysep1260, yyq1260, yy2arr1260
			const yyr1260 bool = false
			yyq1260[0] = x.Waiting != nil
			yyq1260[1] = x.Running != nil
			yyq1260[2] = x.Terminated != nil
			var yynn1260 int
			if yyr1260 || yy2arr1260 {
				r.EncodeArrayStart(3)
			} else {
				yynn1260 = 0
				for _, b := range yyq1260 {
					if b {
						yynn1260++
					}
				}
				r.EncodeMapStart(yynn1260)
				yynn1260 = 0
			}
			if yyr1260 || yy2arr1260 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1260[0] {
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1260[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("waiting"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1260 || yy2arr1260 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1260[1] {
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1260[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("running"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1260 || yy2arr1260 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1260[2] {
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1260[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminated"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1260 || yy2arr1260 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerState) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1264 := z.DecBinary()
	_ = yym1264
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1265 := r.ContainerType()
		if yyct1265 == codecSelferValueTypeMap1234 {
			yyl1265 := r.ReadMapStart()
			if yyl1265 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1265, d)
			}
		} else if yyct1265 == codecSelferValueTypeArray1234 {
			yyl1265 := r.ReadArrayStart()
			if yyl1265 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1265, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerState) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1266Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1266Slc
	var yyhl1266 bool = l >= 0
	for yyj1266 := 0; ; yyj1266++ {
		if yyhl1266 {
			if yyj1266 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1266Slc = r.DecodeBytes(yys1266Slc, true, true)
		yys1266 := string(yys1266Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1266 {
		case "waiting":
			if r.TryDecodeAsNil() {
				if x.Waiting != nil {
					x.Waiting = nil
				}
			} else {
				if x.Waiting == nil {
					x.Waiting = new(ContainerStateWaiting)
				}
				x.Waiting.CodecDecodeSelf(d)
			}
		case "running":
			if r.TryDecodeAsNil() {
				if x.Running != nil {
					x.Running = nil
				}
			} else {
				if x.Running == nil {
					x.Running = new(ContainerStateRunning)
				}
				x.Running.CodecDecodeSelf(d)
			}
		case "terminated":
			if r.TryDecodeAsNil() {
				if x.Terminated != nil {
					x.Terminated = nil
				}
			} else {
				if x.Terminated == nil {
					x.Terminated = new(ContainerStateTerminated)
				}
				x.Terminated.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1266)
		} // end switch yys1266
	} // end for yyj1266
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerState) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1270 int
	var yyb1270 bool
	var yyhl1270 bool = l >= 0
	yyj1270++
	if yyhl1270 {
		yyb1270 = yyj1270 > l
	} else {
		yyb1270 = r.CheckBreak()
	}
	if yyb1270 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Waiting != nil {
			x.Waiting = nil
		}
	} else {
		if x.Waiting == nil {
			x.Waiting = new(ContainerStateWaiting)
		}
		x.Waiting.CodecDecodeSelf(d)
	}
	yyj1270++
	if yyhl1270 {
		yyb1270 = yyj1270 > l
	} else {
		yyb1270 = r.CheckBreak()
	}
	if yyb1270 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Running != nil {
			x.Running = nil
		}
	} else {
		if x.Running == nil {
			x.Running = new(ContainerStateRunning)
		}
		x.Running.CodecDecodeSelf(d)
	}
	yyj1270++
	if yyhl1270 {
		yyb1270 = yyj1270 > l
	} else {
		yyb1270 = r.CheckBreak()
	}
	if yyb1270 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Terminated != nil {
			x.Terminated = nil
		}
	} else {
		if x.Terminated == nil {
			x.Terminated = new(ContainerStateTerminated)
		}
		x.Terminated.CodecDecodeSelf(d)
	}
	for {
		yyj1270++
		if yyhl1270 {
			yyb1270 = yyj1270 > l
		} else {
			yyb1270 = r.CheckBreak()
		}
		if yyb1270 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1270-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1274 := z.EncBinary()
		_ = yym1274
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1275 := !z.EncBinary()
			yy2arr1275 := z.EncBasicHandle().StructToArray
			var yyq1275 [8]bool
			_, _, _ = yysep1275, yyq1275, yy2arr1275
			const yyr1275 bool = false
			yyq1275[1] = true
			yyq1275[2] = true
			yyq1275[7] = x.ContainerID != ""
			var yynn1275 int
			if yyr1275 || yy2arr1275 {
				r.EncodeArrayStart(8)
			} else {
				yynn1275 = 5
				for _, b := range yyq1275 {
					if b {
						yynn1275++
					}
				}
				r.EncodeMapStart(yynn1275)
				yynn1275 = 0
			}
			if yyr1275 || yy2arr1275 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1277 := z.EncBinary()
				_ = yym1277
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1278 := z.EncBinary()
				_ = yym1278
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1275 || yy2arr1275 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1275[1] {
					yy1280 := &x.State
					yy1280.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1275[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("state"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1281 := &x.State
					yy1281.CodecEncodeSelf(e)
				}
			}
			if yyr1275 || yy2arr1275 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1275[2] {
					yy1283 := &x.LastTerminationState
					yy1283.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1275[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastState"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1284 := &x.LastTerminationState
					yy1284.CodecEncodeSelf(e)
				}
			}
			if yyr1275 || yy2arr1275 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1286 := z.EncBinary()
				_ = yym1286
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ready"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1287 := z.EncBinary()
				_ = yym1287
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			}
			if yyr1275 || yy2arr1275 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1289 := z.EncBinary()
				_ = yym1289
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("restartCount"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1290 := z.EncBinary()
				_ = yym1290
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			}
			if yyr1275 || yy2arr1275 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1292 := z.EncBinary()
				_ = yym1292
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1293 := z.EncBinary()
				_ = yym1293
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1275 || yy2arr1275 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1295 := z.EncBinary()
				_ = yym1295
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imageID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1296 := z.EncBinary()
				_ = yym1296
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			}
			if yyr1275 || yy2arr1275 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1275[7] {
					yym1298 := z.EncBinary()
					_ = yym1298
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1275[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1299 := z.EncBinary()
					_ = yym1299
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1275 || yy2arr1275 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1300 := z.DecBinary()
	_ = yym1300
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1301 := r.ContainerType()
		if yyct1301 == codecSelferValueTypeMap1234 {
			yyl1301 := r.ReadMapStart()
			if yyl1301 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1301, d)
			}
		} else if yyct1301 == codecSelferValueTypeArray1234 {
			yyl1301 := r.ReadArrayStart()
			if yyl1301 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1301, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1302Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1302Slc
	var yyhl1302 bool = l >= 0
	for yyj1302 := 0; ; yyj1302++ {
		if yyhl1302 {
			if yyj1302 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1302Slc = r.DecodeBytes(yys1302Slc, true, true)
		yys1302 := string(yys1302Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1302 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "state":
			if r.TryDecodeAsNil() {
				x.State = ContainerState{}
			} else {
				yyv1304 := &x.State
				yyv1304.CodecDecodeSelf(d)
			}
		case "lastState":
			if r.TryDecodeAsNil() {
				x.LastTerminationState = ContainerState{}
			} else {
				yyv1305 := &x.LastTerminationState
				yyv1305.CodecDecodeSelf(d)
			}
		case "ready":
			if r.TryDecodeAsNil() {
				x.Ready = false
			} else {
				x.Ready = bool(r.DecodeBool())
			}
		case "restartCount":
			if r.TryDecodeAsNil() {
				x.RestartCount = 0
			} else {
				x.RestartCount = int32(r.DecodeInt(32))
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "imageID":
			if r.TryDecodeAsNil() {
				x.ImageID = ""
			} else {
				x.ImageID = string(r.DecodeString())
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1302)
		} // end switch yys1302
	} // end for yyj1302
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1311 int
	var yyb1311 bool
	var yyhl1311 bool = l >= 0
	yyj1311++
	if yyhl1311 {
		yyb1311 = yyj1311 > l
	} else {
		yyb1311 = r.CheckBreak()
	}
	if yyb1311 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1311++
	if yyhl1311 {
		yyb1311 = yyj1311 > l
	} else {
		yyb1311 = r.CheckBreak()
	}
	if yyb1311 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.State = ContainerState{}
	} else {
		yyv1313 := &x.State
		yyv1313.CodecDecodeSelf(d)
	}
	yyj1311++
	if yyhl1311 {
		yyb1311 = yyj1311 > l
	} else {
		yyb1311 = r.CheckBreak()
	}
	if yyb1311 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTerminationState = ContainerState{}
	} else {
		yyv1314 := &x.LastTerminationState
		yyv1314.CodecDecodeSelf(d)
	}
	yyj1311++
	if yyhl1311 {
		yyb1311 = yyj1311 > l
	} else {
		yyb1311 = r.CheckBreak()
	}
	if yyb1311 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ready = false
	} else {
		x.Ready = bool(r.DecodeBool())
	}
	yyj1311++
	if yyhl1311 {
		yyb1311 = yyj1311 > l
	} else {
		yyb1311 = r.CheckBreak()
	}
	if yyb1311 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartCount = 0
	} else {
		x.RestartCount = int32(r.DecodeInt(32))
	}
	yyj1311++
	if yyhl1311 {
		yyb1311 = yyj1311 > l
	} else {
		yyb1311 = r.CheckBreak()
	}
	if yyb1311 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1311++
	if yyhl1311 {
		yyb1311 = yyj1311 > l
	} else {
		yyb1311 = r.CheckBreak()
	}
	if yyb1311 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImageID = ""
	} else {
		x.ImageID = string(r.DecodeString())
	}
	yyj1311++
	if yyhl1311 {
		yyb1311 = yyj1311 > l
	} else {
		yyb1311 = r.CheckBreak()
	}
	if yyb1311 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1311++
		if yyhl1311 {
			yyb1311 = yyj1311 > l
		} else {
			yyb1311 = r.CheckBreak()
		}
		if yyb1311 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1311-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PodPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1320 := z.EncBinary()
	_ = yym1320
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1321 := z.DecBinary()
	_ = yym1321
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PodConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1322 := z.EncBinary()
	_ = yym1322
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1323 := z.DecBinary()
	_ = yym1323
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1324 := z.EncBinary()
		_ = yym1324
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1325 := !z.EncBinary()
			yy2arr1325 := z.EncBasicHandle().StructToArray
			var yyq1325 [6]bool
			_, _, _ = yysep1325, yyq1325, yy2arr1325
			const yyr1325 bool = false
			yyq1325[2] = true
			yyq1325[3] = true
			yyq1325[4] = x.Reason != ""
			yyq1325[5] = x.Message != ""
			var yynn1325 int
			if yyr1325 || yy2arr1325 {
				r.EncodeArrayStart(6)
			} else {
				yynn1325 = 2
				for _, b := range yyq1325 {
					if b {
						yynn1325++
					}
				}
				r.EncodeMapStart(yynn1325)
				yynn1325 = 0
			}
			if yyr1325 || yy2arr1325 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1325 || yy2arr1325 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr1325 || yy2arr1325 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1325[2] {
					yy1329 := &x.LastProbeTime
					yym1330 := z.EncBinary()
					_ = yym1330
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1329) {
					} else if yym1330 {
						z.EncBinaryMarshal(yy1329)
					} else if !yym1330 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1329)
					} else {
						z.EncFallback(yy1329)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1325[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1331 := &x.LastProbeTime
					yym1332 := z.EncBinary()
					_ = yym1332
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1331) {
					} else if yym1332 {
						z.EncBinaryMarshal(yy1331)
					} else if !yym1332 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1331)
					} else {
						z.EncFallback(yy1331)
					}
				}
			}
			if yyr1325 || yy2arr1325 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1325[3] {
					yy1334 := &x.LastTransitionTime
					yym1335 := z.EncBinary()
					_ = yym1335
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1334) {
					} else if yym1335 {
						z.EncBinaryMarshal(yy1334)
					} else if !yym1335 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1334)
					} else {
						z.EncFallback(yy1334)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1325[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1336 := &x.LastTransitionTime
					yym1337 := z.EncBinary()
					_ = yym1337
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1336) {
					} else if yym1337 {
						z.EncBinaryMarshal(yy1336)
					} else if !yym1337 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1336)
					} else {
						z.EncFallback(yy1336)
					}
				}
			}
			if yyr1325 || yy2arr1325 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1325[4] {
					yym1339 := z.EncBinary()
					_ = yym1339
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1325[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1340 := z.EncBinary()
					_ = yym1340
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1325 || yy2arr1325 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1325[5] {
					yym1342 := z.EncBinary()
					_ = yym1342
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1325[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1343 := z.EncBinary()
					_ = yym1343
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1325 || yy2arr1325 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1344 := z.DecBinary()
	_ = yym1344
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1345 := r.ContainerType()
		if yyct1345 == codecSelferValueTypeMap1234 {
			yyl1345 := r.ReadMapStart()
			if yyl1345 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1345, d)
			}
		} else if yyct1345 == codecSelferValueTypeArray1234 {
			yyl1345 := r.ReadArrayStart()
			if yyl1345 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1345, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1346Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1346Slc
	var yyhl1346 bool = l >= 0
	for yyj1346 := 0; ; yyj1346++ {
		if yyhl1346 {
			if yyj1346 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1346Slc = r.DecodeBytes(yys1346Slc, true, true)
		yys1346 := string(yys1346Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1346 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = PodConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg2_unversioned.Time{}
			} else {
				yyv1349 := &x.LastProbeTime
				yym1350 := z.DecBinary()
				_ = yym1350
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1349) {
				} else if yym1350 {
					z.DecBinaryUnmarshal(yyv1349)
				} else if !yym1350 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1349)
				} else {
					z.DecFallback(yyv1349, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv1351 := &x.LastTransitionTime
				yym1352 := z.DecBinary()
				_ = yym1352
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1351) {
				} else if yym1352 {
					z.DecBinaryUnmarshal(yyv1351)
				} else if !yym1352 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1351)
				} else {
					z.DecFallback(yyv1351, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1346)
		} // end switch yys1346
	} // end for yyj1346
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1355 int
	var yyb1355 bool
	var yyhl1355 bool = l >= 0
	yyj1355++
	if yyhl1355 {
		yyb1355 = yyj1355 > l
	} else {
		yyb1355 = r.CheckBreak()
	}
	if yyb1355 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = PodConditionType(r.DecodeString())
	}
	yyj1355++
	if yyhl1355 {
		yyb1355 = yyj1355 > l
	} else {
		yyb1355 = r.CheckBreak()
	}
	if yyb1355 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj1355++
	if yyhl1355 {
		yyb1355 = yyj1355 > l
	} else {
		yyb1355 = r.CheckBreak()
	}
	if yyb1355 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg2_unversioned.Time{}
	} else {
		yyv1358 := &x.LastProbeTime
		yym1359 := z.DecBinary()
		_ = yym1359
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1358) {
		} else if yym1359 {
			z.DecBinaryUnmarshal(yyv1358)
		} else if !yym1359 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1358)
		} else {
			z.DecFallback(yyv1358, false)
		}
	}
	yyj1355++
	if yyhl1355 {
		yyb1355 = yyj1355 > l
	} else {
		yyb1355 = r.CheckBreak()
	}
	if yyb1355 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv1360 := &x.LastTransitionTime
		yym1361 := z.DecBinary()
		_ = yym1361
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1360) {
		} else if yym1361 {
			z.DecBinaryUnmarshal(yyv1360)
		} else if !yym1361 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1360)
		} else {
			z.DecFallback(yyv1360, false)
		}
	}
	yyj1355++
	if yyhl1355 {
		yyb1355 = yyj1355 > l
	} else {
		yyb1355 = r.CheckBreak()
	}
	if yyb1355 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1355++
	if yyhl1355 {
		yyb1355 = yyj1355 > l
	} else {
		yyb1355 = r.CheckBreak()
	}
	if yyb1355 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1355++
		if yyhl1355 {
			yyb1355 = yyj1355 > l
		} else {
			yyb1355 = r.CheckBreak()
		}
		if yyb1355 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1355-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x RestartPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1364 := z.EncBinary()
	_ = yym1364
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RestartPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1365 := z.DecBinary()
	_ = yym1365
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x DNSPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1366 := z.EncBinary()
	_ = yym1366
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DNSPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1367 := z.DecBinary()
	_ = yym1367
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1368 := z.EncBinary()
		_ = yym1368
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1369 := !z.EncBinary()
			yy2arr1369 := z.EncBasicHandle().StructToArray
			var yyq1369 [15]bool
			_, _, _ = yysep1369, yyq1369, yy2arr1369
			const yyr1369 bool = false
			yyq1369[0] = len(x.Volumes) != 0
			yyq1369[2] = x.RestartPolicy != ""
			yyq1369[3] = x.TerminationGracePeriodSeconds != nil
			yyq1369[4] = x.ActiveDeadlineSeconds != nil
			yyq1369[5] = x.DNSPolicy != ""
			yyq1369[6] = len(x.NodeSelector) != 0
			yyq1369[7] = x.ServiceAccountName != ""
			yyq1369[8] = x.DeprecatedServiceAccount != ""
			yyq1369[9] = x.NodeName != ""
			yyq1369[10] = x.HostNetwork != false
			yyq1369[11] = x.HostPID != false
			yyq1369[12] = x.HostIPC != false
			yyq1369[13] = x.SecurityContext != nil
			yyq1369[14] = len(x.ImagePullSecrets) != 0
			var yynn1369 int
			if yyr1369 || yy2arr1369 {
				r.EncodeArrayStart(15)
			} else {
				yynn1369 = 1
				for _, b := range yyq1369 {
					if b {
						yynn1369++
					}
				}
				r.EncodeMapStart(yynn1369)
				yynn1369 = 0
			}
			if yyr1369 || yy2arr1369 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1369[0] {
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym1371 := z.EncBinary()
						_ = yym1371
						if false {
						} else {
							h.encSliceVolume(([]Volume)(x.Volumes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1369[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym1372 := z.EncBinary()
						_ = yym1372
						if false {
						} else {
							h.encSliceVolume(([]Volume)(x.Volumes), e)
						}
					}
				}
			}
			if yyr1369 || yy2arr1369 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1374 := z.EncBinary()
					_ = yym1374
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1375 := z.EncBinary()
					_ = yym1375
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			}
			if yyr1369 || yy2arr1369 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1369[2] {
					x.RestartPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1369[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("restartPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.RestartPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1369 || yy2arr1369 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1369[3] {
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1378 := *x.TerminationGracePeriodSeconds
						yym1379 := z.EncBinary()
						_ = yym1379
						if false {
						} else {
							r.EncodeInt(int64(yy1378))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1369[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1380 := *x.TerminationGracePeriodSeconds
						yym1381 := z.EncBinary()
						_ = yym1381
						if false {
						} else {
							r.EncodeInt(int64(yy1380))
						}
					}
				}
			}
			if yyr1369 || yy2arr1369 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1369[4] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1383 := *x.ActiveDeadlineSeconds
						yym1384 := z.EncBinary()
						_ = yym1384
						if false {
						} else {
							r.EncodeInt(int64(yy1383))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1369[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1385 := *x.ActiveDeadlineSeconds
						yym1386 := z.EncBinary()
						_ = yym1386
						if false {
						} else {
							r.EncodeInt(int64(yy1385))
						}
					}
				}
			}
			if yyr1369 || yy2arr1369 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1369[5] {
					x.DNSPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1369[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("dnsPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.DNSPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1369 || yy2arr1369 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1369[6] {
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1389 := z.EncBinary()
						_ = yym1389
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1369[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1390 := z.EncBinary()
						_ = yym1390
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				}
			}
			if yyr1369 || yy2arr1369 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1369[7] {
					yym1392 := z.EncBinary()
					_ = yym1392
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1369[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("serviceAccountName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1393 := z.EncBinary()
					_ = yym1393
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
					}
				}
			}
			if yyr1369 || yy2arr1369 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1369[8] {
					yym1395 := z.EncBinary()
					_ = yym1395
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DeprecatedServiceAccount))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1369[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("serviceAccount"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1396 := z.EncBinary()
					_ = yym1396
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DeprecatedServiceAccount))
					}
				}
			}
			if yyr1369 || yy2arr1369 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1369[9] {
					yym1398 := z.EncBinary()
					_ = yym1398
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1369[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1399 := z.EncBinary()
					_ = yym1399
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				}
			}
			if yyr1369 || yy2arr1369 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1369[10] {
					yym1401 := z.EncBinary()
					_ = yym1401
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1369[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1402 := z.EncBinary()
					_ = yym1402
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr1369 || yy2arr1369 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1369[11] {
					yym1404 := z.EncBinary()
					_ = yym1404
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1369[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1405 := z.EncBinary()
					_ = yym1405
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr1369 || yy2arr1369 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1369[12] {
					yym1407 := z.EncBinary()
					_ = yym1407
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1369[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1408 := z.EncBinary()
					_ = yym1408
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr1369 || yy2arr1369 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1369[13] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1369[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1369 || yy2arr1369 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1369[14] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1411 := z.EncBinary()
						_ = yym1411
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1369[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1412 := z.EncBinary()
						_ = yym1412
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr1369 || yy2arr1369 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1413 := z.DecBinary()
	_ = yym1413
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1414 := r.ContainerType()
		if yyct1414 == codecSelferValueTypeMap1234 {
			yyl1414 := r.ReadMapStart()
			if yyl1414 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1414, d)
			}
		} else if yyct1414 == codecSelferValueTypeArray1234 {
			yyl1414 := r.ReadArrayStart()
			if yyl1414 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1414, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1415Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1415Slc
	var yyhl1415 bool = l >= 0
	for yyj1415 := 0; ; yyj1415++ {
		if yyhl1415 {
			if yyj1415 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1415Slc = r.DecodeBytes(yys1415Slc, true, true)
		yys1415 := string(yys1415Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1415 {
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv1416 := &x.Volumes
				yym1417 := z.DecBinary()
				_ = yym1417
				if false {
				} else {
					h.decSliceVolume((*[]Volume)(yyv1416), d)
				}
			}
		case "containers":
			if r.TryDecodeAsNil() {
				x.Containers = nil
			} else {
				yyv1418 := &x.Containers
				yym1419 := z.DecBinary()
				_ = yym1419
				if false {
				} else {
					h.decSliceContainer((*[]Container)(yyv1418), d)
				}
			}
		case "restartPolicy":
			if r.TryDecodeAsNil() {
				x.RestartPolicy = ""
			} else {
				x.RestartPolicy = RestartPolicy(r.DecodeString())
			}
		case "terminationGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.TerminationGracePeriodSeconds != nil {
					x.TerminationGracePeriodSeconds = nil
				}
			} else {
				if x.TerminationGracePeriodSeconds == nil {
					x.TerminationGracePeriodSeconds = new(int64)
				}
				yym1422 := z.DecBinary()
				_ = yym1422
				if false {
				} else {
					*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym1424 := z.DecBinary()
				_ = yym1424
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "dnsPolicy":
			if r.TryDecodeAsNil() {
				x.DNSPolicy = ""
			} else {
				x.DNSPolicy = DNSPolicy(r.DecodeString())
			}
		case "nodeSelector":
			if r.TryDecodeAsNil() {
				x.NodeSelector = nil
			} else {
				yyv1426 := &x.NodeSelector
				yym1427 := z.DecBinary()
				_ = yym1427
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1426, false, d)
				}
			}
		case "serviceAccountName":
			if r.TryDecodeAsNil() {
				x.ServiceAccountName = ""
			} else {
				x.ServiceAccountName = string(r.DecodeString())
			}
		case "serviceAccount":
			if r.TryDecodeAsNil() {
				x.DeprecatedServiceAccount = ""
			} else {
				x.DeprecatedServiceAccount = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				x.NodeName = ""
			} else {
				x.NodeName = string(r.DecodeString())
			}
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(PodSecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv1435 := &x.ImagePullSecrets
				yym1436 := z.DecBinary()
				_ = yym1436
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1435), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1415)
		} // end switch yys1415
	} // end for yyj1415
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1437 int
	var yyb1437 bool
	var yyhl1437 bool = l >= 0
	yyj1437++
	if yyhl1437 {
		yyb1437 = yyj1437 > l
	} else {
		yyb1437 = r.CheckBreak()
	}
	if yyb1437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv1438 := &x.Volumes
		yym1439 := z.DecBinary()
		_ = yym1439
		if false {
		} else {
			h.decSliceVolume((*[]Volume)(yyv1438), d)
		}
	}
	yyj1437++
	if yyhl1437 {
		yyb1437 = yyj1437 > l
	} else {
		yyb1437 = r.CheckBreak()
	}
	if yyb1437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Containers = nil
	} else {
		yyv1440 := &x.Containers
		yym1441 := z.DecBinary()
		_ = yym1441
		if false {
		} else {
			h.decSliceContainer((*[]Container)(yyv1440), d)
		}
	}
	yyj1437++
	if yyhl1437 {
		yyb1437 = yyj1437 > l
	} else {
		yyb1437 = r.CheckBreak()
	}
	if yyb1437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartPolicy = ""
	} else {
		x.RestartPolicy = RestartPolicy(r.DecodeString())
	}
	yyj1437++
	if yyhl1437 {
		yyb1437 = yyj1437 > l
	} else {
		yyb1437 = r.CheckBreak()
	}
	if yyb1437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TerminationGracePeriodSeconds != nil {
			x.TerminationGracePeriodSeconds = nil
		}
	} else {
		if x.TerminationGracePeriodSeconds == nil {
			x.TerminationGracePeriodSeconds = new(int64)
		}
		yym1444 := z.DecBinary()
		_ = yym1444
		if false {
		} else {
			*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1437++
	if yyhl1437 {
		yyb1437 = yyj1437 > l
	} else {
		yyb1437 = r.CheckBreak()
	}
	if yyb1437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym1446 := z.DecBinary()
		_ = yym1446
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1437++
	if yyhl1437 {
		yyb1437 = yyj1437 > l
	} else {
		yyb1437 = r.CheckBreak()
	}
	if yyb1437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DNSPolicy = ""
	} else {
		x.DNSPolicy = DNSPolicy(r.DecodeString())
	}
	yyj1437++
	if yyhl1437 {
		yyb1437 = yyj1437 > l
	} else {
		yyb1437 = r.CheckBreak()
	}
	if yyb1437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelector = nil
	} else {
		yyv1448 := &x.NodeSelector
		yym1449 := z.DecBinary()
		_ = yym1449
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1448, false, d)
		}
	}
	yyj1437++
	if yyhl1437 {
		yyb1437 = yyj1437 > l
	} else {
		yyb1437 = r.CheckBreak()
	}
	if yyb1437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceAccountName = ""
	} else {
		x.ServiceAccountName = string(r.DecodeString())
	}
	yyj1437++
	if yyhl1437 {
		yyb1437 = yyj1437 > l
	} else {
		yyb1437 = r.CheckBreak()
	}
	if yyb1437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DeprecatedServiceAccount = ""
	} else {
		x.DeprecatedServiceAccount = string(r.DecodeString())
	}
	yyj1437++
	if yyhl1437 {
		yyb1437 = yyj1437 > l
	} else {
		yyb1437 = r.CheckBreak()
	}
	if yyb1437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeName = ""
	} else {
		x.NodeName = string(r.DecodeString())
	}
	yyj1437++
	if yyhl1437 {
		yyb1437 = yyj1437 > l
	} else {
		yyb1437 = r.CheckBreak()
	}
	if yyb1437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj1437++
	if yyhl1437 {
		yyb1437 = yyj1437 > l
	} else {
		yyb1437 = r.CheckBreak()
	}
	if yyb1437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj1437++
	if yyhl1437 {
		yyb1437 = yyj1437 > l
	} else {
		yyb1437 = r.CheckBreak()
	}
	if yyb1437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj1437++
	if yyhl1437 {
		yyb1437 = yyj1437 > l
	} else {
		yyb1437 = r.CheckBreak()
	}
	if yyb1437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(PodSecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1437++
	if yyhl1437 {
		yyb1437 = yyj1437 > l
	} else {
		yyb1437 = r.CheckBreak()
	}
	if yyb1437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv1457 := &x.ImagePullSecrets
		yym1458 := z.DecBinary()
		_ = yym1458
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1457), d)
		}
	}
	for {
		yyj1437++
		if yyhl1437 {
			yyb1437 = yyj1437 > l
		} else {
			yyb1437 = r.CheckBreak()
		}
		if yyb1437 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1437-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1459 := z.EncBinary()
		_ = yym1459
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1460 := !z.EncBinary()
			yy2arr1460 := z.EncBasicHandle().StructToArray
			var yyq1460 [5]bool
			_, _, _ = yysep1460, yyq1460, yy2arr1460
			const yyr1460 bool = false
			yyq1460[0] = x.SELinuxOptions != nil
			yyq1460[1] = x.RunAsUser != nil
			yyq1460[2] = x.RunAsNonRoot != nil
			yyq1460[3] = len(x.SupplementalGroups) != 0
			yyq1460[4] = x.FSGroup != nil
			var yynn1460 int
			if yyr1460 || yy2arr1460 {
				r.EncodeArrayStart(5)
			} else {
				yynn1460 = 0
				for _, b := range yyq1460 {
					if b {
						yynn1460++
					}
				}
				r.EncodeMapStart(yynn1460)
				yynn1460 = 0
			}
			if yyr1460 || yy2arr1460 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1460[0] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1460[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1460 || yy2arr1460 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1460[1] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy1463 := *x.RunAsUser
						yym1464 := z.EncBinary()
						_ = yym1464
						if false {
						} else {
							r.EncodeInt(int64(yy1463))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1460[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy1465 := *x.RunAsUser
						yym1466 := z.EncBinary()
						_ = yym1466
						if false {
						} else {
							r.EncodeInt(int64(yy1465))
						}
					}
				}
			}
			if yyr1460 || yy2arr1460 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1460[2] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy1468 := *x.RunAsNonRoot
						yym1469 := z.EncBinary()
						_ = yym1469
						if false {
						} else {
							r.EncodeBool(bool(yy1468))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1460[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy1470 := *x.RunAsNonRoot
						yym1471 := z.EncBinary()
						_ = yym1471
						if false {
						} else {
							r.EncodeBool(bool(yy1470))
						}
					}
				}
			}
			if yyr1460 || yy2arr1460 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1460[3] {
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym1473 := z.EncBinary()
						_ = yym1473
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1460[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("supplementalGroups"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym1474 := z.EncBinary()
						_ = yym1474
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				}
			}
			if yyr1460 || yy2arr1460 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1460[4] {
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy1476 := *x.FSGroup
						yym1477 := z.EncBinary()
						_ = yym1477
						if false {
						} else {
							r.EncodeInt(int64(yy1476))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1460[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsGroup"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy1478 := *x.FSGroup
						yym1479 := z.EncBinary()
						_ = yym1479
						if false {
						} else {
							r.EncodeInt(int64(yy1478))
						}
					}
				}
			}
			if yyr1460 || yy2arr1460 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1480 := z.DecBinary()
	_ = yym1480
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1481 := r.ContainerType()
		if yyct1481 == codecSelferValueTypeMap1234 {
			yyl1481 := r.ReadMapStart()
			if yyl1481 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1481, d)
			}
		} else if yyct1481 == codecSelferValueTypeArray1234 {
			yyl1481 := r.ReadArrayStart()
			if yyl1481 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1481, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1482Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1482Slc
	var yyhl1482 bool = l >= 0
	for yyj1482 := 0; ; yyj1482++ {
		if yyhl1482 {
			if yyj1482 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1482Slc = r.DecodeBytes(yys1482Slc, true, true)
		yys1482 := string(yys1482Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1482 {
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym1485 := z.DecBinary()
				_ = yym1485
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym1487 := z.DecBinary()
				_ = yym1487
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "supplementalGroups":
			if r.TryDecodeAsNil() {
				x.SupplementalGroups = nil
			} else {
				yyv1488 := &x.SupplementalGroups
				yym1489 := z.DecBinary()
				_ = yym1489
				if false {
				} else {
					z.F.DecSliceInt64X(yyv1488, false, d)
				}
			}
		case "fsGroup":
			if r.TryDecodeAsNil() {
				if x.FSGroup != nil {
					x.FSGroup = nil
				}
			} else {
				if x.FSGroup == nil {
					x.FSGroup = new(int64)
				}
				yym1491 := z.DecBinary()
				_ = yym1491
				if false {
				} else {
					*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1482)
		} // end switch yys1482
	} // end for yyj1482
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1492 int
	var yyb1492 bool
	var yyhl1492 bool = l >= 0
	yyj1492++
	if yyhl1492 {
		yyb1492 = yyj1492 > l
	} else {
		yyb1492 = r.CheckBreak()
	}
	if yyb1492 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj1492++
	if yyhl1492 {
		yyb1492 = yyj1492 > l
	} else {
		yyb1492 = r.CheckBreak()
	}
	if yyb1492 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym1495 := z.DecBinary()
		_ = yym1495
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj1492++
	if yyhl1492 {
		yyb1492 = yyj1492 > l
	} else {
		yyb1492 = r.CheckBreak()
	}
	if yyb1492 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym1497 := z.DecBinary()
		_ = yym1497
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj1492++
	if yyhl1492 {
		yyb1492 = yyj1492 > l
	} else {
		yyb1492 = r.CheckBreak()
	}
	if yyb1492 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SupplementalGroups = nil
	} else {
		yyv1498 := &x.SupplementalGroups
		yym1499 := z.DecBinary()
		_ = yym1499
		if false {
		} else {
			z.F.DecSliceInt64X(yyv1498, false, d)
		}
	}
	yyj1492++
	if yyhl1492 {
		yyb1492 = yyj1492 > l
	} else {
		yyb1492 = r.CheckBreak()
	}
	if yyb1492 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FSGroup != nil {
			x.FSGroup = nil
		}
	} else {
		if x.FSGroup == nil {
			x.FSGroup = new(int64)
		}
		yym1501 := z.DecBinary()
		_ = yym1501
		if false {
		} else {
			*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj1492++
		if yyhl1492 {
			yyb1492 = yyj1492 > l
		} else {
			yyb1492 = r.CheckBreak()
		}
		if yyb1492 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1492-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1502 := z.EncBinary()
		_ = yym1502
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1503 := !z.EncBinary()
			yy2arr1503 := z.EncBasicHandle().StructToArray
			var yyq1503 [8]bool
			_, _, _ = yysep1503, yyq1503, yy2arr1503
			const yyr1503 bool = false
			yyq1503[0] = x.Phase != ""
			yyq1503[1] = len(x.Conditions) != 0
			yyq1503[2] = x.Message != ""
			yyq1503[3] = x.Reason != ""
			yyq1503[4] = x.HostIP != ""
			yyq1503[5] = x.PodIP != ""
			yyq1503[6] = x.StartTime != nil
			yyq1503[7] = len(x.ContainerStatuses) != 0
			var yynn1503 int
			if yyr1503 || yy2arr1503 {
				r.EncodeArrayStart(8)
			} else {
				yynn1503 = 0
				for _, b := range yyq1503 {
					if b {
						yynn1503++
					}
				}
				r.EncodeMapStart(yynn1503)
				yynn1503 = 0
			}
			if yyr1503 || yy2arr1503 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1503[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1503[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr1503 || yy2arr1503 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1503[1] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1506 := z.EncBinary()
						_ = yym1506
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1503[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1507 := z.EncBinary()
						_ = yym1507
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr1503 || yy2arr1503 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1503[2] {
					yym1509 := z.EncBinary()
					_ = yym1509
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1503[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1510 := z.EncBinary()
					_ = yym1510
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1503 || yy2arr1503 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1503[3] {
					yym1512 := z.EncBinary()
					_ = yym1512
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1503[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1513 := z.EncBinary()
					_ = yym1513
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1503 || yy2arr1503 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1503[4] {
					yym1515 := z.EncBinary()
					_ = yym1515
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1503[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1516 := z.EncBinary()
					_ = yym1516
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr1503 || yy2arr1503 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1503[5] {
					yym1518 := z.EncBinary()
					_ = yym1518
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1503[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1519 := z.EncBinary()
					_ = yym1519
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				}
			}
			if yyr1503 || yy2arr1503 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1503[6] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym1521 := z.EncBinary()
						_ = yym1521
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym1521 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym1521 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1503[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym1522 := z.EncBinary()
						_ = yym1522
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym1522 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym1522 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr1503 || yy2arr1503 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1503[7] {
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym1524 := z.EncBinary()
						_ = yym1524
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1503[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerStatuses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym1525 := z.EncBinary()
						_ = yym1525
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				}
			}
			if yyr1503 || yy2arr1503 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1526 := z.DecBinary()
	_ = yym1526
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1527 := r.ContainerType()
		if yyct1527 == codecSelferValueTypeMap1234 {
			yyl1527 := r.ReadMapStart()
			if yyl1527 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1527, d)
			}
		} else if yyct1527 == codecSelferValueTypeArray1234 {
			yyl1527 := r.ReadArrayStart()
			if yyl1527 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1527, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1528Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1528Slc
	var yyhl1528 bool = l >= 0
	for yyj1528 := 0; ; yyj1528++ {
		if yyhl1528 {
			if yyj1528 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1528Slc = r.DecodeBytes(yys1528Slc, true, true)
		yys1528 := string(yys1528Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1528 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PodPhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv1530 := &x.Conditions
				yym1531 := z.DecBinary()
				_ = yym1531
				if false {
				} else {
					h.decSlicePodCondition((*[]PodCondition)(yyv1530), d)
				}
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		case "podIP":
			if r.TryDecodeAsNil() {
				x.PodIP = ""
			} else {
				x.PodIP = string(r.DecodeString())
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg2_unversioned.Time)
				}
				yym1537 := z.DecBinary()
				_ = yym1537
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym1537 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym1537 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "containerStatuses":
			if r.TryDecodeAsNil() {
				x.ContainerStatuses = nil
			} else {
				yyv1538 := &x.ContainerStatuses
				yym1539 := z.DecBinary()
				_ = yym1539
				if false {
				} else {
					h.decSliceContainerStatus((*[]ContainerStatus)(yyv1538), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1528)
		} // end switch yys1528
	} // end for yyj1528
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1540 int
	var yyb1540 bool
	var yyhl1540 bool = l >= 0
	yyj1540++
	if yyhl1540 {
		yyb1540 = yyj1540 > l
	} else {
		yyb1540 = r.CheckBreak()
	}
	if yyb1540 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PodPhase(r.DecodeString())
	}
	yyj1540++
	if yyhl1540 {
		yyb1540 = yyj1540 > l
	} else {
		yyb1540 = r.CheckBreak()
	}
	if yyb1540 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv1542 := &x.Conditions
		yym1543 := z.DecBinary()
		_ = yym1543
		if false {
		} else {
			h.decSlicePodCondition((*[]PodCondition)(yyv1542), d)
		}
	}
	yyj1540++
	if yyhl1540 {
		yyb1540 = yyj1540 > l
	} else {
		yyb1540 = r.CheckBreak()
	}
	if yyb1540 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1540++
	if yyhl1540 {
		yyb1540 = yyj1540 > l
	} else {
		yyb1540 = r.CheckBreak()
	}
	if yyb1540 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1540++
	if yyhl1540 {
		yyb1540 = yyj1540 > l
	} else {
		yyb1540 = r.CheckBreak()
	}
	if yyb1540 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	yyj1540++
	if yyhl1540 {
		yyb1540 = yyj1540 > l
	} else {
		yyb1540 = r.CheckBreak()
	}
	if yyb1540 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodIP = ""
	} else {
		x.PodIP = string(r.DecodeString())
	}
	yyj1540++
	if yyhl1540 {
		yyb1540 = yyj1540 > l
	} else {
		yyb1540 = r.CheckBreak()
	}
	if yyb1540 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg2_unversioned.Time)
		}
		yym1549 := z.DecBinary()
		_ = yym1549
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym1549 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym1549 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj1540++
	if yyhl1540 {
		yyb1540 = yyj1540 > l
	} else {
		yyb1540 = r.CheckBreak()
	}
	if yyb1540 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerStatuses = nil
	} else {
		yyv1550 := &x.ContainerStatuses
		yym1551 := z.DecBinary()
		_ = yym1551
		if false {
		} else {
			h.decSliceContainerStatus((*[]ContainerStatus)(yyv1550), d)
		}
	}
	for {
		yyj1540++
		if yyhl1540 {
			yyb1540 = yyj1540 > l
		} else {
			yyb1540 = r.CheckBreak()
		}
		if yyb1540 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1540-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatusResult) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1552 := z.EncBinary()
		_ = yym1552
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1553 := !z.EncBinary()
			yy2arr1553 := z.EncBasicHandle().StructToArray
			var yyq1553 [4]bool
			_, _, _ = yysep1553, yyq1553, yy2arr1553
			const yyr1553 bool = false
			yyq1553[0] = x.Kind != ""
			yyq1553[1] = x.APIVersion != ""
			yyq1553[2] = true
			yyq1553[3] = true
			var yynn1553 int
			if yyr1553 || yy2arr1553 {
				r.EncodeArrayStart(4)
			} else {
				yynn1553 = 0
				for _, b := range yyq1553 {
					if b {
						yynn1553++
					}
				}
				r.EncodeMapStart(yynn1553)
				yynn1553 = 0
			}
			if yyr1553 || yy2arr1553 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1553[0] {
					yym1555 := z.EncBinary()
					_ = yym1555
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1553[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1556 := z.EncBinary()
					_ = yym1556
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1553 || yy2arr1553 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1553[1] {
					yym1558 := z.EncBinary()
					_ = yym1558
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1553[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1559 := z.EncBinary()
					_ = yym1559
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1553 || yy2arr1553 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1553[2] {
					yy1561 := &x.ObjectMeta
					yy1561.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1553[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1562 := &x.ObjectMeta
					yy1562.CodecEncodeSelf(e)
				}
			}
			if yyr1553 || yy2arr1553 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1553[3] {
					yy1564 := &x.Status
					yy1564.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1553[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1565 := &x.Status
					yy1565.CodecEncodeSelf(e)
				}
			}
			if yyr1553 || yy2arr1553 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatusResult) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1566 := z.DecBinary()
	_ = yym1566
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1567 := r.ContainerType()
		if yyct1567 == codecSelferValueTypeMap1234 {
			yyl1567 := r.ReadMapStart()
			if yyl1567 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1567, d)
			}
		} else if yyct1567 == codecSelferValueTypeArray1234 {
			yyl1567 := r.ReadArrayStart()
			if yyl1567 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1567, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatusResult) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1568Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1568Slc
	var yyhl1568 bool = l >= 0
	for yyj1568 := 0; ; yyj1568++ {
		if yyhl1568 {
			if yyj1568 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1568Slc = r.DecodeBytes(yys1568Slc, true, true)
		yys1568 := string(yys1568Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1568 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1571 := &x.ObjectMeta
				yyv1571.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv1572 := &x.Status
				yyv1572.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1568)
		} // end switch yys1568
	} // end for yyj1568
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatusResult) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1573 int
	var yyb1573 bool
	var yyhl1573 bool = l >= 0
	yyj1573++
	if yyhl1573 {
		yyb1573 = yyj1573 > l
	} else {
		yyb1573 = r.CheckBreak()
	}
	if yyb1573 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1573++
	if yyhl1573 {
		yyb1573 = yyj1573 > l
	} else {
		yyb1573 = r.CheckBreak()
	}
	if yyb1573 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1573++
	if yyhl1573 {
		yyb1573 = yyj1573 > l
	} else {
		yyb1573 = r.CheckBreak()
	}
	if yyb1573 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1576 := &x.ObjectMeta
		yyv1576.CodecDecodeSelf(d)
	}
	yyj1573++
	if yyhl1573 {
		yyb1573 = yyj1573 > l
	} else {
		yyb1573 = r.CheckBreak()
	}
	if yyb1573 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv1577 := &x.Status
		yyv1577.CodecDecodeSelf(d)
	}
	for {
		yyj1573++
		if yyhl1573 {
			yyb1573 = yyj1573 > l
		} else {
			yyb1573 = r.CheckBreak()
		}
		if yyb1573 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1573-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Pod) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1578 := z.EncBinary()
		_ = yym1578
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1579 := !z.EncBinary()
			yy2arr1579 := z.EncBasicHandle().StructToArray
			var yyq1579 [5]bool
			_, _, _ = yysep1579, yyq1579, yy2arr1579
			const yyr1579 bool = false
			yyq1579[0] = x.Kind != ""
			yyq1579[1] = x.APIVersion != ""
			yyq1579[2] = true
			yyq1579[3] = true
			yyq1579[4] = true
			var yynn1579 int
			if yyr1579 || yy2arr1579 {
				r.EncodeArrayStart(5)
			} else {
				yynn1579 = 0
				for _, b := range yyq1579 {
					if b {
						yynn1579++
					}
				}
				r.EncodeMapStart(yynn1579)
				yynn1579 = 0
			}
			if yyr1579 || yy2arr1579 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1579[0] {
					yym1581 := z.EncBinary()
					_ = yym1581
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1579[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1582 := z.EncBinary()
					_ = yym1582
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1579 || yy2arr1579 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1579[1] {
					yym1584 := z.EncBinary()
					_ = yym1584
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1579[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1585 := z.EncBinary()
					_ = yym1585
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1579 || yy2arr1579 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1579[2] {
					yy1587 := &x.ObjectMeta
					yy1587.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1579[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1588 := &x.ObjectMeta
					yy1588.CodecEncodeSelf(e)
				}
			}
			if yyr1579 || yy2arr1579 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1579[3] {
					yy1590 := &x.Spec
					yy1590.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1579[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1591 := &x.Spec
					yy1591.CodecEncodeSelf(e)
				}
			}
			if yyr1579 || yy2arr1579 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1579[4] {
					yy1593 := &x.Status
					yy1593.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1579[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1594 := &x.Status
					yy1594.CodecEncodeSelf(e)
				}
			}
			if yyr1579 || yy2arr1579 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Pod) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1595 := z.DecBinary()
	_ = yym1595
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1596 := r.ContainerType()
		if yyct1596 == codecSelferValueTypeMap1234 {
			yyl1596 := r.ReadMapStart()
			if yyl1596 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1596, d)
			}
		} else if yyct1596 == codecSelferValueTypeArray1234 {
			yyl1596 := r.ReadArrayStart()
			if yyl1596 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1596, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Pod) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1597Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1597Slc
	var yyhl1597 bool = l >= 0
	for yyj1597 := 0; ; yyj1597++ {
		if yyhl1597 {
			if yyj1597 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1597Slc = r.DecodeBytes(yys1597Slc, true, true)
		yys1597 := string(yys1597Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1597 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1600 := &x.ObjectMeta
				yyv1600.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv1601 := &x.Spec
				yyv1601.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv1602 := &x.Status
				yyv1602.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1597)
		} // end switch yys1597
	} // end for yyj1597
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Pod) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1603 int
	var yyb1603 bool
	var yyhl1603 bool = l >= 0
	yyj1603++
	if yyhl1603 {
		yyb1603 = yyj1603 > l
	} else {
		yyb1603 = r.CheckBreak()
	}
	if yyb1603 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1603++
	if yyhl1603 {
		yyb1603 = yyj1603 > l
	} else {
		yyb1603 = r.CheckBreak()
	}
	if yyb1603 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1603++
	if yyhl1603 {
		yyb1603 = yyj1603 > l
	} else {
		yyb1603 = r.CheckBreak()
	}
	if yyb1603 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1606 := &x.ObjectMeta
		yyv1606.CodecDecodeSelf(d)
	}
	yyj1603++
	if yyhl1603 {
		yyb1603 = yyj1603 > l
	} else {
		yyb1603 = r.CheckBreak()
	}
	if yyb1603 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv1607 := &x.Spec
		yyv1607.CodecDecodeSelf(d)
	}
	yyj1603++
	if yyhl1603 {
		yyb1603 = yyj1603 > l
	} else {
		yyb1603 = r.CheckBreak()
	}
	if yyb1603 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv1608 := &x.Status
		yyv1608.CodecDecodeSelf(d)
	}
	for {
		yyj1603++
		if yyhl1603 {
			yyb1603 = yyj1603 > l
		} else {
			yyb1603 = r.CheckBreak()
		}
		if yyb1603 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1603-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1609 := z.EncBinary()
		_ = yym1609
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1610 := !z.EncBinary()
			yy2arr1610 := z.EncBasicHandle().StructToArray
			var yyq1610 [4]bool
			_, _, _ = yysep1610, yyq1610, yy2arr1610
			const yyr1610 bool = false
			yyq1610[0] = x.Kind != ""
			yyq1610[1] = x.APIVersion != ""
			yyq1610[2] = true
			var yynn1610 int
			if yyr1610 || yy2arr1610 {
				r.EncodeArrayStart(4)
			} else {
				yynn1610 = 1
				for _, b := range yyq1610 {
					if b {
						yynn1610++
					}
				}
				r.EncodeMapStart(yynn1610)
				yynn1610 = 0
			}
			if yyr1610 || yy2arr1610 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1610[0] {
					yym1612 := z.EncBinary()
					_ = yym1612
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1610[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1613 := z.EncBinary()
					_ = yym1613
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1610 || yy2arr1610 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1610[1] {
					yym1615 := z.EncBinary()
					_ = yym1615
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1610[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1616 := z.EncBinary()
					_ = yym1616
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1610 || yy2arr1610 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1610[2] {
					yy1618 := &x.ListMeta
					yym1619 := z.EncBinary()
					_ = yym1619
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1618) {
					} else {
						z.EncFallback(yy1618)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1610[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1620 := &x.ListMeta
					yym1621 := z.EncBinary()
					_ = yym1621
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1620) {
					} else {
						z.EncFallback(yy1620)
					}
				}
			}
			if yyr1610 || yy2arr1610 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1623 := z.EncBinary()
					_ = yym1623
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1624 := z.EncBinary()
					_ = yym1624
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			}
			if yyr1610 || yy2arr1610 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1625 := z.DecBinary()
	_ = yym1625
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1626 := r.ContainerType()
		if yyct1626 == codecSelferValueTypeMap1234 {
			yyl1626 := r.ReadMapStart()
			if yyl1626 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1626, d)
			}
		} else if yyct1626 == codecSelferValueTypeArray1234 {
			yyl1626 := r.ReadArrayStart()
			if yyl1626 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1626, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1627Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1627Slc
	var yyhl1627 bool = l >= 0
	for yyj1627 := 0; ; yyj1627++ {
		if yyhl1627 {
			if yyj1627 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1627Slc = r.DecodeBytes(yys1627Slc, true, true)
		yys1627 := string(yys1627Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1627 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1630 := &x.ListMeta
				yym1631 := z.DecBinary()
				_ = yym1631
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1630) {
				} else {
					z.DecFallback(yyv1630, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1632 := &x.Items
				yym1633 := z.DecBinary()
				_ = yym1633
				if false {
				} else {
					h.decSlicePod((*[]Pod)(yyv1632), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1627)
		} // end switch yys1627
	} // end for yyj1627
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1634 int
	var yyb1634 bool
	var yyhl1634 bool = l >= 0
	yyj1634++
	if yyhl1634 {
		yyb1634 = yyj1634 > l
	} else {
		yyb1634 = r.CheckBreak()
	}
	if yyb1634 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1634++
	if yyhl1634 {
		yyb1634 = yyj1634 > l
	} else {
		yyb1634 = r.CheckBreak()
	}
	if yyb1634 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1634++
	if yyhl1634 {
		yyb1634 = yyj1634 > l
	} else {
		yyb1634 = r.CheckBreak()
	}
	if yyb1634 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1637 := &x.ListMeta
		yym1638 := z.DecBinary()
		_ = yym1638
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1637) {
		} else {
			z.DecFallback(yyv1637, false)
		}
	}
	yyj1634++
	if yyhl1634 {
		yyb1634 = yyj1634 > l
	} else {
		yyb1634 = r.CheckBreak()
	}
	if yyb1634 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1639 := &x.Items
		yym1640 := z.DecBinary()
		_ = yym1640
		if false {
		} else {
			h.decSlicePod((*[]Pod)(yyv1639), d)
		}
	}
	for {
		yyj1634++
		if yyhl1634 {
			yyb1634 = yyj1634 > l
		} else {
			yyb1634 = r.CheckBreak()
		}
		if yyb1634 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1634-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1641 := z.EncBinary()
		_ = yym1641
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1642 := !z.EncBinary()
			yy2arr1642 := z.EncBasicHandle().StructToArray
			var yyq1642 [2]bool
			_, _, _ = yysep1642, yyq1642, yy2arr1642
			const yyr1642 bool = false
			yyq1642[0] = true
			yyq1642[1] = true
			var yynn1642 int
			if yyr1642 || yy2arr1642 {
				r.EncodeArrayStart(2)
			} else {
				yynn1642 = 0
				for _, b := range yyq1642 {
					if b {
						yynn1642++
					}
				}
				r.EncodeMapStart(yynn1642)
				yynn1642 = 0
			}
			if yyr1642 || yy2arr1642 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1642[0] {
					yy1644 := &x.ObjectMeta
					yy1644.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1642[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1645 := &x.ObjectMeta
					yy1645.CodecEncodeSelf(e)
				}
			}
			if yyr1642 || yy2arr1642 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1642[1] {
					yy1647 := &x.Spec
					yy1647.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1642[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1648 := &x.Spec
					yy1648.CodecEncodeSelf(e)
				}
			}
			if yyr1642 || yy2arr1642 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1649 := z.DecBinary()
	_ = yym1649
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1650 := r.ContainerType()
		if yyct1650 == codecSelferValueTypeMap1234 {
			yyl1650 := r.ReadMapStart()
			if yyl1650 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1650, d)
			}
		} else if yyct1650 == codecSelferValueTypeArray1234 {
			yyl1650 := r.ReadArrayStart()
			if yyl1650 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1650, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1651Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1651Slc
	var yyhl1651 bool = l >= 0
	for yyj1651 := 0; ; yyj1651++ {
		if yyhl1651 {
			if yyj1651 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1651Slc = r.DecodeBytes(yys1651Slc, true, true)
		yys1651 := string(yys1651Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1651 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1652 := &x.ObjectMeta
				yyv1652.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv1653 := &x.Spec
				yyv1653.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1651)
		} // end switch yys1651
	} // end for yyj1651
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1654 int
	var yyb1654 bool
	var yyhl1654 bool = l >= 0
	yyj1654++
	if yyhl1654 {
		yyb1654 = yyj1654 > l
	} else {
		yyb1654 = r.CheckBreak()
	}
	if yyb1654 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1655 := &x.ObjectMeta
		yyv1655.CodecDecodeSelf(d)
	}
	yyj1654++
	if yyhl1654 {
		yyb1654 = yyj1654 > l
	} else {
		yyb1654 = r.CheckBreak()
	}
	if yyb1654 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv1656 := &x.Spec
		yyv1656.CodecDecodeSelf(d)
	}
	for {
		yyj1654++
		if yyhl1654 {
			yyb1654 = yyj1654 > l
		} else {
			yyb1654 = r.CheckBreak()
		}
		if yyb1654 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1654-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1657 := z.EncBinary()
		_ = yym1657
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1658 := !z.EncBinary()
			yy2arr1658 := z.EncBasicHandle().StructToArray
			var yyq1658 [4]bool
			_, _, _ = yysep1658, yyq1658, yy2arr1658
			const yyr1658 bool = false
			yyq1658[0] = x.Kind != ""
			yyq1658[1] = x.APIVersion != ""
			yyq1658[2] = true
			yyq1658[3] = true
			var yynn1658 int
			if yyr1658 || yy2arr1658 {
				r.EncodeArrayStart(4)
			} else {
				yynn1658 = 0
				for _, b := range yyq1658 {
					if b {
						yynn1658++
					}
				}
				r.EncodeMapStart(yynn1658)
				yynn1658 = 0
			}
			if yyr1658 || yy2arr1658 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1658[0] {
					yym1660 := z.EncBinary()
					_ = yym1660
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1658[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1661 := z.EncBinary()
					_ = yym1661
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1658 || yy2arr1658 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1658[1] {
					yym1663 := z.EncBinary()
					_ = yym1663
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1658[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1664 := z.EncBinary()
					_ = yym1664
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1658 || yy2arr1658 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1658[2] {
					yy1666 := &x.ObjectMeta
					yy1666.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1658[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1667 := &x.ObjectMeta
					yy1667.CodecEncodeSelf(e)
				}
			}
			if yyr1658 || yy2arr1658 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1658[3] {
					yy1669 := &x.Template
					yy1669.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1658[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1670 := &x.Template
					yy1670.CodecEncodeSelf(e)
				}
			}
			if yyr1658 || yy2arr1658 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1671 := z.DecBinary()
	_ = yym1671
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1672 := r.ContainerType()
		if yyct1672 == codecSelferValueTypeMap1234 {
			yyl1672 := r.ReadMapStart()
			if yyl1672 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1672, d)
			}
		} else if yyct1672 == codecSelferValueTypeArray1234 {
			yyl1672 := r.ReadArrayStart()
			if yyl1672 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1672, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1673Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1673Slc
	var yyhl1673 bool = l >= 0
	for yyj1673 := 0; ; yyj1673++ {
		if yyhl1673 {
			if yyj1673 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1673Slc = r.DecodeBytes(yys1673Slc, true, true)
		yys1673 := string(yys1673Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1673 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1676 := &x.ObjectMeta
				yyv1676.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = PodTemplateSpec{}
			} else {
				yyv1677 := &x.Template
				yyv1677.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1673)
		} // end switch yys1673
	} // end for yyj1673
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1678 int
	var yyb1678 bool
	var yyhl1678 bool = l >= 0
	yyj1678++
	if yyhl1678 {
		yyb1678 = yyj1678 > l
	} else {
		yyb1678 = r.CheckBreak()
	}
	if yyb1678 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1678++
	if yyhl1678 {
		yyb1678 = yyj1678 > l
	} else {
		yyb1678 = r.CheckBreak()
	}
	if yyb1678 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1678++
	if yyhl1678 {
		yyb1678 = yyj1678 > l
	} else {
		yyb1678 = r.CheckBreak()
	}
	if yyb1678 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1681 := &x.ObjectMeta
		yyv1681.CodecDecodeSelf(d)
	}
	yyj1678++
	if yyhl1678 {
		yyb1678 = yyj1678 > l
	} else {
		yyb1678 = r.CheckBreak()
	}
	if yyb1678 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = PodTemplateSpec{}
	} else {
		yyv1682 := &x.Template
		yyv1682.CodecDecodeSelf(d)
	}
	for {
		yyj1678++
		if yyhl1678 {
			yyb1678 = yyj1678 > l
		} else {
			yyb1678 = r.CheckBreak()
		}
		if yyb1678 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1678-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1683 := z.EncBinary()
		_ = yym1683
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1684 := !z.EncBinary()
			yy2arr1684 := z.EncBasicHandle().StructToArray
			var yyq1684 [4]bool
			_, _, _ = yysep1684, yyq1684, yy2arr1684
			const yyr1684 bool = false
			yyq1684[0] = x.Kind != ""
			yyq1684[1] = x.APIVersion != ""
			yyq1684[2] = true
			var yynn1684 int
			if yyr1684 || yy2arr1684 {
				r.EncodeArrayStart(4)
			} else {
				yynn1684 = 1
				for _, b := range yyq1684 {
					if b {
						yynn1684++
					}
				}
				r.EncodeMapStart(yynn1684)
				yynn1684 = 0
			}
			if yyr1684 || yy2arr1684 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1684[0] {
					yym1686 := z.EncBinary()
					_ = yym1686
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1684[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1687 := z.EncBinary()
					_ = yym1687
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1684 || yy2arr1684 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1684[1] {
					yym1689 := z.EncBinary()
					_ = yym1689
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1684[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1690 := z.EncBinary()
					_ = yym1690
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1684 || yy2arr1684 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1684[2] {
					yy1692 := &x.ListMeta
					yym1693 := z.EncBinary()
					_ = yym1693
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1692) {
					} else {
						z.EncFallback(yy1692)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1684[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1694 := &x.ListMeta
					yym1695 := z.EncBinary()
					_ = yym1695
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1694) {
					} else {
						z.EncFallback(yy1694)
					}
				}
			}
			if yyr1684 || yy2arr1684 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1697 := z.EncBinary()
					_ = yym1697
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1698 := z.EncBinary()
					_ = yym1698
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			}
			if yyr1684 || yy2arr1684 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1699 := z.DecBinary()
	_ = yym1699
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1700 := r.ContainerType()
		if yyct1700 == codecSelferValueTypeMap1234 {
			yyl1700 := r.ReadMapStart()
			if yyl1700 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1700, d)
			}
		} else if yyct1700 == codecSelferValueTypeArray1234 {
			yyl1700 := r.ReadArrayStart()
			if yyl1700 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1700, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1701Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1701Slc
	var yyhl1701 bool = l >= 0
	for yyj1701 := 0; ; yyj1701++ {
		if yyhl1701 {
			if yyj1701 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1701Slc = r.DecodeBytes(yys1701Slc, true, true)
		yys1701 := string(yys1701Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1701 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1704 := &x.ListMeta
				yym1705 := z.DecBinary()
				_ = yym1705
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1704) {
				} else {
					z.DecFallback(yyv1704, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1706 := &x.Items
				yym1707 := z.DecBinary()
				_ = yym1707
				if false {
				} else {
					h.decSlicePodTemplate((*[]PodTemplate)(yyv1706), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1701)
		} // end switch yys1701
	} // end for yyj1701
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1708 int
	var yyb1708 bool
	var yyhl1708 bool = l >= 0
	yyj1708++
	if yyhl1708 {
		yyb1708 = yyj1708 > l
	} else {
		yyb1708 = r.CheckBreak()
	}
	if yyb1708 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1708++
	if yyhl1708 {
		yyb1708 = yyj1708 > l
	} else {
		yyb1708 = r.CheckBreak()
	}
	if yyb1708 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1708++
	if yyhl1708 {
		yyb1708 = yyj1708 > l
	} else {
		yyb1708 = r.CheckBreak()
	}
	if yyb1708 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1711 := &x.ListMeta
		yym1712 := z.DecBinary()
		_ = yym1712
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1711) {
		} else {
			z.DecFallback(yyv1711, false)
		}
	}
	yyj1708++
	if yyhl1708 {
		yyb1708 = yyj1708 > l
	} else {
		yyb1708 = r.CheckBreak()
	}
	if yyb1708 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1713 := &x.Items
		yym1714 := z.DecBinary()
		_ = yym1714
		if false {
		} else {
			h.decSlicePodTemplate((*[]PodTemplate)(yyv1713), d)
		}
	}
	for {
		yyj1708++
		if yyhl1708 {
			yyb1708 = yyj1708 > l
		} else {
			yyb1708 = r.CheckBreak()
		}
		if yyb1708 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1708-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1715 := z.EncBinary()
		_ = yym1715
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1716 := !z.EncBinary()
			yy2arr1716 := z.EncBasicHandle().StructToArray
			var yyq1716 [3]bool
			_, _, _ = yysep1716, yyq1716, yy2arr1716
			const yyr1716 bool = false
			yyq1716[0] = x.Replicas != nil
			yyq1716[1] = len(x.Selector) != 0
			yyq1716[2] = x.Template != nil
			var yynn1716 int
			if yyr1716 || yy2arr1716 {
				r.EncodeArrayStart(3)
			} else {
				yynn1716 = 0
				for _, b := range yyq1716 {
					if b {
						yynn1716++
					}
				}
				r.EncodeMapStart(yynn1716)
				yynn1716 = 0
			}
			if yyr1716 || yy2arr1716 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1716[0] {
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy1718 := *x.Replicas
						yym1719 := z.EncBinary()
						_ = yym1719
						if false {
						} else {
							r.EncodeInt(int64(yy1718))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1716[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy1720 := *x.Replicas
						yym1721 := z.EncBinary()
						_ = yym1721
						if false {
						} else {
							r.EncodeInt(int64(yy1720))
						}
					}
				}
			}
			if yyr1716 || yy2arr1716 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1716[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym1723 := z.EncBinary()
						_ = yym1723
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1716[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym1724 := z.EncBinary()
						_ = yym1724
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr1716 || yy2arr1716 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1716[2] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1716[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1716 || yy2arr1716 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1726 := z.DecBinary()
	_ = yym1726
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1727 := r.ContainerType()
		if yyct1727 == codecSelferValueTypeMap1234 {
			yyl1727 := r.ReadMapStart()
			if yyl1727 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1727, d)
			}
		} else if yyct1727 == codecSelferValueTypeArray1234 {
			yyl1727 := r.ReadArrayStart()
			if yyl1727 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1727, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1728Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1728Slc
	var yyhl1728 bool = l >= 0
	for yyj1728 := 0; ; yyj1728++ {
		if yyhl1728 {
			if yyj1728 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1728Slc = r.DecodeBytes(yys1728Slc, true, true)
		yys1728 := string(yys1728Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1728 {
		case "replicas":
			if r.TryDecodeAsNil() {
				if x.Replicas != nil {
					x.Replicas = nil
				}
			} else {
				if x.Replicas == nil {
					x.Replicas = new(int32)
				}
				yym1730 := z.DecBinary()
				_ = yym1730
				if false {
				} else {
					*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv1731 := &x.Selector
				yym1732 := z.DecBinary()
				_ = yym1732
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1731, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1728)
		} // end switch yys1728
	} // end for yyj1728
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1734 int
	var yyb1734 bool
	var yyhl1734 bool = l >= 0
	yyj1734++
	if yyhl1734 {
		yyb1734 = yyj1734 > l
	} else {
		yyb1734 = r.CheckBreak()
	}
	if yyb1734 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Replicas != nil {
			x.Replicas = nil
		}
	} else {
		if x.Replicas == nil {
			x.Replicas = new(int32)
		}
		yym1736 := z.DecBinary()
		_ = yym1736
		if false {
		} else {
			*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
		}
	}
	yyj1734++
	if yyhl1734 {
		yyb1734 = yyj1734 > l
	} else {
		yyb1734 = r.CheckBreak()
	}
	if yyb1734 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv1737 := &x.Selector
		yym1738 := z.DecBinary()
		_ = yym1738
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1737, false, d)
		}
	}
	yyj1734++
	if yyhl1734 {
		yyb1734 = yyj1734 > l
	} else {
		yyb1734 = r.CheckBreak()
	}
	if yyb1734 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj1734++
		if yyhl1734 {
			yyb1734 = yyj1734 > l
		} else {
			yyb1734 = r.CheckBreak()
		}
		if yyb1734 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1734-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1740 := z.EncBinary()
		_ = yym1740
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1741 := !z.EncBinary()
			yy2arr1741 := z.EncBasicHandle().StructToArray
			var yyq1741 [2]bool
			_, _, _ = yysep1741, yyq1741, yy2arr1741
			const yyr1741 bool = false
			yyq1741[1] = x.ObservedGeneration != 0
			var yynn1741 int
			if yyr1741 || yy2arr1741 {
				r.EncodeArrayStart(2)
			} else {
				yynn1741 = 1
				for _, b := range yyq1741 {
					if b {
						yynn1741++
					}
				}
				r.EncodeMapStart(yynn1741)
				yynn1741 = 0
			}
			if yyr1741 || yy2arr1741 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1743 := z.EncBinary()
				_ = yym1743
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1744 := z.EncBinary()
				_ = yym1744
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr1741 || yy2arr1741 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1741[1] {
					yym1746 := z.EncBinary()
					_ = yym1746
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1741[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1747 := z.EncBinary()
					_ = yym1747
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr1741 || yy2arr1741 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1748 := z.DecBinary()
	_ = yym1748
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1749 := r.ContainerType()
		if yyct1749 == codecSelferValueTypeMap1234 {
			yyl1749 := r.ReadMapStart()
			if yyl1749 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1749, d)
			}
		} else if yyct1749 == codecSelferValueTypeArray1234 {
			yyl1749 := r.ReadArrayStart()
			if yyl1749 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1749, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1750Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1750Slc
	var yyhl1750 bool = l >= 0
	for yyj1750 := 0; ; yyj1750++ {
		if yyhl1750 {
			if yyj1750 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1750Slc = r.DecodeBytes(yys1750Slc, true, true)
		yys1750 := string(yys1750Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1750 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1750)
		} // end switch yys1750
	} // end for yyj1750
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1753 int
	var yyb1753 bool
	var yyhl1753 bool = l >= 0
	yyj1753++
	if yyhl1753 {
		yyb1753 = yyj1753 > l
	} else {
		yyb1753 = r.CheckBreak()
	}
	if yyb1753 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj1753++
	if yyhl1753 {
		yyb1753 = yyj1753 > l
	} else {
		yyb1753 = r.CheckBreak()
	}
	if yyb1753 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	for {
		yyj1753++
		if yyhl1753 {
			yyb1753 = yyj1753 > l
		} else {
			yyb1753 = r.CheckBreak()
		}
		if yyb1753 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1753-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationController) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1756 := z.EncBinary()
		_ = yym1756
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1757 := !z.EncBinary()
			yy2arr1757 := z.EncBasicHandle().StructToArray
			var yyq1757 [5]bool
			_, _, _ = yysep1757, yyq1757, yy2arr1757
			const yyr1757 bool = false
			yyq1757[0] = x.Kind != ""
			yyq1757[1] = x.APIVersion != ""
			yyq1757[2] = true
			yyq1757[3] = true
			yyq1757[4] = true
			var yynn1757 int
			if yyr1757 || yy2arr1757 {
				r.EncodeArrayStart(5)
			} else {
				yynn1757 = 0
				for _, b := range yyq1757 {
					if b {
						yynn1757++
					}
				}
				r.EncodeMapStart(yynn1757)
				yynn1757 = 0
			}
			if yyr1757 || yy2arr1757 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1757[0] {
					yym1759 := z.EncBinary()
					_ = yym1759
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1757[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1760 := z.EncBinary()
					_ = yym1760
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1757 || yy2arr1757 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1757[1] {
					yym1762 := z.EncBinary()
					_ = yym1762
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1757[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1763 := z.EncBinary()
					_ = yym1763
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1757 || yy2arr1757 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1757[2] {
					yy1765 := &x.ObjectMeta
					yy1765.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1757[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1766 := &x.ObjectMeta
					yy1766.CodecEncodeSelf(e)
				}
			}
			if yyr1757 || yy2arr1757 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1757[3] {
					yy1768 := &x.Spec
					yy1768.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1757[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1769 := &x.Spec
					yy1769.CodecEncodeSelf(e)
				}
			}
			if yyr1757 || yy2arr1757 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1757[4] {
					yy1771 := &x.Status
					yy1771.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1757[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1772 := &x.Status
					yy1772.CodecEncodeSelf(e)
				}
			}
			if yyr1757 || yy2arr1757 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationController) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1773 := z.DecBinary()
	_ = yym1773
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1774 := r.ContainerType()
		if yyct1774 == codecSelferValueTypeMap1234 {
			yyl1774 := r.ReadMapStart()
			if yyl1774 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1774, d)
			}
		} else if yyct1774 == codecSelferValueTypeArray1234 {
			yyl1774 := r.ReadArrayStart()
			if yyl1774 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1774, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationController) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1775Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1775Slc
	var yyhl1775 bool = l >= 0
	for yyj1775 := 0; ; yyj1775++ {
		if yyhl1775 {
			if yyj1775 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1775Slc = r.DecodeBytes(yys1775Slc, true, true)
		yys1775 := string(yys1775Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1775 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1778 := &x.ObjectMeta
				yyv1778.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicationControllerSpec{}
			} else {
				yyv1779 := &x.Spec
				yyv1779.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicationControllerStatus{}
			} else {
				yyv1780 := &x.Status
				yyv1780.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1775)
		} // end switch yys1775
	} // end for yyj1775
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationController) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1781 int
	var yyb1781 bool
	var yyhl1781 bool = l >= 0
	yyj1781++
	if yyhl1781 {
		yyb1781 = yyj1781 > l
	} else {
		yyb1781 = r.CheckBreak()
	}
	if yyb1781 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1781++
	if yyhl1781 {
		yyb1781 = yyj1781 > l
	} else {
		yyb1781 = r.CheckBreak()
	}
	if yyb1781 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1781++
	if yyhl1781 {
		yyb1781 = yyj1781 > l
	} else {
		yyb1781 = r.CheckBreak()
	}
	if yyb1781 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1784 := &x.ObjectMeta
		yyv1784.CodecDecodeSelf(d)
	}
	yyj1781++
	if yyhl1781 {
		yyb1781 = yyj1781 > l
	} else {
		yyb1781 = r.CheckBreak()
	}
	if yyb1781 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ReplicationControllerSpec{}
	} else {
		yyv1785 := &x.Spec
		yyv1785.CodecDecodeSelf(d)
	}
	yyj1781++
	if yyhl1781 {
		yyb1781 = yyj1781 > l
	} else {
		yyb1781 = r.CheckBreak()
	}
	if yyb1781 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ReplicationControllerStatus{}
	} else {
		yyv1786 := &x.Status
		yyv1786.CodecDecodeSelf(d)
	}
	for {
		yyj1781++
		if yyhl1781 {
			yyb1781 = yyj1781 > l
		} else {
			yyb1781 = r.CheckBreak()
		}
		if yyb1781 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1781-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1787 := z.EncBinary()
		_ = yym1787
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1788 := !z.EncBinary()
			yy2arr1788 := z.EncBasicHandle().StructToArray
			var yyq1788 [4]bool
			_, _, _ = yysep1788, yyq1788, yy2arr1788
			const yyr1788 bool = false
			yyq1788[0] = x.Kind != ""
			yyq1788[1] = x.APIVersion != ""
			yyq1788[2] = true
			var yynn1788 int
			if yyr1788 || yy2arr1788 {
				r.EncodeArrayStart(4)
			} else {
				yynn1788 = 1
				for _, b := range yyq1788 {
					if b {
						yynn1788++
					}
				}
				r.EncodeMapStart(yynn1788)
				yynn1788 = 0
			}
			if yyr1788 || yy2arr1788 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1788[0] {
					yym1790 := z.EncBinary()
					_ = yym1790
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1788[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1791 := z.EncBinary()
					_ = yym1791
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1788 || yy2arr1788 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1788[1] {
					yym1793 := z.EncBinary()
					_ = yym1793
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1788[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1794 := z.EncBinary()
					_ = yym1794
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1788 || yy2arr1788 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1788[2] {
					yy1796 := &x.ListMeta
					yym1797 := z.EncBinary()
					_ = yym1797
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1796) {
					} else {
						z.EncFallback(yy1796)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1788[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1798 := &x.ListMeta
					yym1799 := z.EncBinary()
					_ = yym1799
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1798) {
					} else {
						z.EncFallback(yy1798)
					}
				}
			}
			if yyr1788 || yy2arr1788 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1801 := z.EncBinary()
					_ = yym1801
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1802 := z.EncBinary()
					_ = yym1802
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			}
			if yyr1788 || yy2arr1788 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1803 := z.DecBinary()
	_ = yym1803
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1804 := r.ContainerType()
		if yyct1804 == codecSelferValueTypeMap1234 {
			yyl1804 := r.ReadMapStart()
			if yyl1804 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1804, d)
			}
		} else if yyct1804 == codecSelferValueTypeArray1234 {
			yyl1804 := r.ReadArrayStart()
			if yyl1804 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1804, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1805Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1805Slc
	var yyhl1805 bool = l >= 0
	for yyj1805 := 0; ; yyj1805++ {
		if yyhl1805 {
			if yyj1805 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1805Slc = r.DecodeBytes(yys1805Slc, true, true)
		yys1805 := string(yys1805Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1805 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1808 := &x.ListMeta
				yym1809 := z.DecBinary()
				_ = yym1809
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1808) {
				} else {
					z.DecFallback(yyv1808, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1810 := &x.Items
				yym1811 := z.DecBinary()
				_ = yym1811
				if false {
				} else {
					h.decSliceReplicationController((*[]ReplicationController)(yyv1810), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1805)
		} // end switch yys1805
	} // end for yyj1805
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1812 int
	var yyb1812 bool
	var yyhl1812 bool = l >= 0
	yyj1812++
	if yyhl1812 {
		yyb1812 = yyj1812 > l
	} else {
		yyb1812 = r.CheckBreak()
	}
	if yyb1812 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1812++
	if yyhl1812 {
		yyb1812 = yyj1812 > l
	} else {
		yyb1812 = r.CheckBreak()
	}
	if yyb1812 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1812++
	if yyhl1812 {
		yyb1812 = yyj1812 > l
	} else {
		yyb1812 = r.CheckBreak()
	}
	if yyb1812 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1815 := &x.ListMeta
		yym1816 := z.DecBinary()
		_ = yym1816
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1815) {
		} else {
			z.DecFallback(yyv1815, false)
		}
	}
	yyj1812++
	if yyhl1812 {
		yyb1812 = yyj1812 > l
	} else {
		yyb1812 = r.CheckBreak()
	}
	if yyb1812 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1817 := &x.Items
		yym1818 := z.DecBinary()
		_ = yym1818
		if false {
		} else {
			h.decSliceReplicationController((*[]ReplicationController)(yyv1817), d)
		}
	}
	for {
		yyj1812++
		if yyhl1812 {
			yyb1812 = yyj1812 > l
		} else {
			yyb1812 = r.CheckBreak()
		}
		if yyb1812 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1812-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ServiceAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1819 := z.EncBinary()
	_ = yym1819
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1820 := z.DecBinary()
	_ = yym1820
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ServiceType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1821 := z.EncBinary()
	_ = yym1821
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1822 := z.DecBinary()
	_ = yym1822
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ServiceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1823 := z.EncBinary()
		_ = yym1823
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1824 := !z.EncBinary()
			yy2arr1824 := z.EncBasicHandle().StructToArray
			var yyq1824 [1]bool
			_, _, _ = yysep1824, yyq1824, yy2arr1824
			const yyr1824 bool = false
			yyq1824[0] = true
			var yynn1824 int
			if yyr1824 || yy2arr1824 {
				r.EncodeArrayStart(1)
			} else {
				yynn1824 = 0
				for _, b := range yyq1824 {
					if b {
						yynn1824++
					}
				}
				r.EncodeMapStart(yynn1824)
				yynn1824 = 0
			}
			if yyr1824 || yy2arr1824 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1824[0] {
					yy1826 := &x.LoadBalancer
					yy1826.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1824[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1827 := &x.LoadBalancer
					yy1827.CodecEncodeSelf(e)
				}
			}
			if yyr1824 || yy2arr1824 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1828 := z.DecBinary()
	_ = yym1828
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1829 := r.ContainerType()
		if yyct1829 == codecSelferValueTypeMap1234 {
			yyl1829 := r.ReadMapStart()
			if yyl1829 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1829, d)
			}
		} else if yyct1829 == codecSelferValueTypeArray1234 {
			yyl1829 := r.ReadArrayStart()
			if yyl1829 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1829, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1830Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1830Slc
	var yyhl1830 bool = l >= 0
	for yyj1830 := 0; ; yyj1830++ {
		if yyhl1830 {
			if yyj1830 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1830Slc = r.DecodeBytes(yys1830Slc, true, true)
		yys1830 := string(yys1830Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1830 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = LoadBalancerStatus{}
			} else {
				yyv1831 := &x.LoadBalancer
				yyv1831.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1830)
		} // end switch yys1830
	} // end for yyj1830
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1832 int
	var yyb1832 bool
	var yyhl1832 bool = l >= 0
	yyj1832++
	if yyhl1832 {
		yyb1832 = yyj1832 > l
	} else {
		yyb1832 = r.CheckBreak()
	}
	if yyb1832 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancer = LoadBalancerStatus{}
	} else {
		yyv1833 := &x.LoadBalancer
		yyv1833.CodecDecodeSelf(d)
	}
	for {
		yyj1832++
		if yyhl1832 {
			yyb1832 = yyj1832 > l
		} else {
			yyb1832 = r.CheckBreak()
		}
		if yyb1832 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1832-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1834 := z.EncBinary()
		_ = yym1834
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1835 := !z.EncBinary()
			yy2arr1835 := z.EncBasicHandle().StructToArray
			var yyq1835 [1]bool
			_, _, _ = yysep1835, yyq1835, yy2arr1835
			const yyr1835 bool = false
			yyq1835[0] = len(x.Ingress) != 0
			var yynn1835 int
			if yyr1835 || yy2arr1835 {
				r.EncodeArrayStart(1)
			} else {
				yynn1835 = 0
				for _, b := range yyq1835 {
					if b {
						yynn1835++
					}
				}
				r.EncodeMapStart(yynn1835)
				yynn1835 = 0
			}
			if yyr1835 || yy2arr1835 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1835[0] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym1837 := z.EncBinary()
						_ = yym1837
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1835[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym1838 := z.EncBinary()
						_ = yym1838
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				}
			}
			if yyr1835 || yy2arr1835 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1839 := z.DecBinary()
	_ = yym1839
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1840 := r.ContainerType()
		if yyct1840 == codecSelferValueTypeMap1234 {
			yyl1840 := r.ReadMapStart()
			if yyl1840 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1840, d)
			}
		} else if yyct1840 == codecSelferValueTypeArray1234 {
			yyl1840 := r.ReadArrayStart()
			if yyl1840 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1840, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1841Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1841Slc
	var yyhl1841 bool = l >= 0
	for yyj1841 := 0; ; yyj1841++ {
		if yyhl1841 {
			if yyj1841 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1841Slc = r.DecodeBytes(yys1841Slc, true, true)
		yys1841 := string(yys1841Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1841 {
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv1842 := &x.Ingress
				yym1843 := z.DecBinary()
				_ = yym1843
				if false {
				} else {
					h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv1842), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1841)
		} // end switch yys1841
	} // end for yyj1841
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1844 int
	var yyb1844 bool
	var yyhl1844 bool = l >= 0
	yyj1844++
	if yyhl1844 {
		yyb1844 = yyj1844 > l
	} else {
		yyb1844 = r.CheckBreak()
	}
	if yyb1844 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv1845 := &x.Ingress
		yym1846 := z.DecBinary()
		_ = yym1846
		if false {
		} else {
			h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv1845), d)
		}
	}
	for {
		yyj1844++
		if yyhl1844 {
			yyb1844 = yyj1844 > l
		} else {
			yyb1844 = r.CheckBreak()
		}
		if yyb1844 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1844-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerIngress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1847 := z.EncBinary()
		_ = yym1847
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1848 := !z.EncBinary()
			yy2arr1848 := z.EncBasicHandle().StructToArray
			var yyq1848 [2]bool
			_, _, _ = yysep1848, yyq1848, yy2arr1848
			const yyr1848 bool = false
			yyq1848[0] = x.IP != ""
			yyq1848[1] = x.Hostname != ""
			var yynn1848 int
			if yyr1848 || yy2arr1848 {
				r.EncodeArrayStart(2)
			} else {
				yynn1848 = 0
				for _, b := range yyq1848 {
					if b {
						yynn1848++
					}
				}
				r.EncodeMapStart(yynn1848)
				yynn1848 = 0
			}
			if yyr1848 || yy2arr1848 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1848[0] {
					yym1850 := z.EncBinary()
					_ = yym1850
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1848[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ip"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1851 := z.EncBinary()
					_ = yym1851
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				}
			}
			if yyr1848 || yy2arr1848 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1848[1] {
					yym1853 := z.EncBinary()
					_ = yym1853
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1848[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1854 := z.EncBinary()
					_ = yym1854
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr1848 || yy2arr1848 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerIngress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1855 := z.DecBinary()
	_ = yym1855
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1856 := r.ContainerType()
		if yyct1856 == codecSelferValueTypeMap1234 {
			yyl1856 := r.ReadMapStart()
			if yyl1856 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1856, d)
			}
		} else if yyct1856 == codecSelferValueTypeArray1234 {
			yyl1856 := r.ReadArrayStart()
			if yyl1856 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1856, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1857Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1857Slc
	var yyhl1857 bool = l >= 0
	for yyj1857 := 0; ; yyj1857++ {
		if yyhl1857 {
			if yyj1857 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1857Slc = r.DecodeBytes(yys1857Slc, true, true)
		yys1857 := string(yys1857Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1857 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1857)
		} // end switch yys1857
	} // end for yyj1857
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerIngress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1860 int
	var yyb1860 bool
	var yyhl1860 bool = l >= 0
	yyj1860++
	if yyhl1860 {
		yyb1860 = yyj1860 > l
	} else {
		yyb1860 = r.CheckBreak()
	}
	if yyb1860 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj1860++
	if yyhl1860 {
		yyb1860 = yyj1860 > l
	} else {
		yyb1860 = r.CheckBreak()
	}
	if yyb1860 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	for {
		yyj1860++
		if yyhl1860 {
			yyb1860 = yyj1860 > l
		} else {
			yyb1860 = r.CheckBreak()
		}
		if yyb1860 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1860-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1863 := z.EncBinary()
		_ = yym1863
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1864 := !z.EncBinary()
			yy2arr1864 := z.EncBasicHandle().StructToArray
			var yyq1864 [8]bool
			_, _, _ = yysep1864, yyq1864, yy2arr1864
			const yyr1864 bool = false
			yyq1864[1] = len(x.Selector) != 0
			yyq1864[2] = x.ClusterIP != ""
			yyq1864[3] = x.Type != ""
			yyq1864[4] = len(x.ExternalIPs) != 0
			yyq1864[5] = len(x.DeprecatedPublicIPs) != 0
			yyq1864[6] = x.SessionAffinity != ""
			yyq1864[7] = x.LoadBalancerIP != ""
			var yynn1864 int
			if yyr1864 || yy2arr1864 {
				r.EncodeArrayStart(8)
			} else {
				yynn1864 = 1
				for _, b := range yyq1864 {
					if b {
						yynn1864++
					}
				}
				r.EncodeMapStart(yynn1864)
				yynn1864 = 0
			}
			if yyr1864 || yy2arr1864 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym1866 := z.EncBinary()
					_ = yym1866
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ports"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym1867 := z.EncBinary()
					_ = yym1867
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			}
			if yyr1864 || yy2arr1864 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1864[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym1869 := z.EncBinary()
						_ = yym1869
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1864[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym1870 := z.EncBinary()
						_ = yym1870
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr1864 || yy2arr1864 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1864[2] {
					yym1872 := z.EncBinary()
					_ = yym1872
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1864[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusterIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1873 := z.EncBinary()
					_ = yym1873
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				}
			}
			if yyr1864 || yy2arr1864 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1864[3] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1864[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr1864 || yy2arr1864 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1864[4] {
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym1876 := z.EncBinary()
						_ = yym1876
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1864[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalIPs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym1877 := z.EncBinary()
						_ = yym1877
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				}
			}
			if yyr1864 || yy2arr1864 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1864[5] {
					if x.DeprecatedPublicIPs == nil {
						r.EncodeNil()
					} else {
						yym1879 := z.EncBinary()
						_ = yym1879
						if false {
						} else {
							z.F.EncSliceStringV(x.DeprecatedPublicIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1864[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deprecatedPublicIPs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeprecatedPublicIPs == nil {
						r.EncodeNil()
					} else {
						yym1880 := z.EncBinary()
						_ = yym1880
						if false {
						} else {
							z.F.EncSliceStringV(x.DeprecatedPublicIPs, false, e)
						}
					}
				}
			}
			if yyr1864 || yy2arr1864 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1864[6] {
					x.SessionAffinity.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1864[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sessionAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.SessionAffinity.CodecEncodeSelf(e)
				}
			}
			if yyr1864 || yy2arr1864 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1864[7] {
					yym1883 := z.EncBinary()
					_ = yym1883
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1864[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1884 := z.EncBinary()
					_ = yym1884
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				}
			}
			if yyr1864 || yy2arr1864 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1885 := z.DecBinary()
	_ = yym1885
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1886 := r.ContainerType()
		if yyct1886 == codecSelferValueTypeMap1234 {
			yyl1886 := r.ReadMapStart()
			if yyl1886 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1886, d)
			}
		} else if yyct1886 == codecSelferValueTypeArray1234 {
			yyl1886 := r.ReadArrayStart()
			if yyl1886 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1886, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1887Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1887Slc
	var yyhl1887 bool = l >= 0
	for yyj1887 := 0; ; yyj1887++ {
		if yyhl1887 {
			if yyj1887 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1887Slc = r.DecodeBytes(yys1887Slc, true, true)
		yys1887 := string(yys1887Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1887 {
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1888 := &x.Ports
				yym1889 := z.DecBinary()
				_ = yym1889
				if false {
				} else {
					h.decSliceServicePort((*[]ServicePort)(yyv1888), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv1890 := &x.Selector
				yym1891 := z.DecBinary()
				_ = yym1891
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1890, false, d)
				}
			}
		case "clusterIP":
			if r.TryDecodeAsNil() {
				x.ClusterIP = ""
			} else {
				x.ClusterIP = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ServiceType(r.DecodeString())
			}
		case "externalIPs":
			if r.TryDecodeAsNil() {
				x.ExternalIPs = nil
			} else {
				yyv1894 := &x.ExternalIPs
				yym1895 := z.DecBinary()
				_ = yym1895
				if false {
				} else {
					z.F.DecSliceStringX(yyv1894, false, d)
				}
			}
		case "deprecatedPublicIPs":
			if r.TryDecodeAsNil() {
				x.DeprecatedPublicIPs = nil
			} else {
				yyv1896 := &x.DeprecatedPublicIPs
				yym1897 := z.DecBinary()
				_ = yym1897
				if false {
				} else {
					z.F.DecSliceStringX(yyv1896, false, d)
				}
			}
		case "sessionAffinity":
			if r.TryDecodeAsNil() {
				x.SessionAffinity = ""
			} else {
				x.SessionAffinity = ServiceAffinity(r.DecodeString())
			}
		case "loadBalancerIP":
			if r.TryDecodeAsNil() {
				x.LoadBalancerIP = ""
			} else {
				x.LoadBalancerIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1887)
		} // end switch yys1887
	} // end for yyj1887
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1900 int
	var yyb1900 bool
	var yyhl1900 bool = l >= 0
	yyj1900++
	if yyhl1900 {
		yyb1900 = yyj1900 > l
	} else {
		yyb1900 = r.CheckBreak()
	}
	if yyb1900 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1901 := &x.Ports
		yym1902 := z.DecBinary()
		_ = yym1902
		if false {
		} else {
			h.decSliceServicePort((*[]ServicePort)(yyv1901), d)
		}
	}
	yyj1900++
	if yyhl1900 {
		yyb1900 = yyj1900 > l
	} else {
		yyb1900 = r.CheckBreak()
	}
	if yyb1900 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv1903 := &x.Selector
		yym1904 := z.DecBinary()
		_ = yym1904
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1903, false, d)
		}
	}
	yyj1900++
	if yyhl1900 {
		yyb1900 = yyj1900 > l
	} else {
		yyb1900 = r.CheckBreak()
	}
	if yyb1900 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClusterIP = ""
	} else {
		x.ClusterIP = string(r.DecodeString())
	}
	yyj1900++
	if yyhl1900 {
		yyb1900 = yyj1900 > l
	} else {
		yyb1900 = r.CheckBreak()
	}
	if yyb1900 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ServiceType(r.DecodeString())
	}
	yyj1900++
	if yyhl1900 {
		yyb1900 = yyj1900 > l
	} else {
		yyb1900 = r.CheckBreak()
	}
	if yyb1900 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalIPs = nil
	} else {
		yyv1907 := &x.ExternalIPs
		yym1908 := z.DecBinary()
		_ = yym1908
		if false {
		} else {
			z.F.DecSliceStringX(yyv1907, false, d)
		}
	}
	yyj1900++
	if yyhl1900 {
		yyb1900 = yyj1900 > l
	} else {
		yyb1900 = r.CheckBreak()
	}
	if yyb1900 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DeprecatedPublicIPs = nil
	} else {
		yyv1909 := &x.DeprecatedPublicIPs
		yym1910 := z.DecBinary()
		_ = yym1910
		if false {
		} else {
			z.F.DecSliceStringX(yyv1909, false, d)
		}
	}
	yyj1900++
	if yyhl1900 {
		yyb1900 = yyj1900 > l
	} else {
		yyb1900 = r.CheckBreak()
	}
	if yyb1900 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SessionAffinity = ""
	} else {
		x.SessionAffinity = ServiceAffinity(r.DecodeString())
	}
	yyj1900++
	if yyhl1900 {
		yyb1900 = yyj1900 > l
	} else {
		yyb1900 = r.CheckBreak()
	}
	if yyb1900 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerIP = ""
	} else {
		x.LoadBalancerIP = string(r.DecodeString())
	}
	for {
		yyj1900++
		if yyhl1900 {
			yyb1900 = yyj1900 > l
		} else {
			yyb1900 = r.CheckBreak()
		}
		if yyb1900 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1900-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServicePort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1913 := z.EncBinary()
		_ = yym1913
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1914 := !z.EncBinary()
			yy2arr1914 := z.EncBasicHandle().StructToArray
			var yyq1914 [5]bool
			_, _, _ = yysep1914, yyq1914, yy2arr1914
			const yyr1914 bool = false
			yyq1914[0] = x.Name != ""
			yyq1914[1] = x.Protocol != ""
			yyq1914[3] = true
			yyq1914[4] = x.NodePort != 0
			var yynn1914 int
			if yyr1914 || yy2arr1914 {
				r.EncodeArrayStart(5)
			} else {
				yynn1914 = 1
				for _, b := range yyq1914 {
					if b {
						yynn1914++
					}
				}
				r.EncodeMapStart(yynn1914)
				yynn1914 = 0
			}
			if yyr1914 || yy2arr1914 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1914[0] {
					yym1916 := z.EncBinary()
					_ = yym1916
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1914[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1917 := z.EncBinary()
					_ = yym1917
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1914 || yy2arr1914 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1914[1] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1914[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr1914 || yy2arr1914 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1920 := z.EncBinary()
				_ = yym1920
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1921 := z.EncBinary()
				_ = yym1921
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr1914 || yy2arr1914 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1914[3] {
					yy1923 := &x.TargetPort
					yym1924 := z.EncBinary()
					_ = yym1924
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1923) {
					} else if !yym1924 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1923)
					} else {
						z.EncFallback(yy1923)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1914[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetPort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1925 := &x.TargetPort
					yym1926 := z.EncBinary()
					_ = yym1926
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1925) {
					} else if !yym1926 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1925)
					} else {
						z.EncFallback(yy1925)
					}
				}
			}
			if yyr1914 || yy2arr1914 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1914[4] {
					yym1928 := z.EncBinary()
					_ = yym1928
					if false {
					} else {
						r.EncodeInt(int64(x.NodePort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1914[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodePort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1929 := z.EncBinary()
					_ = yym1929
					if false {
					} else {
						r.EncodeInt(int64(x.NodePort))
					}
				}
			}
			if yyr1914 || yy2arr1914 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServicePort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1930 := z.DecBinary()
	_ = yym1930
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1931 := r.ContainerType()
		if yyct1931 == codecSelferValueTypeMap1234 {
			yyl1931 := r.ReadMapStart()
			if yyl1931 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1931, d)
			}
		} else if yyct1931 == codecSelferValueTypeArray1234 {
			yyl1931 := r.ReadArrayStart()
			if yyl1931 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1931, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServicePort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1932Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1932Slc
	var yyhl1932 bool = l >= 0
	for yyj1932 := 0; ; yyj1932++ {
		if yyhl1932 {
			if yyj1932 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1932Slc = r.DecodeBytes(yys1932Slc, true, true)
		yys1932 := string(yys1932Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1932 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "targetPort":
			if r.TryDecodeAsNil() {
				x.TargetPort = pkg5_intstr.IntOrString{}
			} else {
				yyv1936 := &x.TargetPort
				yym1937 := z.DecBinary()
				_ = yym1937
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1936) {
				} else if !yym1937 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1936)
				} else {
					z.DecFallback(yyv1936, false)
				}
			}
		case "nodePort":
			if r.TryDecodeAsNil() {
				x.NodePort = 0
			} else {
				x.NodePort = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1932)
		} // end switch yys1932
	} // end for yyj1932
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServicePort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1939 int
	var yyb1939 bool
	var yyhl1939 bool = l >= 0
	yyj1939++
	if yyhl1939 {
		yyb1939 = yyj1939 > l
	} else {
		yyb1939 = r.CheckBreak()
	}
	if yyb1939 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1939++
	if yyhl1939 {
		yyb1939 = yyj1939 > l
	} else {
		yyb1939 = r.CheckBreak()
	}
	if yyb1939 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj1939++
	if yyhl1939 {
		yyb1939 = yyj1939 > l
	} else {
		yyb1939 = r.CheckBreak()
	}
	if yyb1939 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj1939++
	if yyhl1939 {
		yyb1939 = yyj1939 > l
	} else {
		yyb1939 = r.CheckBreak()
	}
	if yyb1939 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPort = pkg5_intstr.IntOrString{}
	} else {
		yyv1943 := &x.TargetPort
		yym1944 := z.DecBinary()
		_ = yym1944
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1943) {
		} else if !yym1944 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1943)
		} else {
			z.DecFallback(yyv1943, false)
		}
	}
	yyj1939++
	if yyhl1939 {
		yyb1939 = yyj1939 > l
	} else {
		yyb1939 = r.CheckBreak()
	}
	if yyb1939 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodePort = 0
	} else {
		x.NodePort = int32(r.DecodeInt(32))
	}
	for {
		yyj1939++
		if yyhl1939 {
			yyb1939 = yyj1939 > l
		} else {
			yyb1939 = r.CheckBreak()
		}
		if yyb1939 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1939-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Service) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1946 := z.EncBinary()
		_ = yym1946
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1947 := !z.EncBinary()
			yy2arr1947 := z.EncBasicHandle().StructToArray
			var yyq1947 [5]bool
			_, _, _ = yysep1947, yyq1947, yy2arr1947
			const yyr1947 bool = false
			yyq1947[0] = x.Kind != ""
			yyq1947[1] = x.APIVersion != ""
			yyq1947[2] = true
			yyq1947[3] = true
			yyq1947[4] = true
			var yynn1947 int
			if yyr1947 || yy2arr1947 {
				r.EncodeArrayStart(5)
			} else {
				yynn1947 = 0
				for _, b := range yyq1947 {
					if b {
						yynn1947++
					}
				}
				r.EncodeMapStart(yynn1947)
				yynn1947 = 0
			}
			if yyr1947 || yy2arr1947 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1947[0] {
					yym1949 := z.EncBinary()
					_ = yym1949
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1947[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1950 := z.EncBinary()
					_ = yym1950
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1947 || yy2arr1947 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1947[1] {
					yym1952 := z.EncBinary()
					_ = yym1952
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1947[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1953 := z.EncBinary()
					_ = yym1953
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1947 || yy2arr1947 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1947[2] {
					yy1955 := &x.ObjectMeta
					yy1955.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1947[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1956 := &x.ObjectMeta
					yy1956.CodecEncodeSelf(e)
				}
			}
			if yyr1947 || yy2arr1947 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1947[3] {
					yy1958 := &x.Spec
					yy1958.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1947[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1959 := &x.Spec
					yy1959.CodecEncodeSelf(e)
				}
			}
			if yyr1947 || yy2arr1947 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1947[4] {
					yy1961 := &x.Status
					yy1961.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1947[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1962 := &x.Status
					yy1962.CodecEncodeSelf(e)
				}
			}
			if yyr1947 || yy2arr1947 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Service) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1963 := z.DecBinary()
	_ = yym1963
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1964 := r.ContainerType()
		if yyct1964 == codecSelferValueTypeMap1234 {
			yyl1964 := r.ReadMapStart()
			if yyl1964 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1964, d)
			}
		} else if yyct1964 == codecSelferValueTypeArray1234 {
			yyl1964 := r.ReadArrayStart()
			if yyl1964 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1964, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Service) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1965Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1965Slc
	var yyhl1965 bool = l >= 0
	for yyj1965 := 0; ; yyj1965++ {
		if yyhl1965 {
			if yyj1965 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1965Slc = r.DecodeBytes(yys1965Slc, true, true)
		yys1965 := string(yys1965Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1965 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1968 := &x.ObjectMeta
				yyv1968.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ServiceSpec{}
			} else {
				yyv1969 := &x.Spec
				yyv1969.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ServiceStatus{}
			} else {
				yyv1970 := &x.Status
				yyv1970.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1965)
		} // end switch yys1965
	} // end for yyj1965
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Service) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1971 int
	var yyb1971 bool
	var yyhl1971 bool = l >= 0
	yyj1971++
	if yyhl1971 {
		yyb1971 = yyj1971 > l
	} else {
		yyb1971 = r.CheckBreak()
	}
	if yyb1971 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1971++
	if yyhl1971 {
		yyb1971 = yyj1971 > l
	} else {
		yyb1971 = r.CheckBreak()
	}
	if yyb1971 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1971++
	if yyhl1971 {
		yyb1971 = yyj1971 > l
	} else {
		yyb1971 = r.CheckBreak()
	}
	if yyb1971 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1974 := &x.ObjectMeta
		yyv1974.CodecDecodeSelf(d)
	}
	yyj1971++
	if yyhl1971 {
		yyb1971 = yyj1971 > l
	} else {
		yyb1971 = r.CheckBreak()
	}
	if yyb1971 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ServiceSpec{}
	} else {
		yyv1975 := &x.Spec
		yyv1975.CodecDecodeSelf(d)
	}
	yyj1971++
	if yyhl1971 {
		yyb1971 = yyj1971 > l
	} else {
		yyb1971 = r.CheckBreak()
	}
	if yyb1971 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ServiceStatus{}
	} else {
		yyv1976 := &x.Status
		yyv1976.CodecDecodeSelf(d)
	}
	for {
		yyj1971++
		if yyhl1971 {
			yyb1971 = yyj1971 > l
		} else {
			yyb1971 = r.CheckBreak()
		}
		if yyb1971 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1971-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1977 := z.EncBinary()
		_ = yym1977
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1978 := !z.EncBinary()
			yy2arr1978 := z.EncBasicHandle().StructToArray
			var yyq1978 [4]bool
			_, _, _ = yysep1978, yyq1978, yy2arr1978
			const yyr1978 bool = false
			yyq1978[0] = x.Kind != ""
			yyq1978[1] = x.APIVersion != ""
			yyq1978[2] = true
			var yynn1978 int
			if yyr1978 || yy2arr1978 {
				r.EncodeArrayStart(4)
			} else {
				yynn1978 = 1
				for _, b := range yyq1978 {
					if b {
						yynn1978++
					}
				}
				r.EncodeMapStart(yynn1978)
				yynn1978 = 0
			}
			if yyr1978 || yy2arr1978 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1978[0] {
					yym1980 := z.EncBinary()
					_ = yym1980
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1978[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1981 := z.EncBinary()
					_ = yym1981
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1978 || yy2arr1978 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1978[1] {
					yym1983 := z.EncBinary()
					_ = yym1983
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1978[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1984 := z.EncBinary()
					_ = yym1984
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1978 || yy2arr1978 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1978[2] {
					yy1986 := &x.ListMeta
					yym1987 := z.EncBinary()
					_ = yym1987
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1986) {
					} else {
						z.EncFallback(yy1986)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1978[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1988 := &x.ListMeta
					yym1989 := z.EncBinary()
					_ = yym1989
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1988) {
					} else {
						z.EncFallback(yy1988)
					}
				}
			}
			if yyr1978 || yy2arr1978 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1991 := z.EncBinary()
					_ = yym1991
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1992 := z.EncBinary()
					_ = yym1992
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			}
			if yyr1978 || yy2arr1978 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1993 := z.DecBinary()
	_ = yym1993
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1994 := r.ContainerType()
		if yyct1994 == codecSelferValueTypeMap1234 {
			yyl1994 := r.ReadMapStart()
			if yyl1994 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1994, d)
			}
		} else if yyct1994 == codecSelferValueTypeArray1234 {
			yyl1994 := r.ReadArrayStart()
			if yyl1994 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1994, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1995Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1995Slc
	var yyhl1995 bool = l >= 0
	for yyj1995 := 0; ; yyj1995++ {
		if yyhl1995 {
			if yyj1995 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1995Slc = r.DecodeBytes(yys1995Slc, true, true)
		yys1995 := string(yys1995Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1995 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1998 := &x.ListMeta
				yym1999 := z.DecBinary()
				_ = yym1999
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1998) {
				} else {
					z.DecFallback(yyv1998, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2000 := &x.Items
				yym2001 := z.DecBinary()
				_ = yym2001
				if false {
				} else {
					h.decSliceService((*[]Service)(yyv2000), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1995)
		} // end switch yys1995
	} // end for yyj1995
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2002 int
	var yyb2002 bool
	var yyhl2002 bool = l >= 0
	yyj2002++
	if yyhl2002 {
		yyb2002 = yyj2002 > l
	} else {
		yyb2002 = r.CheckBreak()
	}
	if yyb2002 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2002++
	if yyhl2002 {
		yyb2002 = yyj2002 > l
	} else {
		yyb2002 = r.CheckBreak()
	}
	if yyb2002 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2002++
	if yyhl2002 {
		yyb2002 = yyj2002 > l
	} else {
		yyb2002 = r.CheckBreak()
	}
	if yyb2002 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2005 := &x.ListMeta
		yym2006 := z.DecBinary()
		_ = yym2006
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2005) {
		} else {
			z.DecFallback(yyv2005, false)
		}
	}
	yyj2002++
	if yyhl2002 {
		yyb2002 = yyj2002 > l
	} else {
		yyb2002 = r.CheckBreak()
	}
	if yyb2002 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2007 := &x.Items
		yym2008 := z.DecBinary()
		_ = yym2008
		if false {
		} else {
			h.decSliceService((*[]Service)(yyv2007), d)
		}
	}
	for {
		yyj2002++
		if yyhl2002 {
			yyb2002 = yyj2002 > l
		} else {
			yyb2002 = r.CheckBreak()
		}
		if yyb2002 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2002-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2009 := z.EncBinary()
		_ = yym2009
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2010 := !z.EncBinary()
			yy2arr2010 := z.EncBasicHandle().StructToArray
			var yyq2010 [5]bool
			_, _, _ = yysep2010, yyq2010, yy2arr2010
			const yyr2010 bool = false
			yyq2010[0] = x.Kind != ""
			yyq2010[1] = x.APIVersion != ""
			yyq2010[2] = true
			yyq2010[3] = len(x.Secrets) != 0
			yyq2010[4] = len(x.ImagePullSecrets) != 0
			var yynn2010 int
			if yyr2010 || yy2arr2010 {
				r.EncodeArrayStart(5)
			} else {
				yynn2010 = 0
				for _, b := range yyq2010 {
					if b {
						yynn2010++
					}
				}
				r.EncodeMapStart(yynn2010)
				yynn2010 = 0
			}
			if yyr2010 || yy2arr2010 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2010[0] {
					yym2012 := z.EncBinary()
					_ = yym2012
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2010[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2013 := z.EncBinary()
					_ = yym2013
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2010 || yy2arr2010 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2010[1] {
					yym2015 := z.EncBinary()
					_ = yym2015
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2010[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2016 := z.EncBinary()
					_ = yym2016
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2010 || yy2arr2010 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2010[2] {
					yy2018 := &x.ObjectMeta
					yy2018.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2010[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2019 := &x.ObjectMeta
					yy2019.CodecEncodeSelf(e)
				}
			}
			if yyr2010 || yy2arr2010 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2010[3] {
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym2021 := z.EncBinary()
						_ = yym2021
						if false {
						} else {
							h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2010[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym2022 := z.EncBinary()
						_ = yym2022
						if false {
						} else {
							h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
						}
					}
				}
			}
			if yyr2010 || yy2arr2010 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2010[4] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2024 := z.EncBinary()
						_ = yym2024
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2010[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2025 := z.EncBinary()
						_ = yym2025
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr2010 || yy2arr2010 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2026 := z.DecBinary()
	_ = yym2026
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2027 := r.ContainerType()
		if yyct2027 == codecSelferValueTypeMap1234 {
			yyl2027 := r.ReadMapStart()
			if yyl2027 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2027, d)
			}
		} else if yyct2027 == codecSelferValueTypeArray1234 {
			yyl2027 := r.ReadArrayStart()
			if yyl2027 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2027, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2028Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2028Slc
	var yyhl2028 bool = l >= 0
	for yyj2028 := 0; ; yyj2028++ {
		if yyhl2028 {
			if yyj2028 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2028Slc = r.DecodeBytes(yys2028Slc, true, true)
		yys2028 := string(yys2028Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2028 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2031 := &x.ObjectMeta
				yyv2031.CodecDecodeSelf(d)
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv2032 := &x.Secrets
				yym2033 := z.DecBinary()
				_ = yym2033
				if false {
				} else {
					h.decSliceObjectReference((*[]ObjectReference)(yyv2032), d)
				}
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2034 := &x.ImagePullSecrets
				yym2035 := z.DecBinary()
				_ = yym2035
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2034), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2028)
		} // end switch yys2028
	} // end for yyj2028
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2036 int
	var yyb2036 bool
	var yyhl2036 bool = l >= 0
	yyj2036++
	if yyhl2036 {
		yyb2036 = yyj2036 > l
	} else {
		yyb2036 = r.CheckBreak()
	}
	if yyb2036 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2036++
	if yyhl2036 {
		yyb2036 = yyj2036 > l
	} else {
		yyb2036 = r.CheckBreak()
	}
	if yyb2036 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2036++
	if yyhl2036 {
		yyb2036 = yyj2036 > l
	} else {
		yyb2036 = r.CheckBreak()
	}
	if yyb2036 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2039 := &x.ObjectMeta
		yyv2039.CodecDecodeSelf(d)
	}
	yyj2036++
	if yyhl2036 {
		yyb2036 = yyj2036 > l
	} else {
		yyb2036 = r.CheckBreak()
	}
	if yyb2036 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv2040 := &x.Secrets
		yym2041 := z.DecBinary()
		_ = yym2041
		if false {
		} else {
			h.decSliceObjectReference((*[]ObjectReference)(yyv2040), d)
		}
	}
	yyj2036++
	if yyhl2036 {
		yyb2036 = yyj2036 > l
	} else {
		yyb2036 = r.CheckBreak()
	}
	if yyb2036 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2042 := &x.ImagePullSecrets
		yym2043 := z.DecBinary()
		_ = yym2043
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2042), d)
		}
	}
	for {
		yyj2036++
		if yyhl2036 {
			yyb2036 = yyj2036 > l
		} else {
			yyb2036 = r.CheckBreak()
		}
		if yyb2036 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2036-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccountList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2044 := z.EncBinary()
		_ = yym2044
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2045 := !z.EncBinary()
			yy2arr2045 := z.EncBasicHandle().StructToArray
			var yyq2045 [4]bool
			_, _, _ = yysep2045, yyq2045, yy2arr2045
			const yyr2045 bool = false
			yyq2045[0] = x.Kind != ""
			yyq2045[1] = x.APIVersion != ""
			yyq2045[2] = true
			var yynn2045 int
			if yyr2045 || yy2arr2045 {
				r.EncodeArrayStart(4)
			} else {
				yynn2045 = 1
				for _, b := range yyq2045 {
					if b {
						yynn2045++
					}
				}
				r.EncodeMapStart(yynn2045)
				yynn2045 = 0
			}
			if yyr2045 || yy2arr2045 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2045[0] {
					yym2047 := z.EncBinary()
					_ = yym2047
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2045[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2048 := z.EncBinary()
					_ = yym2048
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2045 || yy2arr2045 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2045[1] {
					yym2050 := z.EncBinary()
					_ = yym2050
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2045[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2051 := z.EncBinary()
					_ = yym2051
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2045 || yy2arr2045 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2045[2] {
					yy2053 := &x.ListMeta
					yym2054 := z.EncBinary()
					_ = yym2054
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2053) {
					} else {
						z.EncFallback(yy2053)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2045[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2055 := &x.ListMeta
					yym2056 := z.EncBinary()
					_ = yym2056
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2055) {
					} else {
						z.EncFallback(yy2055)
					}
				}
			}
			if yyr2045 || yy2arr2045 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2058 := z.EncBinary()
					_ = yym2058
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2059 := z.EncBinary()
					_ = yym2059
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			}
			if yyr2045 || yy2arr2045 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccountList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2060 := z.DecBinary()
	_ = yym2060
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2061 := r.ContainerType()
		if yyct2061 == codecSelferValueTypeMap1234 {
			yyl2061 := r.ReadMapStart()
			if yyl2061 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2061, d)
			}
		} else if yyct2061 == codecSelferValueTypeArray1234 {
			yyl2061 := r.ReadArrayStart()
			if yyl2061 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2061, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2062Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2062Slc
	var yyhl2062 bool = l >= 0
	for yyj2062 := 0; ; yyj2062++ {
		if yyhl2062 {
			if yyj2062 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2062Slc = r.DecodeBytes(yys2062Slc, true, true)
		yys2062 := string(yys2062Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2062 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2065 := &x.ListMeta
				yym2066 := z.DecBinary()
				_ = yym2066
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2065) {
				} else {
					z.DecFallback(yyv2065, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2067 := &x.Items
				yym2068 := z.DecBinary()
				_ = yym2068
				if false {
				} else {
					h.decSliceServiceAccount((*[]ServiceAccount)(yyv2067), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2062)
		} // end switch yys2062
	} // end for yyj2062
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccountList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2069 int
	var yyb2069 bool
	var yyhl2069 bool = l >= 0
	yyj2069++
	if yyhl2069 {
		yyb2069 = yyj2069 > l
	} else {
		yyb2069 = r.CheckBreak()
	}
	if yyb2069 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2069++
	if yyhl2069 {
		yyb2069 = yyj2069 > l
	} else {
		yyb2069 = r.CheckBreak()
	}
	if yyb2069 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2069++
	if yyhl2069 {
		yyb2069 = yyj2069 > l
	} else {
		yyb2069 = r.CheckBreak()
	}
	if yyb2069 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2072 := &x.ListMeta
		yym2073 := z.DecBinary()
		_ = yym2073
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2072) {
		} else {
			z.DecFallback(yyv2072, false)
		}
	}
	yyj2069++
	if yyhl2069 {
		yyb2069 = yyj2069 > l
	} else {
		yyb2069 = r.CheckBreak()
	}
	if yyb2069 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2074 := &x.Items
		yym2075 := z.DecBinary()
		_ = yym2075
		if false {
		} else {
			h.decSliceServiceAccount((*[]ServiceAccount)(yyv2074), d)
		}
	}
	for {
		yyj2069++
		if yyhl2069 {
			yyb2069 = yyj2069 > l
		} else {
			yyb2069 = r.CheckBreak()
		}
		if yyb2069 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2069-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Endpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2076 := z.EncBinary()
		_ = yym2076
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2077 := !z.EncBinary()
			yy2arr2077 := z.EncBasicHandle().StructToArray
			var yyq2077 [4]bool
			_, _, _ = yysep2077, yyq2077, yy2arr2077
			const yyr2077 bool = false
			yyq2077[0] = x.Kind != ""
			yyq2077[1] = x.APIVersion != ""
			yyq2077[2] = true
			var yynn2077 int
			if yyr2077 || yy2arr2077 {
				r.EncodeArrayStart(4)
			} else {
				yynn2077 = 1
				for _, b := range yyq2077 {
					if b {
						yynn2077++
					}
				}
				r.EncodeMapStart(yynn2077)
				yynn2077 = 0
			}
			if yyr2077 || yy2arr2077 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2077[0] {
					yym2079 := z.EncBinary()
					_ = yym2079
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2077[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2080 := z.EncBinary()
					_ = yym2080
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2077 || yy2arr2077 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2077[1] {
					yym2082 := z.EncBinary()
					_ = yym2082
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2077[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2083 := z.EncBinary()
					_ = yym2083
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2077 || yy2arr2077 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2077[2] {
					yy2085 := &x.ObjectMeta
					yy2085.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2077[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2086 := &x.ObjectMeta
					yy2086.CodecEncodeSelf(e)
				}
			}
			if yyr2077 || yy2arr2077 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2088 := z.EncBinary()
					_ = yym2088
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("subsets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2089 := z.EncBinary()
					_ = yym2089
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			}
			if yyr2077 || yy2arr2077 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Endpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2090 := z.DecBinary()
	_ = yym2090
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2091 := r.ContainerType()
		if yyct2091 == codecSelferValueTypeMap1234 {
			yyl2091 := r.ReadMapStart()
			if yyl2091 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2091, d)
			}
		} else if yyct2091 == codecSelferValueTypeArray1234 {
			yyl2091 := r.ReadArrayStart()
			if yyl2091 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2091, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Endpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2092Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2092Slc
	var yyhl2092 bool = l >= 0
	for yyj2092 := 0; ; yyj2092++ {
		if yyhl2092 {
			if yyj2092 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2092Slc = r.DecodeBytes(yys2092Slc, true, true)
		yys2092 := string(yys2092Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2092 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2095 := &x.ObjectMeta
				yyv2095.CodecDecodeSelf(d)
			}
		case "subsets":
			if r.TryDecodeAsNil() {
				x.Subsets = nil
			} else {
				yyv2096 := &x.Subsets
				yym2097 := z.DecBinary()
				_ = yym2097
				if false {
				} else {
					h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2096), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2092)
		} // end switch yys2092
	} // end for yyj2092
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Endpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2098 int
	var yyb2098 bool
	var yyhl2098 bool = l >= 0
	yyj2098++
	if yyhl2098 {
		yyb2098 = yyj2098 > l
	} else {
		yyb2098 = r.CheckBreak()
	}
	if yyb2098 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2098++
	if yyhl2098 {
		yyb2098 = yyj2098 > l
	} else {
		yyb2098 = r.CheckBreak()
	}
	if yyb2098 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2098++
	if yyhl2098 {
		yyb2098 = yyj2098 > l
	} else {
		yyb2098 = r.CheckBreak()
	}
	if yyb2098 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2101 := &x.ObjectMeta
		yyv2101.CodecDecodeSelf(d)
	}
	yyj2098++
	if yyhl2098 {
		yyb2098 = yyj2098 > l
	} else {
		yyb2098 = r.CheckBreak()
	}
	if yyb2098 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subsets = nil
	} else {
		yyv2102 := &x.Subsets
		yym2103 := z.DecBinary()
		_ = yym2103
		if false {
		} else {
			h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2102), d)
		}
	}
	for {
		yyj2098++
		if yyhl2098 {
			yyb2098 = yyj2098 > l
		} else {
			yyb2098 = r.CheckBreak()
		}
		if yyb2098 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2098-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointSubset) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2104 := z.EncBinary()
		_ = yym2104
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2105 := !z.EncBinary()
			yy2arr2105 := z.EncBasicHandle().StructToArray
			var yyq2105 [3]bool
			_, _, _ = yysep2105, yyq2105, yy2arr2105
			const yyr2105 bool = false
			yyq2105[0] = len(x.Addresses) != 0
			yyq2105[1] = len(x.NotReadyAddresses) != 0
			yyq2105[2] = len(x.Ports) != 0
			var yynn2105 int
			if yyr2105 || yy2arr2105 {
				r.EncodeArrayStart(3)
			} else {
				yynn2105 = 0
				for _, b := range yyq2105 {
					if b {
						yynn2105++
					}
				}
				r.EncodeMapStart(yynn2105)
				yynn2105 = 0
			}
			if yyr2105 || yy2arr2105 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2105[0] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2107 := z.EncBinary()
						_ = yym2107
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2105[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2108 := z.EncBinary()
						_ = yym2108
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2105 || yy2arr2105 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2105[1] {
					if x.NotReadyAddresses == nil {
						r.EncodeNil()
					} else {
						yym2110 := z.EncBinary()
						_ = yym2110
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2105[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("notReadyAddresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NotReadyAddresses == nil {
						r.EncodeNil()
					} else {
						yym2111 := z.EncBinary()
						_ = yym2111
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
						}
					}
				}
			}
			if yyr2105 || yy2arr2105 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2105[2] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym2113 := z.EncBinary()
						_ = yym2113
						if false {
						} else {
							h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2105[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym2114 := z.EncBinary()
						_ = yym2114
						if false {
						} else {
							h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr2105 || yy2arr2105 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointSubset) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2115 := z.DecBinary()
	_ = yym2115
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2116 := r.ContainerType()
		if yyct2116 == codecSelferValueTypeMap1234 {
			yyl2116 := r.ReadMapStart()
			if yyl2116 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2116, d)
			}
		} else if yyct2116 == codecSelferValueTypeArray1234 {
			yyl2116 := r.ReadArrayStart()
			if yyl2116 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2116, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointSubset) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2117Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2117Slc
	var yyhl2117 bool = l >= 0
	for yyj2117 := 0; ; yyj2117++ {
		if yyhl2117 {
			if yyj2117 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2117Slc = r.DecodeBytes(yys2117Slc, true, true)
		yys2117 := string(yys2117Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2117 {
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2118 := &x.Addresses
				yym2119 := z.DecBinary()
				_ = yym2119
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2118), d)
				}
			}
		case "notReadyAddresses":
			if r.TryDecodeAsNil() {
				x.NotReadyAddresses = nil
			} else {
				yyv2120 := &x.NotReadyAddresses
				yym2121 := z.DecBinary()
				_ = yym2121
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2120), d)
				}
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2122 := &x.Ports
				yym2123 := z.DecBinary()
				_ = yym2123
				if false {
				} else {
					h.decSliceEndpointPort((*[]EndpointPort)(yyv2122), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2117)
		} // end switch yys2117
	} // end for yyj2117
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointSubset) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2124 int
	var yyb2124 bool
	var yyhl2124 bool = l >= 0
	yyj2124++
	if yyhl2124 {
		yyb2124 = yyj2124 > l
	} else {
		yyb2124 = r.CheckBreak()
	}
	if yyb2124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2125 := &x.Addresses
		yym2126 := z.DecBinary()
		_ = yym2126
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2125), d)
		}
	}
	yyj2124++
	if yyhl2124 {
		yyb2124 = yyj2124 > l
	} else {
		yyb2124 = r.CheckBreak()
	}
	if yyb2124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NotReadyAddresses = nil
	} else {
		yyv2127 := &x.NotReadyAddresses
		yym2128 := z.DecBinary()
		_ = yym2128
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2127), d)
		}
	}
	yyj2124++
	if yyhl2124 {
		yyb2124 = yyj2124 > l
	} else {
		yyb2124 = r.CheckBreak()
	}
	if yyb2124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2129 := &x.Ports
		yym2130 := z.DecBinary()
		_ = yym2130
		if false {
		} else {
			h.decSliceEndpointPort((*[]EndpointPort)(yyv2129), d)
		}
	}
	for {
		yyj2124++
		if yyhl2124 {
			yyb2124 = yyj2124 > l
		} else {
			yyb2124 = r.CheckBreak()
		}
		if yyb2124 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2124-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2131 := z.EncBinary()
		_ = yym2131
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2132 := !z.EncBinary()
			yy2arr2132 := z.EncBasicHandle().StructToArray
			var yyq2132 [2]bool
			_, _, _ = yysep2132, yyq2132, yy2arr2132
			const yyr2132 bool = false
			yyq2132[1] = x.TargetRef != nil
			var yynn2132 int
			if yyr2132 || yy2arr2132 {
				r.EncodeArrayStart(2)
			} else {
				yynn2132 = 1
				for _, b := range yyq2132 {
					if b {
						yynn2132++
					}
				}
				r.EncodeMapStart(yynn2132)
				yynn2132 = 0
			}
			if yyr2132 || yy2arr2132 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2134 := z.EncBinary()
				_ = yym2134
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ip"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2135 := z.EncBinary()
				_ = yym2135
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			}
			if yyr2132 || yy2arr2132 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2132[1] {
					if x.TargetRef == nil {
						r.EncodeNil()
					} else {
						x.TargetRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2132[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TargetRef == nil {
						r.EncodeNil()
					} else {
						x.TargetRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2132 || yy2arr2132 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2137 := z.DecBinary()
	_ = yym2137
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2138 := r.ContainerType()
		if yyct2138 == codecSelferValueTypeMap1234 {
			yyl2138 := r.ReadMapStart()
			if yyl2138 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2138, d)
			}
		} else if yyct2138 == codecSelferValueTypeArray1234 {
			yyl2138 := r.ReadArrayStart()
			if yyl2138 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2138, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2139Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2139Slc
	var yyhl2139 bool = l >= 0
	for yyj2139 := 0; ; yyj2139++ {
		if yyhl2139 {
			if yyj2139 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2139Slc = r.DecodeBytes(yys2139Slc, true, true)
		yys2139 := string(yys2139Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2139 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "targetRef":
			if r.TryDecodeAsNil() {
				if x.TargetRef != nil {
					x.TargetRef = nil
				}
			} else {
				if x.TargetRef == nil {
					x.TargetRef = new(ObjectReference)
				}
				x.TargetRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2139)
		} // end switch yys2139
	} // end for yyj2139
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2142 int
	var yyb2142 bool
	var yyhl2142 bool = l >= 0
	yyj2142++
	if yyhl2142 {
		yyb2142 = yyj2142 > l
	} else {
		yyb2142 = r.CheckBreak()
	}
	if yyb2142 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2142++
	if yyhl2142 {
		yyb2142 = yyj2142 > l
	} else {
		yyb2142 = r.CheckBreak()
	}
	if yyb2142 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TargetRef != nil {
			x.TargetRef = nil
		}
	} else {
		if x.TargetRef == nil {
			x.TargetRef = new(ObjectReference)
		}
		x.TargetRef.CodecDecodeSelf(d)
	}
	for {
		yyj2142++
		if yyhl2142 {
			yyb2142 = yyj2142 > l
		} else {
			yyb2142 = r.CheckBreak()
		}
		if yyb2142 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2142-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2145 := z.EncBinary()
		_ = yym2145
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2146 := !z.EncBinary()
			yy2arr2146 := z.EncBasicHandle().StructToArray
			var yyq2146 [3]bool
			_, _, _ = yysep2146, yyq2146, yy2arr2146
			const yyr2146 bool = false
			yyq2146[0] = x.Name != ""
			yyq2146[2] = x.Protocol != ""
			var yynn2146 int
			if yyr2146 || yy2arr2146 {
				r.EncodeArrayStart(3)
			} else {
				yynn2146 = 1
				for _, b := range yyq2146 {
					if b {
						yynn2146++
					}
				}
				r.EncodeMapStart(yynn2146)
				yynn2146 = 0
			}
			if yyr2146 || yy2arr2146 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2146[0] {
					yym2148 := z.EncBinary()
					_ = yym2148
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2146[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2149 := z.EncBinary()
					_ = yym2149
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2146 || yy2arr2146 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2151 := z.EncBinary()
				_ = yym2151
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2152 := z.EncBinary()
				_ = yym2152
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2146 || yy2arr2146 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2146[2] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2146[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr2146 || yy2arr2146 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2154 := z.DecBinary()
	_ = yym2154
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2155 := r.ContainerType()
		if yyct2155 == codecSelferValueTypeMap1234 {
			yyl2155 := r.ReadMapStart()
			if yyl2155 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2155, d)
			}
		} else if yyct2155 == codecSelferValueTypeArray1234 {
			yyl2155 := r.ReadArrayStart()
			if yyl2155 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2155, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2156Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2156Slc
	var yyhl2156 bool = l >= 0
	for yyj2156 := 0; ; yyj2156++ {
		if yyhl2156 {
			if yyj2156 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2156Slc = r.DecodeBytes(yys2156Slc, true, true)
		yys2156 := string(yys2156Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2156 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2156)
		} // end switch yys2156
	} // end for yyj2156
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2160 int
	var yyb2160 bool
	var yyhl2160 bool = l >= 0
	yyj2160++
	if yyhl2160 {
		yyb2160 = yyj2160 > l
	} else {
		yyb2160 = r.CheckBreak()
	}
	if yyb2160 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2160++
	if yyhl2160 {
		yyb2160 = yyj2160 > l
	} else {
		yyb2160 = r.CheckBreak()
	}
	if yyb2160 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2160++
	if yyhl2160 {
		yyb2160 = yyj2160 > l
	} else {
		yyb2160 = r.CheckBreak()
	}
	if yyb2160 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	for {
		yyj2160++
		if yyhl2160 {
			yyb2160 = yyj2160 > l
		} else {
			yyb2160 = r.CheckBreak()
		}
		if yyb2160 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2160-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointsList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2164 := z.EncBinary()
		_ = yym2164
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2165 := !z.EncBinary()
			yy2arr2165 := z.EncBasicHandle().StructToArray
			var yyq2165 [4]bool
			_, _, _ = yysep2165, yyq2165, yy2arr2165
			const yyr2165 bool = false
			yyq2165[0] = x.Kind != ""
			yyq2165[1] = x.APIVersion != ""
			yyq2165[2] = true
			var yynn2165 int
			if yyr2165 || yy2arr2165 {
				r.EncodeArrayStart(4)
			} else {
				yynn2165 = 1
				for _, b := range yyq2165 {
					if b {
						yynn2165++
					}
				}
				r.EncodeMapStart(yynn2165)
				yynn2165 = 0
			}
			if yyr2165 || yy2arr2165 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2165[0] {
					yym2167 := z.EncBinary()
					_ = yym2167
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2165[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2168 := z.EncBinary()
					_ = yym2168
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2165 || yy2arr2165 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2165[1] {
					yym2170 := z.EncBinary()
					_ = yym2170
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2165[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2171 := z.EncBinary()
					_ = yym2171
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2165 || yy2arr2165 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2165[2] {
					yy2173 := &x.ListMeta
					yym2174 := z.EncBinary()
					_ = yym2174
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2173) {
					} else {
						z.EncFallback(yy2173)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2165[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2175 := &x.ListMeta
					yym2176 := z.EncBinary()
					_ = yym2176
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2175) {
					} else {
						z.EncFallback(yy2175)
					}
				}
			}
			if yyr2165 || yy2arr2165 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2178 := z.EncBinary()
					_ = yym2178
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2179 := z.EncBinary()
					_ = yym2179
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			}
			if yyr2165 || yy2arr2165 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointsList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2180 := z.DecBinary()
	_ = yym2180
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2181 := r.ContainerType()
		if yyct2181 == codecSelferValueTypeMap1234 {
			yyl2181 := r.ReadMapStart()
			if yyl2181 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2181, d)
			}
		} else if yyct2181 == codecSelferValueTypeArray1234 {
			yyl2181 := r.ReadArrayStart()
			if yyl2181 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2181, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointsList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2182Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2182Slc
	var yyhl2182 bool = l >= 0
	for yyj2182 := 0; ; yyj2182++ {
		if yyhl2182 {
			if yyj2182 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2182Slc = r.DecodeBytes(yys2182Slc, true, true)
		yys2182 := string(yys2182Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2182 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2185 := &x.ListMeta
				yym2186 := z.DecBinary()
				_ = yym2186
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2185) {
				} else {
					z.DecFallback(yyv2185, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2187 := &x.Items
				yym2188 := z.DecBinary()
				_ = yym2188
				if false {
				} else {
					h.decSliceEndpoints((*[]Endpoints)(yyv2187), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2182)
		} // end switch yys2182
	} // end for yyj2182
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointsList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2189 int
	var yyb2189 bool
	var yyhl2189 bool = l >= 0
	yyj2189++
	if yyhl2189 {
		yyb2189 = yyj2189 > l
	} else {
		yyb2189 = r.CheckBreak()
	}
	if yyb2189 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2189++
	if yyhl2189 {
		yyb2189 = yyj2189 > l
	} else {
		yyb2189 = r.CheckBreak()
	}
	if yyb2189 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2189++
	if yyhl2189 {
		yyb2189 = yyj2189 > l
	} else {
		yyb2189 = r.CheckBreak()
	}
	if yyb2189 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2192 := &x.ListMeta
		yym2193 := z.DecBinary()
		_ = yym2193
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2192) {
		} else {
			z.DecFallback(yyv2192, false)
		}
	}
	yyj2189++
	if yyhl2189 {
		yyb2189 = yyj2189 > l
	} else {
		yyb2189 = r.CheckBreak()
	}
	if yyb2189 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2194 := &x.Items
		yym2195 := z.DecBinary()
		_ = yym2195
		if false {
		} else {
			h.decSliceEndpoints((*[]Endpoints)(yyv2194), d)
		}
	}
	for {
		yyj2189++
		if yyhl2189 {
			yyb2189 = yyj2189 > l
		} else {
			yyb2189 = r.CheckBreak()
		}
		if yyb2189 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2189-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2196 := z.EncBinary()
		_ = yym2196
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2197 := !z.EncBinary()
			yy2arr2197 := z.EncBasicHandle().StructToArray
			var yyq2197 [4]bool
			_, _, _ = yysep2197, yyq2197, yy2arr2197
			const yyr2197 bool = false
			yyq2197[0] = x.PodCIDR != ""
			yyq2197[1] = x.ExternalID != ""
			yyq2197[2] = x.ProviderID != ""
			yyq2197[3] = x.Unschedulable != false
			var yynn2197 int
			if yyr2197 || yy2arr2197 {
				r.EncodeArrayStart(4)
			} else {
				yynn2197 = 0
				for _, b := range yyq2197 {
					if b {
						yynn2197++
					}
				}
				r.EncodeMapStart(yynn2197)
				yynn2197 = 0
			}
			if yyr2197 || yy2arr2197 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2197[0] {
					yym2199 := z.EncBinary()
					_ = yym2199
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2197[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podCIDR"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2200 := z.EncBinary()
					_ = yym2200
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				}
			}
			if yyr2197 || yy2arr2197 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2197[1] {
					yym2202 := z.EncBinary()
					_ = yym2202
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2197[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2203 := z.EncBinary()
					_ = yym2203
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				}
			}
			if yyr2197 || yy2arr2197 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2197[2] {
					yym2205 := z.EncBinary()
					_ = yym2205
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2197[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("providerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2206 := z.EncBinary()
					_ = yym2206
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				}
			}
			if yyr2197 || yy2arr2197 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2197[3] {
					yym2208 := z.EncBinary()
					_ = yym2208
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2197[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("unschedulable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2209 := z.EncBinary()
					_ = yym2209
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				}
			}
			if yyr2197 || yy2arr2197 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2210 := z.DecBinary()
	_ = yym2210
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2211 := r.ContainerType()
		if yyct2211 == codecSelferValueTypeMap1234 {
			yyl2211 := r.ReadMapStart()
			if yyl2211 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2211, d)
			}
		} else if yyct2211 == codecSelferValueTypeArray1234 {
			yyl2211 := r.ReadArrayStart()
			if yyl2211 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2211, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2212Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2212Slc
	var yyhl2212 bool = l >= 0
	for yyj2212 := 0; ; yyj2212++ {
		if yyhl2212 {
			if yyj2212 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2212Slc = r.DecodeBytes(yys2212Slc, true, true)
		yys2212 := string(yys2212Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2212 {
		case "podCIDR":
			if r.TryDecodeAsNil() {
				x.PodCIDR = ""
			} else {
				x.PodCIDR = string(r.DecodeString())
			}
		case "externalID":
			if r.TryDecodeAsNil() {
				x.ExternalID = ""
			} else {
				x.ExternalID = string(r.DecodeString())
			}
		case "providerID":
			if r.TryDecodeAsNil() {
				x.ProviderID = ""
			} else {
				x.ProviderID = string(r.DecodeString())
			}
		case "unschedulable":
			if r.TryDecodeAsNil() {
				x.Unschedulable = false
			} else {
				x.Unschedulable = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2212)
		} // end switch yys2212
	} // end for yyj2212
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2217 int
	var yyb2217 bool
	var yyhl2217 bool = l >= 0
	yyj2217++
	if yyhl2217 {
		yyb2217 = yyj2217 > l
	} else {
		yyb2217 = r.CheckBreak()
	}
	if yyb2217 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodCIDR = ""
	} else {
		x.PodCIDR = string(r.DecodeString())
	}
	yyj2217++
	if yyhl2217 {
		yyb2217 = yyj2217 > l
	} else {
		yyb2217 = r.CheckBreak()
	}
	if yyb2217 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalID = ""
	} else {
		x.ExternalID = string(r.DecodeString())
	}
	yyj2217++
	if yyhl2217 {
		yyb2217 = yyj2217 > l
	} else {
		yyb2217 = r.CheckBreak()
	}
	if yyb2217 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ProviderID = ""
	} else {
		x.ProviderID = string(r.DecodeString())
	}
	yyj2217++
	if yyhl2217 {
		yyb2217 = yyj2217 > l
	} else {
		yyb2217 = r.CheckBreak()
	}
	if yyb2217 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Unschedulable = false
	} else {
		x.Unschedulable = bool(r.DecodeBool())
	}
	for {
		yyj2217++
		if yyhl2217 {
			yyb2217 = yyj2217 > l
		} else {
			yyb2217 = r.CheckBreak()
		}
		if yyb2217 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2217-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonEndpoint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2222 := z.EncBinary()
		_ = yym2222
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2223 := !z.EncBinary()
			yy2arr2223 := z.EncBasicHandle().StructToArray
			var yyq2223 [1]bool
			_, _, _ = yysep2223, yyq2223, yy2arr2223
			const yyr2223 bool = false
			var yynn2223 int
			if yyr2223 || yy2arr2223 {
				r.EncodeArrayStart(1)
			} else {
				yynn2223 = 1
				for _, b := range yyq2223 {
					if b {
						yynn2223++
					}
				}
				r.EncodeMapStart(yynn2223)
				yynn2223 = 0
			}
			if yyr2223 || yy2arr2223 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2225 := z.EncBinary()
				_ = yym2225
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2226 := z.EncBinary()
				_ = yym2226
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2223 || yy2arr2223 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonEndpoint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2227 := z.DecBinary()
	_ = yym2227
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2228 := r.ContainerType()
		if yyct2228 == codecSelferValueTypeMap1234 {
			yyl2228 := r.ReadMapStart()
			if yyl2228 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2228, d)
			}
		} else if yyct2228 == codecSelferValueTypeArray1234 {
			yyl2228 := r.ReadArrayStart()
			if yyl2228 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2228, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2229Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2229Slc
	var yyhl2229 bool = l >= 0
	for yyj2229 := 0; ; yyj2229++ {
		if yyhl2229 {
			if yyj2229 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2229Slc = r.DecodeBytes(yys2229Slc, true, true)
		yys2229 := string(yys2229Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2229 {
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2229)
		} // end switch yys2229
	} // end for yyj2229
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonEndpoint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2231 int
	var yyb2231 bool
	var yyhl2231 bool = l >= 0
	yyj2231++
	if yyhl2231 {
		yyb2231 = yyj2231 > l
	} else {
		yyb2231 = r.CheckBreak()
	}
	if yyb2231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	for {
		yyj2231++
		if yyhl2231 {
			yyb2231 = yyj2231 > l
		} else {
			yyb2231 = r.CheckBreak()
		}
		if yyb2231 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2231-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeDaemonEndpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2233 := z.EncBinary()
		_ = yym2233
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2234 := !z.EncBinary()
			yy2arr2234 := z.EncBasicHandle().StructToArray
			var yyq2234 [1]bool
			_, _, _ = yysep2234, yyq2234, yy2arr2234
			const yyr2234 bool = false
			yyq2234[0] = true
			var yynn2234 int
			if yyr2234 || yy2arr2234 {
				r.EncodeArrayStart(1)
			} else {
				yynn2234 = 0
				for _, b := range yyq2234 {
					if b {
						yynn2234++
					}
				}
				r.EncodeMapStart(yynn2234)
				yynn2234 = 0
			}
			if yyr2234 || yy2arr2234 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2234[0] {
					yy2236 := &x.KubeletEndpoint
					yy2236.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2234[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kubeletEndpoint"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2237 := &x.KubeletEndpoint
					yy2237.CodecEncodeSelf(e)
				}
			}
			if yyr2234 || yy2arr2234 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeDaemonEndpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2238 := z.DecBinary()
	_ = yym2238
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2239 := r.ContainerType()
		if yyct2239 == codecSelferValueTypeMap1234 {
			yyl2239 := r.ReadMapStart()
			if yyl2239 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2239, d)
			}
		} else if yyct2239 == codecSelferValueTypeArray1234 {
			yyl2239 := r.ReadArrayStart()
			if yyl2239 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2239, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2240Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2240Slc
	var yyhl2240 bool = l >= 0
	for yyj2240 := 0; ; yyj2240++ {
		if yyhl2240 {
			if yyj2240 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2240Slc = r.DecodeBytes(yys2240Slc, true, true)
		yys2240 := string(yys2240Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2240 {
		case "kubeletEndpoint":
			if r.TryDecodeAsNil() {
				x.KubeletEndpoint = DaemonEndpoint{}
			} else {
				yyv2241 := &x.KubeletEndpoint
				yyv2241.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2240)
		} // end switch yys2240
	} // end for yyj2240
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2242 int
	var yyb2242 bool
	var yyhl2242 bool = l >= 0
	yyj2242++
	if yyhl2242 {
		yyb2242 = yyj2242 > l
	} else {
		yyb2242 = r.CheckBreak()
	}
	if yyb2242 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletEndpoint = DaemonEndpoint{}
	} else {
		yyv2243 := &x.KubeletEndpoint
		yyv2243.CodecDecodeSelf(d)
	}
	for {
		yyj2242++
		if yyhl2242 {
			yyb2242 = yyj2242 > l
		} else {
			yyb2242 = r.CheckBreak()
		}
		if yyb2242 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2242-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSystemInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2244 := z.EncBinary()
		_ = yym2244
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2245 := !z.EncBinary()
			yy2arr2245 := z.EncBasicHandle().StructToArray
			var yyq2245 [8]bool
			_, _, _ = yysep2245, yyq2245, yy2arr2245
			const yyr2245 bool = false
			var yynn2245 int
			if yyr2245 || yy2arr2245 {
				r.EncodeArrayStart(8)
			} else {
				yynn2245 = 8
				for _, b := range yyq2245 {
					if b {
						yynn2245++
					}
				}
				r.EncodeMapStart(yynn2245)
				yynn2245 = 0
			}
			if yyr2245 || yy2arr2245 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2247 := z.EncBinary()
				_ = yym2247
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("machineID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2248 := z.EncBinary()
				_ = yym2248
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			}
			if yyr2245 || yy2arr2245 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2250 := z.EncBinary()
				_ = yym2250
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("systemUUID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2251 := z.EncBinary()
				_ = yym2251
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			}
			if yyr2245 || yy2arr2245 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2253 := z.EncBinary()
				_ = yym2253
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("bootID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2254 := z.EncBinary()
				_ = yym2254
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			}
			if yyr2245 || yy2arr2245 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2256 := z.EncBinary()
				_ = yym2256
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kernelVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2257 := z.EncBinary()
				_ = yym2257
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			}
			if yyr2245 || yy2arr2245 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2259 := z.EncBinary()
				_ = yym2259
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OsImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osImage"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2260 := z.EncBinary()
				_ = yym2260
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OsImage))
				}
			}
			if yyr2245 || yy2arr2245 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2262 := z.EncBinary()
				_ = yym2262
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerRuntimeVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2263 := z.EncBinary()
				_ = yym2263
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			}
			if yyr2245 || yy2arr2245 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2265 := z.EncBinary()
				_ = yym2265
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeletVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2266 := z.EncBinary()
				_ = yym2266
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			}
			if yyr2245 || yy2arr2245 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2268 := z.EncBinary()
				_ = yym2268
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeProxyVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2269 := z.EncBinary()
				_ = yym2269
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			}
			if yyr2245 || yy2arr2245 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSystemInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2270 := z.DecBinary()
	_ = yym2270
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2271 := r.ContainerType()
		if yyct2271 == codecSelferValueTypeMap1234 {
			yyl2271 := r.ReadMapStart()
			if yyl2271 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2271, d)
			}
		} else if yyct2271 == codecSelferValueTypeArray1234 {
			yyl2271 := r.ReadArrayStart()
			if yyl2271 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2271, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2272Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2272Slc
	var yyhl2272 bool = l >= 0
	for yyj2272 := 0; ; yyj2272++ {
		if yyhl2272 {
			if yyj2272 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2272Slc = r.DecodeBytes(yys2272Slc, true, true)
		yys2272 := string(yys2272Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2272 {
		case "machineID":
			if r.TryDecodeAsNil() {
				x.MachineID = ""
			} else {
				x.MachineID = string(r.DecodeString())
			}
		case "systemUUID":
			if r.TryDecodeAsNil() {
				x.SystemUUID = ""
			} else {
				x.SystemUUID = string(r.DecodeString())
			}
		case "bootID":
			if r.TryDecodeAsNil() {
				x.BootID = ""
			} else {
				x.BootID = string(r.DecodeString())
			}
		case "kernelVersion":
			if r.TryDecodeAsNil() {
				x.KernelVersion = ""
			} else {
				x.KernelVersion = string(r.DecodeString())
			}
		case "osImage":
			if r.TryDecodeAsNil() {
				x.OsImage = ""
			} else {
				x.OsImage = string(r.DecodeString())
			}
		case "containerRuntimeVersion":
			if r.TryDecodeAsNil() {
				x.ContainerRuntimeVersion = ""
			} else {
				x.ContainerRuntimeVersion = string(r.DecodeString())
			}
		case "kubeletVersion":
			if r.TryDecodeAsNil() {
				x.KubeletVersion = ""
			} else {
				x.KubeletVersion = string(r.DecodeString())
			}
		case "kubeProxyVersion":
			if r.TryDecodeAsNil() {
				x.KubeProxyVersion = ""
			} else {
				x.KubeProxyVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2272)
		} // end switch yys2272
	} // end for yyj2272
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSystemInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2281 int
	var yyb2281 bool
	var yyhl2281 bool = l >= 0
	yyj2281++
	if yyhl2281 {
		yyb2281 = yyj2281 > l
	} else {
		yyb2281 = r.CheckBreak()
	}
	if yyb2281 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MachineID = ""
	} else {
		x.MachineID = string(r.DecodeString())
	}
	yyj2281++
	if yyhl2281 {
		yyb2281 = yyj2281 > l
	} else {
		yyb2281 = r.CheckBreak()
	}
	if yyb2281 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SystemUUID = ""
	} else {
		x.SystemUUID = string(r.DecodeString())
	}
	yyj2281++
	if yyhl2281 {
		yyb2281 = yyj2281 > l
	} else {
		yyb2281 = r.CheckBreak()
	}
	if yyb2281 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.BootID = ""
	} else {
		x.BootID = string(r.DecodeString())
	}
	yyj2281++
	if yyhl2281 {
		yyb2281 = yyj2281 > l
	} else {
		yyb2281 = r.CheckBreak()
	}
	if yyb2281 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KernelVersion = ""
	} else {
		x.KernelVersion = string(r.DecodeString())
	}
	yyj2281++
	if yyhl2281 {
		yyb2281 = yyj2281 > l
	} else {
		yyb2281 = r.CheckBreak()
	}
	if yyb2281 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OsImage = ""
	} else {
		x.OsImage = string(r.DecodeString())
	}
	yyj2281++
	if yyhl2281 {
		yyb2281 = yyj2281 > l
	} else {
		yyb2281 = r.CheckBreak()
	}
	if yyb2281 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerRuntimeVersion = ""
	} else {
		x.ContainerRuntimeVersion = string(r.DecodeString())
	}
	yyj2281++
	if yyhl2281 {
		yyb2281 = yyj2281 > l
	} else {
		yyb2281 = r.CheckBreak()
	}
	if yyb2281 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletVersion = ""
	} else {
		x.KubeletVersion = string(r.DecodeString())
	}
	yyj2281++
	if yyhl2281 {
		yyb2281 = yyj2281 > l
	} else {
		yyb2281 = r.CheckBreak()
	}
	if yyb2281 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeProxyVersion = ""
	} else {
		x.KubeProxyVersion = string(r.DecodeString())
	}
	for {
		yyj2281++
		if yyhl2281 {
			yyb2281 = yyj2281 > l
		} else {
			yyb2281 = r.CheckBreak()
		}
		if yyb2281 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2281-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2290 := z.EncBinary()
		_ = yym2290
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2291 := !z.EncBinary()
			yy2arr2291 := z.EncBasicHandle().StructToArray
			var yyq2291 [7]bool
			_, _, _ = yysep2291, yyq2291, yy2arr2291
			const yyr2291 bool = false
			yyq2291[0] = len(x.Capacity) != 0
			yyq2291[1] = len(x.Allocatable) != 0
			yyq2291[2] = x.Phase != ""
			yyq2291[3] = len(x.Conditions) != 0
			yyq2291[4] = len(x.Addresses) != 0
			yyq2291[5] = true
			yyq2291[6] = true
			var yynn2291 int
			if yyr2291 || yy2arr2291 {
				r.EncodeArrayStart(7)
			} else {
				yynn2291 = 0
				for _, b := range yyq2291 {
					if b {
						yynn2291++
					}
				}
				r.EncodeMapStart(yynn2291)
				yynn2291 = 0
			}
			if yyr2291 || yy2arr2291 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2291[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2291[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2291 || yy2arr2291 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2291[1] {
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2291[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("allocatable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2291 || yy2arr2291 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2291[2] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2291[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2291 || yy2arr2291 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2291[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2296 := z.EncBinary()
						_ = yym2296
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2291[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2297 := z.EncBinary()
						_ = yym2297
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2291 || yy2arr2291 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2291[4] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2299 := z.EncBinary()
						_ = yym2299
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2291[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2300 := z.EncBinary()
						_ = yym2300
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2291 || yy2arr2291 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2291[5] {
					yy2302 := &x.DaemonEndpoints
					yy2302.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2291[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("daemonEndpoints"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2303 := &x.DaemonEndpoints
					yy2303.CodecEncodeSelf(e)
				}
			}
			if yyr2291 || yy2arr2291 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2291[6] {
					yy2305 := &x.NodeInfo
					yy2305.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2291[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeInfo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2306 := &x.NodeInfo
					yy2306.CodecEncodeSelf(e)
				}
			}
			if yyr2291 || yy2arr2291 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2307 := z.DecBinary()
	_ = yym2307
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2308 := r.ContainerType()
		if yyct2308 == codecSelferValueTypeMap1234 {
			yyl2308 := r.ReadMapStart()
			if yyl2308 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2308, d)
			}
		} else if yyct2308 == codecSelferValueTypeArray1234 {
			yyl2308 := r.ReadArrayStart()
			if yyl2308 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2308, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2309Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2309Slc
	var yyhl2309 bool = l >= 0
	for yyj2309 := 0; ; yyj2309++ {
		if yyhl2309 {
			if yyj2309 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2309Slc = r.DecodeBytes(yys2309Slc, true, true)
		yys2309 := string(yys2309Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2309 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv2310 := &x.Capacity
				yyv2310.CodecDecodeSelf(d)
			}
		case "allocatable":
			if r.TryDecodeAsNil() {
				x.Allocatable = nil
			} else {
				yyv2311 := &x.Allocatable
				yyv2311.CodecDecodeSelf(d)
			}
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NodePhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2313 := &x.Conditions
				yym2314 := z.DecBinary()
				_ = yym2314
				if false {
				} else {
					h.decSliceNodeCondition((*[]NodeCondition)(yyv2313), d)
				}
			}
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2315 := &x.Addresses
				yym2316 := z.DecBinary()
				_ = yym2316
				if false {
				} else {
					h.decSliceNodeAddress((*[]NodeAddress)(yyv2315), d)
				}
			}
		case "daemonEndpoints":
			if r.TryDecodeAsNil() {
				x.DaemonEndpoints = NodeDaemonEndpoints{}
			} else {
				yyv2317 := &x.DaemonEndpoints
				yyv2317.CodecDecodeSelf(d)
			}
		case "nodeInfo":
			if r.TryDecodeAsNil() {
				x.NodeInfo = NodeSystemInfo{}
			} else {
				yyv2318 := &x.NodeInfo
				yyv2318.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2309)
		} // end switch yys2309
	} // end for yyj2309
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2319 int
	var yyb2319 bool
	var yyhl2319 bool = l >= 0
	yyj2319++
	if yyhl2319 {
		yyb2319 = yyj2319 > l
	} else {
		yyb2319 = r.CheckBreak()
	}
	if yyb2319 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv2320 := &x.Capacity
		yyv2320.CodecDecodeSelf(d)
	}
	yyj2319++
	if yyhl2319 {
		yyb2319 = yyj2319 > l
	} else {
		yyb2319 = r.CheckBreak()
	}
	if yyb2319 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Allocatable = nil
	} else {
		yyv2321 := &x.Allocatable
		yyv2321.CodecDecodeSelf(d)
	}
	yyj2319++
	if yyhl2319 {
		yyb2319 = yyj2319 > l
	} else {
		yyb2319 = r.CheckBreak()
	}
	if yyb2319 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NodePhase(r.DecodeString())
	}
	yyj2319++
	if yyhl2319 {
		yyb2319 = yyj2319 > l
	} else {
		yyb2319 = r.CheckBreak()
	}
	if yyb2319 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2323 := &x.Conditions
		yym2324 := z.DecBinary()
		_ = yym2324
		if false {
		} else {
			h.decSliceNodeCondition((*[]NodeCondition)(yyv2323), d)
		}
	}
	yyj2319++
	if yyhl2319 {
		yyb2319 = yyj2319 > l
	} else {
		yyb2319 = r.CheckBreak()
	}
	if yyb2319 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2325 := &x.Addresses
		yym2326 := z.DecBinary()
		_ = yym2326
		if false {
		} else {
			h.decSliceNodeAddress((*[]NodeAddress)(yyv2325), d)
		}
	}
	yyj2319++
	if yyhl2319 {
		yyb2319 = yyj2319 > l
	} else {
		yyb2319 = r.CheckBreak()
	}
	if yyb2319 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DaemonEndpoints = NodeDaemonEndpoints{}
	} else {
		yyv2327 := &x.DaemonEndpoints
		yyv2327.CodecDecodeSelf(d)
	}
	yyj2319++
	if yyhl2319 {
		yyb2319 = yyj2319 > l
	} else {
		yyb2319 = r.CheckBreak()
	}
	if yyb2319 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeInfo = NodeSystemInfo{}
	} else {
		yyv2328 := &x.NodeInfo
		yyv2328.CodecDecodeSelf(d)
	}
	for {
		yyj2319++
		if yyhl2319 {
			yyb2319 = yyj2319 > l
		} else {
			yyb2319 = r.CheckBreak()
		}
		if yyb2319 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2319-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2329 := z.EncBinary()
	_ = yym2329
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2330 := z.DecBinary()
	_ = yym2330
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x NodeConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2331 := z.EncBinary()
	_ = yym2331
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2332 := z.DecBinary()
	_ = yym2332
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2333 := z.EncBinary()
		_ = yym2333
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2334 := !z.EncBinary()
			yy2arr2334 := z.EncBasicHandle().StructToArray
			var yyq2334 [6]bool
			_, _, _ = yysep2334, yyq2334, yy2arr2334
			const yyr2334 bool = false
			yyq2334[2] = true
			yyq2334[3] = true
			yyq2334[4] = x.Reason != ""
			yyq2334[5] = x.Message != ""
			var yynn2334 int
			if yyr2334 || yy2arr2334 {
				r.EncodeArrayStart(6)
			} else {
				yynn2334 = 2
				for _, b := range yyq2334 {
					if b {
						yynn2334++
					}
				}
				r.EncodeMapStart(yynn2334)
				yynn2334 = 0
			}
			if yyr2334 || yy2arr2334 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2334 || yy2arr2334 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr2334 || yy2arr2334 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2334[2] {
					yy2338 := &x.LastHeartbeatTime
					yym2339 := z.EncBinary()
					_ = yym2339
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2338) {
					} else if yym2339 {
						z.EncBinaryMarshal(yy2338)
					} else if !yym2339 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2338)
					} else {
						z.EncFallback(yy2338)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2334[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastHeartbeatTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2340 := &x.LastHeartbeatTime
					yym2341 := z.EncBinary()
					_ = yym2341
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2340) {
					} else if yym2341 {
						z.EncBinaryMarshal(yy2340)
					} else if !yym2341 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2340)
					} else {
						z.EncFallback(yy2340)
					}
				}
			}
			if yyr2334 || yy2arr2334 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2334[3] {
					yy2343 := &x.LastTransitionTime
					yym2344 := z.EncBinary()
					_ = yym2344
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2343) {
					} else if yym2344 {
						z.EncBinaryMarshal(yy2343)
					} else if !yym2344 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2343)
					} else {
						z.EncFallback(yy2343)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2334[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2345 := &x.LastTransitionTime
					yym2346 := z.EncBinary()
					_ = yym2346
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2345) {
					} else if yym2346 {
						z.EncBinaryMarshal(yy2345)
					} else if !yym2346 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2345)
					} else {
						z.EncFallback(yy2345)
					}
				}
			}
			if yyr2334 || yy2arr2334 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2334[4] {
					yym2348 := z.EncBinary()
					_ = yym2348
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2334[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2349 := z.EncBinary()
					_ = yym2349
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2334 || yy2arr2334 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2334[5] {
					yym2351 := z.EncBinary()
					_ = yym2351
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2334[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2352 := z.EncBinary()
					_ = yym2352
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2334 || yy2arr2334 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2353 := z.DecBinary()
	_ = yym2353
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2354 := r.ContainerType()
		if yyct2354 == codecSelferValueTypeMap1234 {
			yyl2354 := r.ReadMapStart()
			if yyl2354 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2354, d)
			}
		} else if yyct2354 == codecSelferValueTypeArray1234 {
			yyl2354 := r.ReadArrayStart()
			if yyl2354 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2354, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2355Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2355Slc
	var yyhl2355 bool = l >= 0
	for yyj2355 := 0; ; yyj2355++ {
		if yyhl2355 {
			if yyj2355 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2355Slc = r.DecodeBytes(yys2355Slc, true, true)
		yys2355 := string(yys2355Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2355 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastHeartbeatTime":
			if r.TryDecodeAsNil() {
				x.LastHeartbeatTime = pkg2_unversioned.Time{}
			} else {
				yyv2358 := &x.LastHeartbeatTime
				yym2359 := z.DecBinary()
				_ = yym2359
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2358) {
				} else if yym2359 {
					z.DecBinaryUnmarshal(yyv2358)
				} else if !yym2359 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2358)
				} else {
					z.DecFallback(yyv2358, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv2360 := &x.LastTransitionTime
				yym2361 := z.DecBinary()
				_ = yym2361
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2360) {
				} else if yym2361 {
					z.DecBinaryUnmarshal(yyv2360)
				} else if !yym2361 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2360)
				} else {
					z.DecFallback(yyv2360, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2355)
		} // end switch yys2355
	} // end for yyj2355
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2364 int
	var yyb2364 bool
	var yyhl2364 bool = l >= 0
	yyj2364++
	if yyhl2364 {
		yyb2364 = yyj2364 > l
	} else {
		yyb2364 = r.CheckBreak()
	}
	if yyb2364 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeConditionType(r.DecodeString())
	}
	yyj2364++
	if yyhl2364 {
		yyb2364 = yyj2364 > l
	} else {
		yyb2364 = r.CheckBreak()
	}
	if yyb2364 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj2364++
	if yyhl2364 {
		yyb2364 = yyj2364 > l
	} else {
		yyb2364 = r.CheckBreak()
	}
	if yyb2364 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastHeartbeatTime = pkg2_unversioned.Time{}
	} else {
		yyv2367 := &x.LastHeartbeatTime
		yym2368 := z.DecBinary()
		_ = yym2368
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2367) {
		} else if yym2368 {
			z.DecBinaryUnmarshal(yyv2367)
		} else if !yym2368 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2367)
		} else {
			z.DecFallback(yyv2367, false)
		}
	}
	yyj2364++
	if yyhl2364 {
		yyb2364 = yyj2364 > l
	} else {
		yyb2364 = r.CheckBreak()
	}
	if yyb2364 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv2369 := &x.LastTransitionTime
		yym2370 := z.DecBinary()
		_ = yym2370
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2369) {
		} else if yym2370 {
			z.DecBinaryUnmarshal(yyv2369)
		} else if !yym2370 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2369)
		} else {
			z.DecFallback(yyv2369, false)
		}
	}
	yyj2364++
	if yyhl2364 {
		yyb2364 = yyj2364 > l
	} else {
		yyb2364 = r.CheckBreak()
	}
	if yyb2364 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2364++
	if yyhl2364 {
		yyb2364 = yyj2364 > l
	} else {
		yyb2364 = r.CheckBreak()
	}
	if yyb2364 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj2364++
		if yyhl2364 {
			yyb2364 = yyj2364 > l
		} else {
			yyb2364 = r.CheckBreak()
		}
		if yyb2364 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2364-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeAddressType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2373 := z.EncBinary()
	_ = yym2373
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeAddressType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2374 := z.DecBinary()
	_ = yym2374
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2375 := z.EncBinary()
		_ = yym2375
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2376 := !z.EncBinary()
			yy2arr2376 := z.EncBasicHandle().StructToArray
			var yyq2376 [2]bool
			_, _, _ = yysep2376, yyq2376, yy2arr2376
			const yyr2376 bool = false
			var yynn2376 int
			if yyr2376 || yy2arr2376 {
				r.EncodeArrayStart(2)
			} else {
				yynn2376 = 2
				for _, b := range yyq2376 {
					if b {
						yynn2376++
					}
				}
				r.EncodeMapStart(yynn2376)
				yynn2376 = 0
			}
			if yyr2376 || yy2arr2376 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2376 || yy2arr2376 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2379 := z.EncBinary()
				_ = yym2379
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("address"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2380 := z.EncBinary()
				_ = yym2380
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			}
			if yyr2376 || yy2arr2376 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2381 := z.DecBinary()
	_ = yym2381
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2382 := r.ContainerType()
		if yyct2382 == codecSelferValueTypeMap1234 {
			yyl2382 := r.ReadMapStart()
			if yyl2382 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2382, d)
			}
		} else if yyct2382 == codecSelferValueTypeArray1234 {
			yyl2382 := r.ReadArrayStart()
			if yyl2382 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2382, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2383Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2383Slc
	var yyhl2383 bool = l >= 0
	for yyj2383 := 0; ; yyj2383++ {
		if yyhl2383 {
			if yyj2383 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2383Slc = r.DecodeBytes(yys2383Slc, true, true)
		yys2383 := string(yys2383Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2383 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeAddressType(r.DecodeString())
			}
		case "address":
			if r.TryDecodeAsNil() {
				x.Address = ""
			} else {
				x.Address = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2383)
		} // end switch yys2383
	} // end for yyj2383
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2386 int
	var yyb2386 bool
	var yyhl2386 bool = l >= 0
	yyj2386++
	if yyhl2386 {
		yyb2386 = yyj2386 > l
	} else {
		yyb2386 = r.CheckBreak()
	}
	if yyb2386 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeAddressType(r.DecodeString())
	}
	yyj2386++
	if yyhl2386 {
		yyb2386 = yyj2386 > l
	} else {
		yyb2386 = r.CheckBreak()
	}
	if yyb2386 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Address = ""
	} else {
		x.Address = string(r.DecodeString())
	}
	for {
		yyj2386++
		if yyhl2386 {
			yyb2386 = yyj2386 > l
		} else {
			yyb2386 = r.CheckBreak()
		}
		if yyb2386 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2386-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2389 := z.EncBinary()
	_ = yym2389
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2390 := z.DecBinary()
	_ = yym2390
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2391 := z.EncBinary()
		_ = yym2391
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encResourceList((ResourceList)(x), e)
		}
	}
}

func (x *ResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2392 := z.DecBinary()
	_ = yym2392
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decResourceList((*ResourceList)(x), d)
	}
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2393 := z.EncBinary()
		_ = yym2393
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2394 := !z.EncBinary()
			yy2arr2394 := z.EncBasicHandle().StructToArray
			var yyq2394 [5]bool
			_, _, _ = yysep2394, yyq2394, yy2arr2394
			const yyr2394 bool = false
			yyq2394[0] = x.Kind != ""
			yyq2394[1] = x.APIVersion != ""
			yyq2394[2] = true
			yyq2394[3] = true
			yyq2394[4] = true
			var yynn2394 int
			if yyr2394 || yy2arr2394 {
				r.EncodeArrayStart(5)
			} else {
				yynn2394 = 0
				for _, b := range yyq2394 {
					if b {
						yynn2394++
					}
				}
				r.EncodeMapStart(yynn2394)
				yynn2394 = 0
			}
			if yyr2394 || yy2arr2394 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2394[0] {
					yym2396 := z.EncBinary()
					_ = yym2396
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2394[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2397 := z.EncBinary()
					_ = yym2397
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2394 || yy2arr2394 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2394[1] {
					yym2399 := z.EncBinary()
					_ = yym2399
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2394[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2400 := z.EncBinary()
					_ = yym2400
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2394 || yy2arr2394 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2394[2] {
					yy2402 := &x.ObjectMeta
					yy2402.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2394[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2403 := &x.ObjectMeta
					yy2403.CodecEncodeSelf(e)
				}
			}
			if yyr2394 || yy2arr2394 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2394[3] {
					yy2405 := &x.Spec
					yy2405.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2394[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2406 := &x.Spec
					yy2406.CodecEncodeSelf(e)
				}
			}
			if yyr2394 || yy2arr2394 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2394[4] {
					yy2408 := &x.Status
					yy2408.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2394[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2409 := &x.Status
					yy2409.CodecEncodeSelf(e)
				}
			}
			if yyr2394 || yy2arr2394 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2410 := z.DecBinary()
	_ = yym2410
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2411 := r.ContainerType()
		if yyct2411 == codecSelferValueTypeMap1234 {
			yyl2411 := r.ReadMapStart()
			if yyl2411 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2411, d)
			}
		} else if yyct2411 == codecSelferValueTypeArray1234 {
			yyl2411 := r.ReadArrayStart()
			if yyl2411 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2411, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2412Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2412Slc
	var yyhl2412 bool = l >= 0
	for yyj2412 := 0; ; yyj2412++ {
		if yyhl2412 {
			if yyj2412 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2412Slc = r.DecodeBytes(yys2412Slc, true, true)
		yys2412 := string(yys2412Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2412 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2415 := &x.ObjectMeta
				yyv2415.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NodeSpec{}
			} else {
				yyv2416 := &x.Spec
				yyv2416.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NodeStatus{}
			} else {
				yyv2417 := &x.Status
				yyv2417.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2412)
		} // end switch yys2412
	} // end for yyj2412
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2418 int
	var yyb2418 bool
	var yyhl2418 bool = l >= 0
	yyj2418++
	if yyhl2418 {
		yyb2418 = yyj2418 > l
	} else {
		yyb2418 = r.CheckBreak()
	}
	if yyb2418 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2418++
	if yyhl2418 {
		yyb2418 = yyj2418 > l
	} else {
		yyb2418 = r.CheckBreak()
	}
	if yyb2418 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2418++
	if yyhl2418 {
		yyb2418 = yyj2418 > l
	} else {
		yyb2418 = r.CheckBreak()
	}
	if yyb2418 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2421 := &x.ObjectMeta
		yyv2421.CodecDecodeSelf(d)
	}
	yyj2418++
	if yyhl2418 {
		yyb2418 = yyj2418 > l
	} else {
		yyb2418 = r.CheckBreak()
	}
	if yyb2418 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NodeSpec{}
	} else {
		yyv2422 := &x.Spec
		yyv2422.CodecDecodeSelf(d)
	}
	yyj2418++
	if yyhl2418 {
		yyb2418 = yyj2418 > l
	} else {
		yyb2418 = r.CheckBreak()
	}
	if yyb2418 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NodeStatus{}
	} else {
		yyv2423 := &x.Status
		yyv2423.CodecDecodeSelf(d)
	}
	for {
		yyj2418++
		if yyhl2418 {
			yyb2418 = yyj2418 > l
		} else {
			yyb2418 = r.CheckBreak()
		}
		if yyb2418 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2418-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2424 := z.EncBinary()
		_ = yym2424
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2425 := !z.EncBinary()
			yy2arr2425 := z.EncBasicHandle().StructToArray
			var yyq2425 [4]bool
			_, _, _ = yysep2425, yyq2425, yy2arr2425
			const yyr2425 bool = false
			yyq2425[0] = x.Kind != ""
			yyq2425[1] = x.APIVersion != ""
			yyq2425[2] = true
			var yynn2425 int
			if yyr2425 || yy2arr2425 {
				r.EncodeArrayStart(4)
			} else {
				yynn2425 = 1
				for _, b := range yyq2425 {
					if b {
						yynn2425++
					}
				}
				r.EncodeMapStart(yynn2425)
				yynn2425 = 0
			}
			if yyr2425 || yy2arr2425 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2425[0] {
					yym2427 := z.EncBinary()
					_ = yym2427
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2425[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2428 := z.EncBinary()
					_ = yym2428
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2425 || yy2arr2425 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2425[1] {
					yym2430 := z.EncBinary()
					_ = yym2430
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2425[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2431 := z.EncBinary()
					_ = yym2431
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2425 || yy2arr2425 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2425[2] {
					yy2433 := &x.ListMeta
					yym2434 := z.EncBinary()
					_ = yym2434
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2433) {
					} else {
						z.EncFallback(yy2433)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2425[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2435 := &x.ListMeta
					yym2436 := z.EncBinary()
					_ = yym2436
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2435) {
					} else {
						z.EncFallback(yy2435)
					}
				}
			}
			if yyr2425 || yy2arr2425 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2438 := z.EncBinary()
					_ = yym2438
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2439 := z.EncBinary()
					_ = yym2439
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			}
			if yyr2425 || yy2arr2425 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2440 := z.DecBinary()
	_ = yym2440
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2441 := r.ContainerType()
		if yyct2441 == codecSelferValueTypeMap1234 {
			yyl2441 := r.ReadMapStart()
			if yyl2441 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2441, d)
			}
		} else if yyct2441 == codecSelferValueTypeArray1234 {
			yyl2441 := r.ReadArrayStart()
			if yyl2441 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2441, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2442Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2442Slc
	var yyhl2442 bool = l >= 0
	for yyj2442 := 0; ; yyj2442++ {
		if yyhl2442 {
			if yyj2442 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2442Slc = r.DecodeBytes(yys2442Slc, true, true)
		yys2442 := string(yys2442Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2442 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2445 := &x.ListMeta
				yym2446 := z.DecBinary()
				_ = yym2446
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2445) {
				} else {
					z.DecFallback(yyv2445, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2447 := &x.Items
				yym2448 := z.DecBinary()
				_ = yym2448
				if false {
				} else {
					h.decSliceNode((*[]Node)(yyv2447), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2442)
		} // end switch yys2442
	} // end for yyj2442
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2449 int
	var yyb2449 bool
	var yyhl2449 bool = l >= 0
	yyj2449++
	if yyhl2449 {
		yyb2449 = yyj2449 > l
	} else {
		yyb2449 = r.CheckBreak()
	}
	if yyb2449 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2449++
	if yyhl2449 {
		yyb2449 = yyj2449 > l
	} else {
		yyb2449 = r.CheckBreak()
	}
	if yyb2449 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2449++
	if yyhl2449 {
		yyb2449 = yyj2449 > l
	} else {
		yyb2449 = r.CheckBreak()
	}
	if yyb2449 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2452 := &x.ListMeta
		yym2453 := z.DecBinary()
		_ = yym2453
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2452) {
		} else {
			z.DecFallback(yyv2452, false)
		}
	}
	yyj2449++
	if yyhl2449 {
		yyb2449 = yyj2449 > l
	} else {
		yyb2449 = r.CheckBreak()
	}
	if yyb2449 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2454 := &x.Items
		yym2455 := z.DecBinary()
		_ = yym2455
		if false {
		} else {
			h.decSliceNode((*[]Node)(yyv2454), d)
		}
	}
	for {
		yyj2449++
		if yyhl2449 {
			yyb2449 = yyj2449 > l
		} else {
			yyb2449 = r.CheckBreak()
		}
		if yyb2449 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2449-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x FinalizerName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2456 := z.EncBinary()
	_ = yym2456
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FinalizerName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2457 := z.DecBinary()
	_ = yym2457
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NamespaceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2458 := z.EncBinary()
		_ = yym2458
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2459 := !z.EncBinary()
			yy2arr2459 := z.EncBasicHandle().StructToArray
			var yyq2459 [1]bool
			_, _, _ = yysep2459, yyq2459, yy2arr2459
			const yyr2459 bool = false
			yyq2459[0] = len(x.Finalizers) != 0
			var yynn2459 int
			if yyr2459 || yy2arr2459 {
				r.EncodeArrayStart(1)
			} else {
				yynn2459 = 0
				for _, b := range yyq2459 {
					if b {
						yynn2459++
					}
				}
				r.EncodeMapStart(yynn2459)
				yynn2459 = 0
			}
			if yyr2459 || yy2arr2459 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2459[0] {
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym2461 := z.EncBinary()
						_ = yym2461
						if false {
						} else {
							h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2459[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finalizers"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym2462 := z.EncBinary()
						_ = yym2462
						if false {
						} else {
							h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
						}
					}
				}
			}
			if yyr2459 || yy2arr2459 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2463 := z.DecBinary()
	_ = yym2463
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2464 := r.ContainerType()
		if yyct2464 == codecSelferValueTypeMap1234 {
			yyl2464 := r.ReadMapStart()
			if yyl2464 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2464, d)
			}
		} else if yyct2464 == codecSelferValueTypeArray1234 {
			yyl2464 := r.ReadArrayStart()
			if yyl2464 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2464, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2465Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2465Slc
	var yyhl2465 bool = l >= 0
	for yyj2465 := 0; ; yyj2465++ {
		if yyhl2465 {
			if yyj2465 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2465Slc = r.DecodeBytes(yys2465Slc, true, true)
		yys2465 := string(yys2465Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2465 {
		case "finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv2466 := &x.Finalizers
				yym2467 := z.DecBinary()
				_ = yym2467
				if false {
				} else {
					h.decSliceFinalizerName((*[]FinalizerName)(yyv2466), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2465)
		} // end switch yys2465
	} // end for yyj2465
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2468 int
	var yyb2468 bool
	var yyhl2468 bool = l >= 0
	yyj2468++
	if yyhl2468 {
		yyb2468 = yyj2468 > l
	} else {
		yyb2468 = r.CheckBreak()
	}
	if yyb2468 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv2469 := &x.Finalizers
		yym2470 := z.DecBinary()
		_ = yym2470
		if false {
		} else {
			h.decSliceFinalizerName((*[]FinalizerName)(yyv2469), d)
		}
	}
	for {
		yyj2468++
		if yyhl2468 {
			yyb2468 = yyj2468 > l
		} else {
			yyb2468 = r.CheckBreak()
		}
		if yyb2468 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2468-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2471 := z.EncBinary()
		_ = yym2471
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2472 := !z.EncBinary()
			yy2arr2472 := z.EncBasicHandle().StructToArray
			var yyq2472 [1]bool
			_, _, _ = yysep2472, yyq2472, yy2arr2472
			const yyr2472 bool = false
			yyq2472[0] = x.Phase != ""
			var yynn2472 int
			if yyr2472 || yy2arr2472 {
				r.EncodeArrayStart(1)
			} else {
				yynn2472 = 0
				for _, b := range yyq2472 {
					if b {
						yynn2472++
					}
				}
				r.EncodeMapStart(yynn2472)
				yynn2472 = 0
			}
			if yyr2472 || yy2arr2472 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2472[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2472[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2472 || yy2arr2472 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2474 := z.DecBinary()
	_ = yym2474
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2475 := r.ContainerType()
		if yyct2475 == codecSelferValueTypeMap1234 {
			yyl2475 := r.ReadMapStart()
			if yyl2475 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2475, d)
			}
		} else if yyct2475 == codecSelferValueTypeArray1234 {
			yyl2475 := r.ReadArrayStart()
			if yyl2475 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2475, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2476Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2476Slc
	var yyhl2476 bool = l >= 0
	for yyj2476 := 0; ; yyj2476++ {
		if yyhl2476 {
			if yyj2476 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2476Slc = r.DecodeBytes(yys2476Slc, true, true)
		yys2476 := string(yys2476Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2476 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NamespacePhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2476)
		} // end switch yys2476
	} // end for yyj2476
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2478 int
	var yyb2478 bool
	var yyhl2478 bool = l >= 0
	yyj2478++
	if yyhl2478 {
		yyb2478 = yyj2478 > l
	} else {
		yyb2478 = r.CheckBreak()
	}
	if yyb2478 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NamespacePhase(r.DecodeString())
	}
	for {
		yyj2478++
		if yyhl2478 {
			yyb2478 = yyj2478 > l
		} else {
			yyb2478 = r.CheckBreak()
		}
		if yyb2478 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2478-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NamespacePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2480 := z.EncBinary()
	_ = yym2480
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NamespacePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2481 := z.DecBinary()
	_ = yym2481
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Namespace) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2482 := z.EncBinary()
		_ = yym2482
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2483 := !z.EncBinary()
			yy2arr2483 := z.EncBasicHandle().StructToArray
			var yyq2483 [5]bool
			_, _, _ = yysep2483, yyq2483, yy2arr2483
			const yyr2483 bool = false
			yyq2483[0] = x.Kind != ""
			yyq2483[1] = x.APIVersion != ""
			yyq2483[2] = true
			yyq2483[3] = true
			yyq2483[4] = true
			var yynn2483 int
			if yyr2483 || yy2arr2483 {
				r.EncodeArrayStart(5)
			} else {
				yynn2483 = 0
				for _, b := range yyq2483 {
					if b {
						yynn2483++
					}
				}
				r.EncodeMapStart(yynn2483)
				yynn2483 = 0
			}
			if yyr2483 || yy2arr2483 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2483[0] {
					yym2485 := z.EncBinary()
					_ = yym2485
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2483[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2486 := z.EncBinary()
					_ = yym2486
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2483 || yy2arr2483 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2483[1] {
					yym2488 := z.EncBinary()
					_ = yym2488
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2483[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2489 := z.EncBinary()
					_ = yym2489
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2483 || yy2arr2483 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2483[2] {
					yy2491 := &x.ObjectMeta
					yy2491.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2483[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2492 := &x.ObjectMeta
					yy2492.CodecEncodeSelf(e)
				}
			}
			if yyr2483 || yy2arr2483 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2483[3] {
					yy2494 := &x.Spec
					yy2494.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2483[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2495 := &x.Spec
					yy2495.CodecEncodeSelf(e)
				}
			}
			if yyr2483 || yy2arr2483 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2483[4] {
					yy2497 := &x.Status
					yy2497.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2483[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2498 := &x.Status
					yy2498.CodecEncodeSelf(e)
				}
			}
			if yyr2483 || yy2arr2483 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Namespace) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2499 := z.DecBinary()
	_ = yym2499
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2500 := r.ContainerType()
		if yyct2500 == codecSelferValueTypeMap1234 {
			yyl2500 := r.ReadMapStart()
			if yyl2500 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2500, d)
			}
		} else if yyct2500 == codecSelferValueTypeArray1234 {
			yyl2500 := r.ReadArrayStart()
			if yyl2500 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2500, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Namespace) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2501Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2501Slc
	var yyhl2501 bool = l >= 0
	for yyj2501 := 0; ; yyj2501++ {
		if yyhl2501 {
			if yyj2501 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2501Slc = r.DecodeBytes(yys2501Slc, true, true)
		yys2501 := string(yys2501Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2501 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2504 := &x.ObjectMeta
				yyv2504.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NamespaceSpec{}
			} else {
				yyv2505 := &x.Spec
				yyv2505.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NamespaceStatus{}
			} else {
				yyv2506 := &x.Status
				yyv2506.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2501)
		} // end switch yys2501
	} // end for yyj2501
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Namespace) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2507 int
	var yyb2507 bool
	var yyhl2507 bool = l >= 0
	yyj2507++
	if yyhl2507 {
		yyb2507 = yyj2507 > l
	} else {
		yyb2507 = r.CheckBreak()
	}
	if yyb2507 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2507++
	if yyhl2507 {
		yyb2507 = yyj2507 > l
	} else {
		yyb2507 = r.CheckBreak()
	}
	if yyb2507 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2507++
	if yyhl2507 {
		yyb2507 = yyj2507 > l
	} else {
		yyb2507 = r.CheckBreak()
	}
	if yyb2507 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2510 := &x.ObjectMeta
		yyv2510.CodecDecodeSelf(d)
	}
	yyj2507++
	if yyhl2507 {
		yyb2507 = yyj2507 > l
	} else {
		yyb2507 = r.CheckBreak()
	}
	if yyb2507 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NamespaceSpec{}
	} else {
		yyv2511 := &x.Spec
		yyv2511.CodecDecodeSelf(d)
	}
	yyj2507++
	if yyhl2507 {
		yyb2507 = yyj2507 > l
	} else {
		yyb2507 = r.CheckBreak()
	}
	if yyb2507 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NamespaceStatus{}
	} else {
		yyv2512 := &x.Status
		yyv2512.CodecDecodeSelf(d)
	}
	for {
		yyj2507++
		if yyhl2507 {
			yyb2507 = yyj2507 > l
		} else {
			yyb2507 = r.CheckBreak()
		}
		if yyb2507 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2507-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2513 := z.EncBinary()
		_ = yym2513
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2514 := !z.EncBinary()
			yy2arr2514 := z.EncBasicHandle().StructToArray
			var yyq2514 [4]bool
			_, _, _ = yysep2514, yyq2514, yy2arr2514
			const yyr2514 bool = false
			yyq2514[0] = x.Kind != ""
			yyq2514[1] = x.APIVersion != ""
			yyq2514[2] = true
			var yynn2514 int
			if yyr2514 || yy2arr2514 {
				r.EncodeArrayStart(4)
			} else {
				yynn2514 = 1
				for _, b := range yyq2514 {
					if b {
						yynn2514++
					}
				}
				r.EncodeMapStart(yynn2514)
				yynn2514 = 0
			}
			if yyr2514 || yy2arr2514 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2514[0] {
					yym2516 := z.EncBinary()
					_ = yym2516
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2514[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2517 := z.EncBinary()
					_ = yym2517
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2514 || yy2arr2514 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2514[1] {
					yym2519 := z.EncBinary()
					_ = yym2519
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2514[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2520 := z.EncBinary()
					_ = yym2520
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2514 || yy2arr2514 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2514[2] {
					yy2522 := &x.ListMeta
					yym2523 := z.EncBinary()
					_ = yym2523
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2522) {
					} else {
						z.EncFallback(yy2522)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2514[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2524 := &x.ListMeta
					yym2525 := z.EncBinary()
					_ = yym2525
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2524) {
					} else {
						z.EncFallback(yy2524)
					}
				}
			}
			if yyr2514 || yy2arr2514 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2527 := z.EncBinary()
					_ = yym2527
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2528 := z.EncBinary()
					_ = yym2528
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			}
			if yyr2514 || yy2arr2514 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2529 := z.DecBinary()
	_ = yym2529
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2530 := r.ContainerType()
		if yyct2530 == codecSelferValueTypeMap1234 {
			yyl2530 := r.ReadMapStart()
			if yyl2530 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2530, d)
			}
		} else if yyct2530 == codecSelferValueTypeArray1234 {
			yyl2530 := r.ReadArrayStart()
			if yyl2530 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2530, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2531Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2531Slc
	var yyhl2531 bool = l >= 0
	for yyj2531 := 0; ; yyj2531++ {
		if yyhl2531 {
			if yyj2531 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2531Slc = r.DecodeBytes(yys2531Slc, true, true)
		yys2531 := string(yys2531Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2531 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2534 := &x.ListMeta
				yym2535 := z.DecBinary()
				_ = yym2535
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2534) {
				} else {
					z.DecFallback(yyv2534, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2536 := &x.Items
				yym2537 := z.DecBinary()
				_ = yym2537
				if false {
				} else {
					h.decSliceNamespace((*[]Namespace)(yyv2536), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2531)
		} // end switch yys2531
	} // end for yyj2531
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2538 int
	var yyb2538 bool
	var yyhl2538 bool = l >= 0
	yyj2538++
	if yyhl2538 {
		yyb2538 = yyj2538 > l
	} else {
		yyb2538 = r.CheckBreak()
	}
	if yyb2538 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2538++
	if yyhl2538 {
		yyb2538 = yyj2538 > l
	} else {
		yyb2538 = r.CheckBreak()
	}
	if yyb2538 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2538++
	if yyhl2538 {
		yyb2538 = yyj2538 > l
	} else {
		yyb2538 = r.CheckBreak()
	}
	if yyb2538 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2541 := &x.ListMeta
		yym2542 := z.DecBinary()
		_ = yym2542
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2541) {
		} else {
			z.DecFallback(yyv2541, false)
		}
	}
	yyj2538++
	if yyhl2538 {
		yyb2538 = yyj2538 > l
	} else {
		yyb2538 = r.CheckBreak()
	}
	if yyb2538 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2543 := &x.Items
		yym2544 := z.DecBinary()
		_ = yym2544
		if false {
		} else {
			h.decSliceNamespace((*[]Namespace)(yyv2543), d)
		}
	}
	for {
		yyj2538++
		if yyhl2538 {
			yyb2538 = yyj2538 > l
		} else {
			yyb2538 = r.CheckBreak()
		}
		if yyb2538 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2538-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Binding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2545 := z.EncBinary()
		_ = yym2545
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2546 := !z.EncBinary()
			yy2arr2546 := z.EncBasicHandle().StructToArray
			var yyq2546 [4]bool
			_, _, _ = yysep2546, yyq2546, yy2arr2546
			const yyr2546 bool = false
			yyq2546[0] = x.Kind != ""
			yyq2546[1] = x.APIVersion != ""
			yyq2546[2] = true
			var yynn2546 int
			if yyr2546 || yy2arr2546 {
				r.EncodeArrayStart(4)
			} else {
				yynn2546 = 1
				for _, b := range yyq2546 {
					if b {
						yynn2546++
					}
				}
				r.EncodeMapStart(yynn2546)
				yynn2546 = 0
			}
			if yyr2546 || yy2arr2546 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2546[0] {
					yym2548 := z.EncBinary()
					_ = yym2548
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2546[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2549 := z.EncBinary()
					_ = yym2549
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2546 || yy2arr2546 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2546[1] {
					yym2551 := z.EncBinary()
					_ = yym2551
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2546[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2552 := z.EncBinary()
					_ = yym2552
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2546 || yy2arr2546 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2546[2] {
					yy2554 := &x.ObjectMeta
					yy2554.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2546[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2555 := &x.ObjectMeta
					yy2555.CodecEncodeSelf(e)
				}
			}
			if yyr2546 || yy2arr2546 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy2557 := &x.Target
				yy2557.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy2558 := &x.Target
				yy2558.CodecEncodeSelf(e)
			}
			if yyr2546 || yy2arr2546 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Binding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2559 := z.DecBinary()
	_ = yym2559
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2560 := r.ContainerType()
		if yyct2560 == codecSelferValueTypeMap1234 {
			yyl2560 := r.ReadMapStart()
			if yyl2560 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2560, d)
			}
		} else if yyct2560 == codecSelferValueTypeArray1234 {
			yyl2560 := r.ReadArrayStart()
			if yyl2560 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2560, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Binding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2561Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2561Slc
	var yyhl2561 bool = l >= 0
	for yyj2561 := 0; ; yyj2561++ {
		if yyhl2561 {
			if yyj2561 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2561Slc = r.DecodeBytes(yys2561Slc, true, true)
		yys2561 := string(yys2561Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2561 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2564 := &x.ObjectMeta
				yyv2564.CodecDecodeSelf(d)
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.Target = ObjectReference{}
			} else {
				yyv2565 := &x.Target
				yyv2565.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2561)
		} // end switch yys2561
	} // end for yyj2561
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Binding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2566 int
	var yyb2566 bool
	var yyhl2566 bool = l >= 0
	yyj2566++
	if yyhl2566 {
		yyb2566 = yyj2566 > l
	} else {
		yyb2566 = r.CheckBreak()
	}
	if yyb2566 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2566++
	if yyhl2566 {
		yyb2566 = yyj2566 > l
	} else {
		yyb2566 = r.CheckBreak()
	}
	if yyb2566 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2566++
	if yyhl2566 {
		yyb2566 = yyj2566 > l
	} else {
		yyb2566 = r.CheckBreak()
	}
	if yyb2566 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2569 := &x.ObjectMeta
		yyv2569.CodecDecodeSelf(d)
	}
	yyj2566++
	if yyhl2566 {
		yyb2566 = yyj2566 > l
	} else {
		yyb2566 = r.CheckBreak()
	}
	if yyb2566 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Target = ObjectReference{}
	} else {
		yyv2570 := &x.Target
		yyv2570.CodecDecodeSelf(d)
	}
	for {
		yyj2566++
		if yyhl2566 {
			yyb2566 = yyj2566 > l
		} else {
			yyb2566 = r.CheckBreak()
		}
		if yyb2566 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2566-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeleteOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2571 := z.EncBinary()
		_ = yym2571
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2572 := !z.EncBinary()
			yy2arr2572 := z.EncBasicHandle().StructToArray
			var yyq2572 [3]bool
			_, _, _ = yysep2572, yyq2572, yy2arr2572
			const yyr2572 bool = false
			yyq2572[0] = x.Kind != ""
			yyq2572[1] = x.APIVersion != ""
			var yynn2572 int
			if yyr2572 || yy2arr2572 {
				r.EncodeArrayStart(3)
			} else {
				yynn2572 = 1
				for _, b := range yyq2572 {
					if b {
						yynn2572++
					}
				}
				r.EncodeMapStart(yynn2572)
				yynn2572 = 0
			}
			if yyr2572 || yy2arr2572 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2572[0] {
					yym2574 := z.EncBinary()
					_ = yym2574
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2572[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2575 := z.EncBinary()
					_ = yym2575
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2572 || yy2arr2572 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2572[1] {
					yym2577 := z.EncBinary()
					_ = yym2577
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2572[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2578 := z.EncBinary()
					_ = yym2578
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2572 || yy2arr2572 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.GracePeriodSeconds == nil {
					r.EncodeNil()
				} else {
					yy2580 := *x.GracePeriodSeconds
					yym2581 := z.EncBinary()
					_ = yym2581
					if false {
					} else {
						r.EncodeInt(int64(yy2580))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("gracePeriodSeconds"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.GracePeriodSeconds == nil {
					r.EncodeNil()
				} else {
					yy2582 := *x.GracePeriodSeconds
					yym2583 := z.EncBinary()
					_ = yym2583
					if false {
					} else {
						r.EncodeInt(int64(yy2582))
					}
				}
			}
			if yyr2572 || yy2arr2572 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeleteOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2584 := z.DecBinary()
	_ = yym2584
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2585 := r.ContainerType()
		if yyct2585 == codecSelferValueTypeMap1234 {
			yyl2585 := r.ReadMapStart()
			if yyl2585 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2585, d)
			}
		} else if yyct2585 == codecSelferValueTypeArray1234 {
			yyl2585 := r.ReadArrayStart()
			if yyl2585 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2585, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeleteOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2586Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2586Slc
	var yyhl2586 bool = l >= 0
	for yyj2586 := 0; ; yyj2586++ {
		if yyhl2586 {
			if yyj2586 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2586Slc = r.DecodeBytes(yys2586Slc, true, true)
		yys2586 := string(yys2586Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2586 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "gracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.GracePeriodSeconds != nil {
					x.GracePeriodSeconds = nil
				}
			} else {
				if x.GracePeriodSeconds == nil {
					x.GracePeriodSeconds = new(int64)
				}
				yym2590 := z.DecBinary()
				_ = yym2590
				if false {
				} else {
					*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2586)
		} // end switch yys2586
	} // end for yyj2586
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeleteOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2591 int
	var yyb2591 bool
	var yyhl2591 bool = l >= 0
	yyj2591++
	if yyhl2591 {
		yyb2591 = yyj2591 > l
	} else {
		yyb2591 = r.CheckBreak()
	}
	if yyb2591 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2591++
	if yyhl2591 {
		yyb2591 = yyj2591 > l
	} else {
		yyb2591 = r.CheckBreak()
	}
	if yyb2591 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2591++
	if yyhl2591 {
		yyb2591 = yyj2591 > l
	} else {
		yyb2591 = r.CheckBreak()
	}
	if yyb2591 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GracePeriodSeconds != nil {
			x.GracePeriodSeconds = nil
		}
	} else {
		if x.GracePeriodSeconds == nil {
			x.GracePeriodSeconds = new(int64)
		}
		yym2595 := z.DecBinary()
		_ = yym2595
		if false {
		} else {
			*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2591++
		if yyhl2591 {
			yyb2591 = yyj2591 > l
		} else {
			yyb2591 = r.CheckBreak()
		}
		if yyb2591 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2591-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ListOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2596 := z.EncBinary()
		_ = yym2596
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2597 := !z.EncBinary()
			yy2arr2597 := z.EncBasicHandle().StructToArray
			var yyq2597 [7]bool
			_, _, _ = yysep2597, yyq2597, yy2arr2597
			const yyr2597 bool = false
			yyq2597[0] = x.Kind != ""
			yyq2597[1] = x.APIVersion != ""
			yyq2597[2] = x.LabelSelector != ""
			yyq2597[3] = x.FieldSelector != ""
			yyq2597[4] = x.Watch != false
			yyq2597[5] = x.ResourceVersion != ""
			yyq2597[6] = x.TimeoutSeconds != nil
			var yynn2597 int
			if yyr2597 || yy2arr2597 {
				r.EncodeArrayStart(7)
			} else {
				yynn2597 = 0
				for _, b := range yyq2597 {
					if b {
						yynn2597++
					}
				}
				r.EncodeMapStart(yynn2597)
				yynn2597 = 0
			}
			if yyr2597 || yy2arr2597 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2597[0] {
					yym2599 := z.EncBinary()
					_ = yym2599
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2597[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2600 := z.EncBinary()
					_ = yym2600
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2597 || yy2arr2597 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2597[1] {
					yym2602 := z.EncBinary()
					_ = yym2602
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2597[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2603 := z.EncBinary()
					_ = yym2603
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2597 || yy2arr2597 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2597[2] {
					yym2605 := z.EncBinary()
					_ = yym2605
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2597[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2606 := z.EncBinary()
					_ = yym2606
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				}
			}
			if yyr2597 || yy2arr2597 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2597[3] {
					yym2608 := z.EncBinary()
					_ = yym2608
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2597[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2609 := z.EncBinary()
					_ = yym2609
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				}
			}
			if yyr2597 || yy2arr2597 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2597[4] {
					yym2611 := z.EncBinary()
					_ = yym2611
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2597[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("watch"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2612 := z.EncBinary()
					_ = yym2612
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				}
			}
			if yyr2597 || yy2arr2597 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2597[5] {
					yym2614 := z.EncBinary()
					_ = yym2614
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2597[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2615 := z.EncBinary()
					_ = yym2615
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2597 || yy2arr2597 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2597[6] {
					if x.TimeoutSeconds == nil {
						r.EncodeNil()
					} else {
						yy2617 := *x.TimeoutSeconds
						yym2618 := z.EncBinary()
						_ = yym2618
						if false {
						} else {
							r.EncodeInt(int64(yy2617))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2597[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TimeoutSeconds == nil {
						r.EncodeNil()
					} else {
						yy2619 := *x.TimeoutSeconds
						yym2620 := z.EncBinary()
						_ = yym2620
						if false {
						} else {
							r.EncodeInt(int64(yy2619))
						}
					}
				}
			}
			if yyr2597 || yy2arr2597 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ListOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2621 := z.DecBinary()
	_ = yym2621
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2622 := r.ContainerType()
		if yyct2622 == codecSelferValueTypeMap1234 {
			yyl2622 := r.ReadMapStart()
			if yyl2622 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2622, d)
			}
		} else if yyct2622 == codecSelferValueTypeArray1234 {
			yyl2622 := r.ReadArrayStart()
			if yyl2622 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2622, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ListOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2623Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2623Slc
	var yyhl2623 bool = l >= 0
	for yyj2623 := 0; ; yyj2623++ {
		if yyhl2623 {
			if yyj2623 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2623Slc = r.DecodeBytes(yys2623Slc, true, true)
		yys2623 := string(yys2623Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2623 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "labelSelector":
			if r.TryDecodeAsNil() {
				x.LabelSelector = ""
			} else {
				x.LabelSelector = string(r.DecodeString())
			}
		case "fieldSelector":
			if r.TryDecodeAsNil() {
				x.FieldSelector = ""
			} else {
				x.FieldSelector = string(r.DecodeString())
			}
		case "watch":
			if r.TryDecodeAsNil() {
				x.Watch = false
			} else {
				x.Watch = bool(r.DecodeBool())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				if x.TimeoutSeconds != nil {
					x.TimeoutSeconds = nil
				}
			} else {
				if x.TimeoutSeconds == nil {
					x.TimeoutSeconds = new(int64)
				}
				yym2631 := z.DecBinary()
				_ = yym2631
				if false {
				} else {
					*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2623)
		} // end switch yys2623
	} // end for yyj2623
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ListOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2632 int
	var yyb2632 bool
	var yyhl2632 bool = l >= 0
	yyj2632++
	if yyhl2632 {
		yyb2632 = yyj2632 > l
	} else {
		yyb2632 = r.CheckBreak()
	}
	if yyb2632 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2632++
	if yyhl2632 {
		yyb2632 = yyj2632 > l
	} else {
		yyb2632 = r.CheckBreak()
	}
	if yyb2632 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2632++
	if yyhl2632 {
		yyb2632 = yyj2632 > l
	} else {
		yyb2632 = r.CheckBreak()
	}
	if yyb2632 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LabelSelector = ""
	} else {
		x.LabelSelector = string(r.DecodeString())
	}
	yyj2632++
	if yyhl2632 {
		yyb2632 = yyj2632 > l
	} else {
		yyb2632 = r.CheckBreak()
	}
	if yyb2632 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldSelector = ""
	} else {
		x.FieldSelector = string(r.DecodeString())
	}
	yyj2632++
	if yyhl2632 {
		yyb2632 = yyj2632 > l
	} else {
		yyb2632 = r.CheckBreak()
	}
	if yyb2632 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Watch = false
	} else {
		x.Watch = bool(r.DecodeBool())
	}
	yyj2632++
	if yyhl2632 {
		yyb2632 = yyj2632 > l
	} else {
		yyb2632 = r.CheckBreak()
	}
	if yyb2632 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj2632++
	if yyhl2632 {
		yyb2632 = yyj2632 > l
	} else {
		yyb2632 = r.CheckBreak()
	}
	if yyb2632 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TimeoutSeconds != nil {
			x.TimeoutSeconds = nil
		}
	} else {
		if x.TimeoutSeconds == nil {
			x.TimeoutSeconds = new(int64)
		}
		yym2640 := z.DecBinary()
		_ = yym2640
		if false {
		} else {
			*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2632++
		if yyhl2632 {
			yyb2632 = yyj2632 > l
		} else {
			yyb2632 = r.CheckBreak()
		}
		if yyb2632 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2632-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodLogOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2641 := z.EncBinary()
		_ = yym2641
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2642 := !z.EncBinary()
			yy2arr2642 := z.EncBasicHandle().StructToArray
			var yyq2642 [10]bool
			_, _, _ = yysep2642, yyq2642, yy2arr2642
			const yyr2642 bool = false
			yyq2642[0] = x.Kind != ""
			yyq2642[1] = x.APIVersion != ""
			yyq2642[2] = x.Container != ""
			yyq2642[3] = x.Follow != false
			yyq2642[4] = x.Previous != false
			yyq2642[5] = x.SinceSeconds != nil
			yyq2642[6] = x.SinceTime != nil
			yyq2642[7] = x.Timestamps != false
			yyq2642[8] = x.TailLines != nil
			yyq2642[9] = x.LimitBytes != nil
			var yynn2642 int
			if yyr2642 || yy2arr2642 {
				r.EncodeArrayStart(10)
			} else {
				yynn2642 = 0
				for _, b := range yyq2642 {
					if b {
						yynn2642++
					}
				}
				r.EncodeMapStart(yynn2642)
				yynn2642 = 0
			}
			if yyr2642 || yy2arr2642 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2642[0] {
					yym2644 := z.EncBinary()
					_ = yym2644
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2642[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2645 := z.EncBinary()
					_ = yym2645
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2642 || yy2arr2642 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2642[1] {
					yym2647 := z.EncBinary()
					_ = yym2647
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2642[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2648 := z.EncBinary()
					_ = yym2648
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2642 || yy2arr2642 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2642[2] {
					yym2650 := z.EncBinary()
					_ = yym2650
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2642[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2651 := z.EncBinary()
					_ = yym2651
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr2642 || yy2arr2642 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2642[3] {
					yym2653 := z.EncBinary()
					_ = yym2653
					if false {
					} else {
						r.EncodeBool(bool(x.Follow))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2642[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("follow"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2654 := z.EncBinary()
					_ = yym2654
					if false {
					} else {
						r.EncodeBool(bool(x.Follow))
					}
				}
			}
			if yyr2642 || yy2arr2642 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2642[4] {
					yym2656 := z.EncBinary()
					_ = yym2656
					if false {
					} else {
						r.EncodeBool(bool(x.Previous))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2642[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("previous"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2657 := z.EncBinary()
					_ = yym2657
					if false {
					} else {
						r.EncodeBool(bool(x.Previous))
					}
				}
			}
			if yyr2642 || yy2arr2642 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2642[5] {
					if x.SinceSeconds == nil {
						r.EncodeNil()
					} else {
						yy2659 := *x.SinceSeconds
						yym2660 := z.EncBinary()
						_ = yym2660
						if false {
						} else {
							r.EncodeInt(int64(yy2659))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2642[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sinceSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SinceSeconds == nil {
						r.EncodeNil()
					} else {
						yy2661 := *x.SinceSeconds
						yym2662 := z.EncBinary()
						_ = yym2662
						if false {
						} else {
							r.EncodeInt(int64(yy2661))
						}
					}
				}
			}
			if yyr2642 || yy2arr2642 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2642[6] {
					if x.SinceTime == nil {
						r.EncodeNil()
					} else {
						yym2664 := z.EncBinary()
						_ = yym2664
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
						} else if yym2664 {
							z.EncBinaryMarshal(x.SinceTime)
						} else if !yym2664 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.SinceTime)
						} else {
							z.EncFallback(x.SinceTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2642[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sinceTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SinceTime == nil {
						r.EncodeNil()
					} else {
						yym2665 := z.EncBinary()
						_ = yym2665
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
						} else if yym2665 {
							z.EncBinaryMarshal(x.SinceTime)
						} else if !yym2665 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.SinceTime)
						} else {
							z.EncFallback(x.SinceTime)
						}
					}
				}
			}
			if yyr2642 || yy2arr2642 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2642[7] {
					yym2667 := z.EncBinary()
					_ = yym2667
					if false {
					} else {
						r.EncodeBool(bool(x.Timestamps))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2642[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timestamps"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2668 := z.EncBinary()
					_ = yym2668
					if false {
					} else {
						r.EncodeBool(bool(x.Timestamps))
					}
				}
			}
			if yyr2642 || yy2arr2642 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2642[8] {
					if x.TailLines == nil {
						r.EncodeNil()
					} else {
						yy2670 := *x.TailLines
						yym2671 := z.EncBinary()
						_ = yym2671
						if false {
						} else {
							r.EncodeInt(int64(yy2670))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2642[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tailLines"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TailLines == nil {
						r.EncodeNil()
					} else {
						yy2672 := *x.TailLines
						yym2673 := z.EncBinary()
						_ = yym2673
						if false {
						} else {
							r.EncodeInt(int64(yy2672))
						}
					}
				}
			}
			if yyr2642 || yy2arr2642 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2642[9] {
					if x.LimitBytes == nil {
						r.EncodeNil()
					} else {
						yy2675 := *x.LimitBytes
						yym2676 := z.EncBinary()
						_ = yym2676
						if false {
						} else {
							r.EncodeInt(int64(yy2675))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2642[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("limitBytes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LimitBytes == nil {
						r.EncodeNil()
					} else {
						yy2677 := *x.LimitBytes
						yym2678 := z.EncBinary()
						_ = yym2678
						if false {
						} else {
							r.EncodeInt(int64(yy2677))
						}
					}
				}
			}
			if yyr2642 || yy2arr2642 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodLogOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2679 := z.DecBinary()
	_ = yym2679
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2680 := r.ContainerType()
		if yyct2680 == codecSelferValueTypeMap1234 {
			yyl2680 := r.ReadMapStart()
			if yyl2680 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2680, d)
			}
		} else if yyct2680 == codecSelferValueTypeArray1234 {
			yyl2680 := r.ReadArrayStart()
			if yyl2680 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2680, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodLogOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2681Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2681Slc
	var yyhl2681 bool = l >= 0
	for yyj2681 := 0; ; yyj2681++ {
		if yyhl2681 {
			if yyj2681 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2681Slc = r.DecodeBytes(yys2681Slc, true, true)
		yys2681 := string(yys2681Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2681 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "follow":
			if r.TryDecodeAsNil() {
				x.Follow = false
			} else {
				x.Follow = bool(r.DecodeBool())
			}
		case "previous":
			if r.TryDecodeAsNil() {
				x.Previous = false
			} else {
				x.Previous = bool(r.DecodeBool())
			}
		case "sinceSeconds":
			if r.TryDecodeAsNil() {
				if x.SinceSeconds != nil {
					x.SinceSeconds = nil
				}
			} else {
				if x.SinceSeconds == nil {
					x.SinceSeconds = new(int64)
				}
				yym2688 := z.DecBinary()
				_ = yym2688
				if false {
				} else {
					*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "sinceTime":
			if r.TryDecodeAsNil() {
				if x.SinceTime != nil {
					x.SinceTime = nil
				}
			} else {
				if x.SinceTime == nil {
					x.SinceTime = new(pkg2_unversioned.Time)
				}
				yym2690 := z.DecBinary()
				_ = yym2690
				if false {
				} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
				} else if yym2690 {
					z.DecBinaryUnmarshal(x.SinceTime)
				} else if !yym2690 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.SinceTime)
				} else {
					z.DecFallback(x.SinceTime, false)
				}
			}
		case "timestamps":
			if r.TryDecodeAsNil() {
				x.Timestamps = false
			} else {
				x.Timestamps = bool(r.DecodeBool())
			}
		case "tailLines":
			if r.TryDecodeAsNil() {
				if x.TailLines != nil {
					x.TailLines = nil
				}
			} else {
				if x.TailLines == nil {
					x.TailLines = new(int64)
				}
				yym2693 := z.DecBinary()
				_ = yym2693
				if false {
				} else {
					*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
				}
			}
		case "limitBytes":
			if r.TryDecodeAsNil() {
				if x.LimitBytes != nil {
					x.LimitBytes = nil
				}
			} else {
				if x.LimitBytes == nil {
					x.LimitBytes = new(int64)
				}
				yym2695 := z.DecBinary()
				_ = yym2695
				if false {
				} else {
					*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2681)
		} // end switch yys2681
	} // end for yyj2681
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodLogOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2696 int
	var yyb2696 bool
	var yyhl2696 bool = l >= 0
	yyj2696++
	if yyhl2696 {
		yyb2696 = yyj2696 > l
	} else {
		yyb2696 = r.CheckBreak()
	}
	if yyb2696 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2696++
	if yyhl2696 {
		yyb2696 = yyj2696 > l
	} else {
		yyb2696 = r.CheckBreak()
	}
	if yyb2696 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2696++
	if yyhl2696 {
		yyb2696 = yyj2696 > l
	} else {
		yyb2696 = r.CheckBreak()
	}
	if yyb2696 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj2696++
	if yyhl2696 {
		yyb2696 = yyj2696 > l
	} else {
		yyb2696 = r.CheckBreak()
	}
	if yyb2696 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Follow = false
	} else {
		x.Follow = bool(r.DecodeBool())
	}
	yyj2696++
	if yyhl2696 {
		yyb2696 = yyj2696 > l
	} else {
		yyb2696 = r.CheckBreak()
	}
	if yyb2696 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Previous = false
	} else {
		x.Previous = bool(r.DecodeBool())
	}
	yyj2696++
	if yyhl2696 {
		yyb2696 = yyj2696 > l
	} else {
		yyb2696 = r.CheckBreak()
	}
	if yyb2696 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceSeconds != nil {
			x.SinceSeconds = nil
		}
	} else {
		if x.SinceSeconds == nil {
			x.SinceSeconds = new(int64)
		}
		yym2703 := z.DecBinary()
		_ = yym2703
		if false {
		} else {
			*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2696++
	if yyhl2696 {
		yyb2696 = yyj2696 > l
	} else {
		yyb2696 = r.CheckBreak()
	}
	if yyb2696 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceTime != nil {
			x.SinceTime = nil
		}
	} else {
		if x.SinceTime == nil {
			x.SinceTime = new(pkg2_unversioned.Time)
		}
		yym2705 := z.DecBinary()
		_ = yym2705
		if false {
		} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
		} else if yym2705 {
			z.DecBinaryUnmarshal(x.SinceTime)
		} else if !yym2705 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.SinceTime)
		} else {
			z.DecFallback(x.SinceTime, false)
		}
	}
	yyj2696++
	if yyhl2696 {
		yyb2696 = yyj2696 > l
	} else {
		yyb2696 = r.CheckBreak()
	}
	if yyb2696 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Timestamps = false
	} else {
		x.Timestamps = bool(r.DecodeBool())
	}
	yyj2696++
	if yyhl2696 {
		yyb2696 = yyj2696 > l
	} else {
		yyb2696 = r.CheckBreak()
	}
	if yyb2696 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TailLines != nil {
			x.TailLines = nil
		}
	} else {
		if x.TailLines == nil {
			x.TailLines = new(int64)
		}
		yym2708 := z.DecBinary()
		_ = yym2708
		if false {
		} else {
			*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
		}
	}
	yyj2696++
	if yyhl2696 {
		yyb2696 = yyj2696 > l
	} else {
		yyb2696 = r.CheckBreak()
	}
	if yyb2696 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LimitBytes != nil {
			x.LimitBytes = nil
		}
	} else {
		if x.LimitBytes == nil {
			x.LimitBytes = new(int64)
		}
		yym2710 := z.DecBinary()
		_ = yym2710
		if false {
		} else {
			*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2696++
		if yyhl2696 {
			yyb2696 = yyj2696 > l
		} else {
			yyb2696 = r.CheckBreak()
		}
		if yyb2696 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2696-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAttachOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2711 := z.EncBinary()
		_ = yym2711
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2712 := !z.EncBinary()
			yy2arr2712 := z.EncBasicHandle().StructToArray
			var yyq2712 [7]bool
			_, _, _ = yysep2712, yyq2712, yy2arr2712
			const yyr2712 bool = false
			yyq2712[0] = x.Kind != ""
			yyq2712[1] = x.APIVersion != ""
			yyq2712[2] = x.Stdin != false
			yyq2712[3] = x.Stdout != false
			yyq2712[4] = x.Stderr != false
			yyq2712[5] = x.TTY != false
			yyq2712[6] = x.Container != ""
			var yynn2712 int
			if yyr2712 || yy2arr2712 {
				r.EncodeArrayStart(7)
			} else {
				yynn2712 = 0
				for _, b := range yyq2712 {
					if b {
						yynn2712++
					}
				}
				r.EncodeMapStart(yynn2712)
				yynn2712 = 0
			}
			if yyr2712 || yy2arr2712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2712[0] {
					yym2714 := z.EncBinary()
					_ = yym2714
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2712[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2715 := z.EncBinary()
					_ = yym2715
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2712 || yy2arr2712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2712[1] {
					yym2717 := z.EncBinary()
					_ = yym2717
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2712[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2718 := z.EncBinary()
					_ = yym2718
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2712 || yy2arr2712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2712[2] {
					yym2720 := z.EncBinary()
					_ = yym2720
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2712[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2721 := z.EncBinary()
					_ = yym2721
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr2712 || yy2arr2712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2712[3] {
					yym2723 := z.EncBinary()
					_ = yym2723
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2712[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2724 := z.EncBinary()
					_ = yym2724
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr2712 || yy2arr2712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2712[4] {
					yym2726 := z.EncBinary()
					_ = yym2726
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2712[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2727 := z.EncBinary()
					_ = yym2727
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr2712 || yy2arr2712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2712[5] {
					yym2729 := z.EncBinary()
					_ = yym2729
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2712[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2730 := z.EncBinary()
					_ = yym2730
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr2712 || yy2arr2712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2712[6] {
					yym2732 := z.EncBinary()
					_ = yym2732
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2712[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2733 := z.EncBinary()
					_ = yym2733
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr2712 || yy2arr2712 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAttachOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2734 := z.DecBinary()
	_ = yym2734
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2735 := r.ContainerType()
		if yyct2735 == codecSelferValueTypeMap1234 {
			yyl2735 := r.ReadMapStart()
			if yyl2735 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2735, d)
			}
		} else if yyct2735 == codecSelferValueTypeArray1234 {
			yyl2735 := r.ReadArrayStart()
			if yyl2735 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2735, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2736Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2736Slc
	var yyhl2736 bool = l >= 0
	for yyj2736 := 0; ; yyj2736++ {
		if yyhl2736 {
			if yyj2736 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2736Slc = r.DecodeBytes(yys2736Slc, true, true)
		yys2736 := string(yys2736Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2736 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2736)
		} // end switch yys2736
	} // end for yyj2736
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAttachOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2744 int
	var yyb2744 bool
	var yyhl2744 bool = l >= 0
	yyj2744++
	if yyhl2744 {
		yyb2744 = yyj2744 > l
	} else {
		yyb2744 = r.CheckBreak()
	}
	if yyb2744 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2744++
	if yyhl2744 {
		yyb2744 = yyj2744 > l
	} else {
		yyb2744 = r.CheckBreak()
	}
	if yyb2744 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2744++
	if yyhl2744 {
		yyb2744 = yyj2744 > l
	} else {
		yyb2744 = r.CheckBreak()
	}
	if yyb2744 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj2744++
	if yyhl2744 {
		yyb2744 = yyj2744 > l
	} else {
		yyb2744 = r.CheckBreak()
	}
	if yyb2744 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj2744++
	if yyhl2744 {
		yyb2744 = yyj2744 > l
	} else {
		yyb2744 = r.CheckBreak()
	}
	if yyb2744 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj2744++
	if yyhl2744 {
		yyb2744 = yyj2744 > l
	} else {
		yyb2744 = r.CheckBreak()
	}
	if yyb2744 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj2744++
	if yyhl2744 {
		yyb2744 = yyj2744 > l
	} else {
		yyb2744 = r.CheckBreak()
	}
	if yyb2744 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	for {
		yyj2744++
		if yyhl2744 {
			yyb2744 = yyj2744 > l
		} else {
			yyb2744 = r.CheckBreak()
		}
		if yyb2744 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2744-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodExecOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2752 := z.EncBinary()
		_ = yym2752
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2753 := !z.EncBinary()
			yy2arr2753 := z.EncBasicHandle().StructToArray
			var yyq2753 [8]bool
			_, _, _ = yysep2753, yyq2753, yy2arr2753
			const yyr2753 bool = false
			yyq2753[0] = x.Kind != ""
			yyq2753[1] = x.APIVersion != ""
			yyq2753[2] = x.Stdin != false
			yyq2753[3] = x.Stdout != false
			yyq2753[4] = x.Stderr != false
			yyq2753[5] = x.TTY != false
			yyq2753[6] = x.Container != ""
			var yynn2753 int
			if yyr2753 || yy2arr2753 {
				r.EncodeArrayStart(8)
			} else {
				yynn2753 = 1
				for _, b := range yyq2753 {
					if b {
						yynn2753++
					}
				}
				r.EncodeMapStart(yynn2753)
				yynn2753 = 0
			}
			if yyr2753 || yy2arr2753 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2753[0] {
					yym2755 := z.EncBinary()
					_ = yym2755
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2753[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2756 := z.EncBinary()
					_ = yym2756
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2753 || yy2arr2753 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2753[1] {
					yym2758 := z.EncBinary()
					_ = yym2758
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2753[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2759 := z.EncBinary()
					_ = yym2759
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2753 || yy2arr2753 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2753[2] {
					yym2761 := z.EncBinary()
					_ = yym2761
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2753[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2762 := z.EncBinary()
					_ = yym2762
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr2753 || yy2arr2753 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2753[3] {
					yym2764 := z.EncBinary()
					_ = yym2764
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2753[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2765 := z.EncBinary()
					_ = yym2765
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr2753 || yy2arr2753 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2753[4] {
					yym2767 := z.EncBinary()
					_ = yym2767
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2753[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2768 := z.EncBinary()
					_ = yym2768
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr2753 || yy2arr2753 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2753[5] {
					yym2770 := z.EncBinary()
					_ = yym2770
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2753[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2771 := z.EncBinary()
					_ = yym2771
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr2753 || yy2arr2753 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2753[6] {
					yym2773 := z.EncBinary()
					_ = yym2773
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2753[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2774 := z.EncBinary()
					_ = yym2774
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr2753 || yy2arr2753 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym2776 := z.EncBinary()
					_ = yym2776
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("command"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym2777 := z.EncBinary()
					_ = yym2777
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			}
			if yyr2753 || yy2arr2753 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodExecOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2778 := z.DecBinary()
	_ = yym2778
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2779 := r.ContainerType()
		if yyct2779 == codecSelferValueTypeMap1234 {
			yyl2779 := r.ReadMapStart()
			if yyl2779 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2779, d)
			}
		} else if yyct2779 == codecSelferValueTypeArray1234 {
			yyl2779 := r.ReadArrayStart()
			if yyl2779 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2779, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodExecOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2780Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2780Slc
	var yyhl2780 bool = l >= 0
	for yyj2780 := 0; ; yyj2780++ {
		if yyhl2780 {
			if yyj2780 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2780Slc = r.DecodeBytes(yys2780Slc, true, true)
		yys2780 := string(yys2780Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2780 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv2788 := &x.Command
				yym2789 := z.DecBinary()
				_ = yym2789
				if false {
				} else {
					z.F.DecSliceStringX(yyv2788, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2780)
		} // end switch yys2780
	} // end for yyj2780
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodExecOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2790 int
	var yyb2790 bool
	var yyhl2790 bool = l >= 0
	yyj2790++
	if yyhl2790 {
		yyb2790 = yyj2790 > l
	} else {
		yyb2790 = r.CheckBreak()
	}
	if yyb2790 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2790++
	if yyhl2790 {
		yyb2790 = yyj2790 > l
	} else {
		yyb2790 = r.CheckBreak()
	}
	if yyb2790 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2790++
	if yyhl2790 {
		yyb2790 = yyj2790 > l
	} else {
		yyb2790 = r.CheckBreak()
	}
	if yyb2790 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj2790++
	if yyhl2790 {
		yyb2790 = yyj2790 > l
	} else {
		yyb2790 = r.CheckBreak()
	}
	if yyb2790 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj2790++
	if yyhl2790 {
		yyb2790 = yyj2790 > l
	} else {
		yyb2790 = r.CheckBreak()
	}
	if yyb2790 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj2790++
	if yyhl2790 {
		yyb2790 = yyj2790 > l
	} else {
		yyb2790 = r.CheckBreak()
	}
	if yyb2790 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj2790++
	if yyhl2790 {
		yyb2790 = yyj2790 > l
	} else {
		yyb2790 = r.CheckBreak()
	}
	if yyb2790 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj2790++
	if yyhl2790 {
		yyb2790 = yyj2790 > l
	} else {
		yyb2790 = r.CheckBreak()
	}
	if yyb2790 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv2798 := &x.Command
		yym2799 := z.DecBinary()
		_ = yym2799
		if false {
		} else {
			z.F.DecSliceStringX(yyv2798, false, d)
		}
	}
	for {
		yyj2790++
		if yyhl2790 {
			yyb2790 = yyj2790 > l
		} else {
			yyb2790 = r.CheckBreak()
		}
		if yyb2790 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2790-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2800 := z.EncBinary()
		_ = yym2800
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2801 := !z.EncBinary()
			yy2arr2801 := z.EncBasicHandle().StructToArray
			var yyq2801 [3]bool
			_, _, _ = yysep2801, yyq2801, yy2arr2801
			const yyr2801 bool = false
			yyq2801[0] = x.Kind != ""
			yyq2801[1] = x.APIVersion != ""
			yyq2801[2] = x.Path != ""
			var yynn2801 int
			if yyr2801 || yy2arr2801 {
				r.EncodeArrayStart(3)
			} else {
				yynn2801 = 0
				for _, b := range yyq2801 {
					if b {
						yynn2801++
					}
				}
				r.EncodeMapStart(yynn2801)
				yynn2801 = 0
			}
			if yyr2801 || yy2arr2801 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2801[0] {
					yym2803 := z.EncBinary()
					_ = yym2803
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2801[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2804 := z.EncBinary()
					_ = yym2804
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2801 || yy2arr2801 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2801[1] {
					yym2806 := z.EncBinary()
					_ = yym2806
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2801[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2807 := z.EncBinary()
					_ = yym2807
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2801 || yy2arr2801 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2801[2] {
					yym2809 := z.EncBinary()
					_ = yym2809
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2801[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2810 := z.EncBinary()
					_ = yym2810
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr2801 || yy2arr2801 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2811 := z.DecBinary()
	_ = yym2811
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2812 := r.ContainerType()
		if yyct2812 == codecSelferValueTypeMap1234 {
			yyl2812 := r.ReadMapStart()
			if yyl2812 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2812, d)
			}
		} else if yyct2812 == codecSelferValueTypeArray1234 {
			yyl2812 := r.ReadArrayStart()
			if yyl2812 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2812, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2813Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2813Slc
	var yyhl2813 bool = l >= 0
	for yyj2813 := 0; ; yyj2813++ {
		if yyhl2813 {
			if yyj2813 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2813Slc = r.DecodeBytes(yys2813Slc, true, true)
		yys2813 := string(yys2813Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2813 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2813)
		} // end switch yys2813
	} // end for yyj2813
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2817 int
	var yyb2817 bool
	var yyhl2817 bool = l >= 0
	yyj2817++
	if yyhl2817 {
		yyb2817 = yyj2817 > l
	} else {
		yyb2817 = r.CheckBreak()
	}
	if yyb2817 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2817++
	if yyhl2817 {
		yyb2817 = yyj2817 > l
	} else {
		yyb2817 = r.CheckBreak()
	}
	if yyb2817 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2817++
	if yyhl2817 {
		yyb2817 = yyj2817 > l
	} else {
		yyb2817 = r.CheckBreak()
	}
	if yyb2817 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj2817++
		if yyhl2817 {
			yyb2817 = yyj2817 > l
		} else {
			yyb2817 = r.CheckBreak()
		}
		if yyb2817 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2817-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2821 := z.EncBinary()
		_ = yym2821
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2822 := !z.EncBinary()
			yy2arr2822 := z.EncBasicHandle().StructToArray
			var yyq2822 [7]bool
			_, _, _ = yysep2822, yyq2822, yy2arr2822
			const yyr2822 bool = false
			yyq2822[0] = x.Kind != ""
			yyq2822[1] = x.Namespace != ""
			yyq2822[2] = x.Name != ""
			yyq2822[3] = x.UID != ""
			yyq2822[4] = x.APIVersion != ""
			yyq2822[5] = x.ResourceVersion != ""
			yyq2822[6] = x.FieldPath != ""
			var yynn2822 int
			if yyr2822 || yy2arr2822 {
				r.EncodeArrayStart(7)
			} else {
				yynn2822 = 0
				for _, b := range yyq2822 {
					if b {
						yynn2822++
					}
				}
				r.EncodeMapStart(yynn2822)
				yynn2822 = 0
			}
			if yyr2822 || yy2arr2822 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2822[0] {
					yym2824 := z.EncBinary()
					_ = yym2824
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2822[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2825 := z.EncBinary()
					_ = yym2825
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2822 || yy2arr2822 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2822[1] {
					yym2827 := z.EncBinary()
					_ = yym2827
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2822[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2828 := z.EncBinary()
					_ = yym2828
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2822 || yy2arr2822 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2822[2] {
					yym2830 := z.EncBinary()
					_ = yym2830
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2822[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2831 := z.EncBinary()
					_ = yym2831
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2822 || yy2arr2822 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2822[3] {
					yym2833 := z.EncBinary()
					_ = yym2833
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2822[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2834 := z.EncBinary()
					_ = yym2834
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2822 || yy2arr2822 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2822[4] {
					yym2836 := z.EncBinary()
					_ = yym2836
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2822[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2837 := z.EncBinary()
					_ = yym2837
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2822 || yy2arr2822 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2822[5] {
					yym2839 := z.EncBinary()
					_ = yym2839
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2822[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2840 := z.EncBinary()
					_ = yym2840
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2822 || yy2arr2822 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2822[6] {
					yym2842 := z.EncBinary()
					_ = yym2842
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2822[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2843 := z.EncBinary()
					_ = yym2843
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				}
			}
			if yyr2822 || yy2arr2822 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2844 := z.DecBinary()
	_ = yym2844
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2845 := r.ContainerType()
		if yyct2845 == codecSelferValueTypeMap1234 {
			yyl2845 := r.ReadMapStart()
			if yyl2845 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2845, d)
			}
		} else if yyct2845 == codecSelferValueTypeArray1234 {
			yyl2845 := r.ReadArrayStart()
			if yyl2845 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2845, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2846Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2846Slc
	var yyhl2846 bool = l >= 0
	for yyj2846 := 0; ; yyj2846++ {
		if yyhl2846 {
			if yyj2846 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2846Slc = r.DecodeBytes(yys2846Slc, true, true)
		yys2846 := string(yys2846Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2846 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2846)
		} // end switch yys2846
	} // end for yyj2846
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2854 int
	var yyb2854 bool
	var yyhl2854 bool = l >= 0
	yyj2854++
	if yyhl2854 {
		yyb2854 = yyj2854 > l
	} else {
		yyb2854 = r.CheckBreak()
	}
	if yyb2854 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2854++
	if yyhl2854 {
		yyb2854 = yyj2854 > l
	} else {
		yyb2854 = r.CheckBreak()
	}
	if yyb2854 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj2854++
	if yyhl2854 {
		yyb2854 = yyj2854 > l
	} else {
		yyb2854 = r.CheckBreak()
	}
	if yyb2854 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2854++
	if yyhl2854 {
		yyb2854 = yyj2854 > l
	} else {
		yyb2854 = r.CheckBreak()
	}
	if yyb2854 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj2854++
	if yyhl2854 {
		yyb2854 = yyj2854 > l
	} else {
		yyb2854 = r.CheckBreak()
	}
	if yyb2854 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2854++
	if yyhl2854 {
		yyb2854 = yyj2854 > l
	} else {
		yyb2854 = r.CheckBreak()
	}
	if yyb2854 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj2854++
	if yyhl2854 {
		yyb2854 = yyj2854 > l
	} else {
		yyb2854 = r.CheckBreak()
	}
	if yyb2854 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj2854++
		if yyhl2854 {
			yyb2854 = yyj2854 > l
		} else {
			yyb2854 = r.CheckBreak()
		}
		if yyb2854 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2854-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LocalObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2862 := z.EncBinary()
		_ = yym2862
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2863 := !z.EncBinary()
			yy2arr2863 := z.EncBasicHandle().StructToArray
			var yyq2863 [1]bool
			_, _, _ = yysep2863, yyq2863, yy2arr2863
			const yyr2863 bool = false
			yyq2863[0] = x.Name != ""
			var yynn2863 int
			if yyr2863 || yy2arr2863 {
				r.EncodeArrayStart(1)
			} else {
				yynn2863 = 0
				for _, b := range yyq2863 {
					if b {
						yynn2863++
					}
				}
				r.EncodeMapStart(yynn2863)
				yynn2863 = 0
			}
			if yyr2863 || yy2arr2863 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2863[0] {
					yym2865 := z.EncBinary()
					_ = yym2865
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2863[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2866 := z.EncBinary()
					_ = yym2866
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2863 || yy2arr2863 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LocalObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2867 := z.DecBinary()
	_ = yym2867
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2868 := r.ContainerType()
		if yyct2868 == codecSelferValueTypeMap1234 {
			yyl2868 := r.ReadMapStart()
			if yyl2868 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2868, d)
			}
		} else if yyct2868 == codecSelferValueTypeArray1234 {
			yyl2868 := r.ReadArrayStart()
			if yyl2868 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2868, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2869Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2869Slc
	var yyhl2869 bool = l >= 0
	for yyj2869 := 0; ; yyj2869++ {
		if yyhl2869 {
			if yyj2869 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2869Slc = r.DecodeBytes(yys2869Slc, true, true)
		yys2869 := string(yys2869Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2869 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2869)
		} // end switch yys2869
	} // end for yyj2869
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LocalObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2871 int
	var yyb2871 bool
	var yyhl2871 bool = l >= 0
	yyj2871++
	if yyhl2871 {
		yyb2871 = yyj2871 > l
	} else {
		yyb2871 = r.CheckBreak()
	}
	if yyb2871 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj2871++
		if yyhl2871 {
			yyb2871 = yyj2871 > l
		} else {
			yyb2871 = r.CheckBreak()
		}
		if yyb2871 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2871-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SerializedReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2873 := z.EncBinary()
		_ = yym2873
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2874 := !z.EncBinary()
			yy2arr2874 := z.EncBasicHandle().StructToArray
			var yyq2874 [3]bool
			_, _, _ = yysep2874, yyq2874, yy2arr2874
			const yyr2874 bool = false
			yyq2874[0] = x.Kind != ""
			yyq2874[1] = x.APIVersion != ""
			yyq2874[2] = true
			var yynn2874 int
			if yyr2874 || yy2arr2874 {
				r.EncodeArrayStart(3)
			} else {
				yynn2874 = 0
				for _, b := range yyq2874 {
					if b {
						yynn2874++
					}
				}
				r.EncodeMapStart(yynn2874)
				yynn2874 = 0
			}
			if yyr2874 || yy2arr2874 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2874[0] {
					yym2876 := z.EncBinary()
					_ = yym2876
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2874[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2877 := z.EncBinary()
					_ = yym2877
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2874 || yy2arr2874 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2874[1] {
					yym2879 := z.EncBinary()
					_ = yym2879
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2874[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2880 := z.EncBinary()
					_ = yym2880
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2874 || yy2arr2874 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2874[2] {
					yy2882 := &x.Reference
					yy2882.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2874[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reference"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2883 := &x.Reference
					yy2883.CodecEncodeSelf(e)
				}
			}
			if yyr2874 || yy2arr2874 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SerializedReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2884 := z.DecBinary()
	_ = yym2884
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2885 := r.ContainerType()
		if yyct2885 == codecSelferValueTypeMap1234 {
			yyl2885 := r.ReadMapStart()
			if yyl2885 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2885, d)
			}
		} else if yyct2885 == codecSelferValueTypeArray1234 {
			yyl2885 := r.ReadArrayStart()
			if yyl2885 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2885, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SerializedReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2886Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2886Slc
	var yyhl2886 bool = l >= 0
	for yyj2886 := 0; ; yyj2886++ {
		if yyhl2886 {
			if yyj2886 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2886Slc = r.DecodeBytes(yys2886Slc, true, true)
		yys2886 := string(yys2886Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2886 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "reference":
			if r.TryDecodeAsNil() {
				x.Reference = ObjectReference{}
			} else {
				yyv2889 := &x.Reference
				yyv2889.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2886)
		} // end switch yys2886
	} // end for yyj2886
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SerializedReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2890 int
	var yyb2890 bool
	var yyhl2890 bool = l >= 0
	yyj2890++
	if yyhl2890 {
		yyb2890 = yyj2890 > l
	} else {
		yyb2890 = r.CheckBreak()
	}
	if yyb2890 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2890++
	if yyhl2890 {
		yyb2890 = yyj2890 > l
	} else {
		yyb2890 = r.CheckBreak()
	}
	if yyb2890 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2890++
	if yyhl2890 {
		yyb2890 = yyj2890 > l
	} else {
		yyb2890 = r.CheckBreak()
	}
	if yyb2890 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reference = ObjectReference{}
	} else {
		yyv2893 := &x.Reference
		yyv2893.CodecDecodeSelf(d)
	}
	for {
		yyj2890++
		if yyhl2890 {
			yyb2890 = yyj2890 > l
		} else {
			yyb2890 = r.CheckBreak()
		}
		if yyb2890 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2890-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2894 := z.EncBinary()
		_ = yym2894
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2895 := !z.EncBinary()
			yy2arr2895 := z.EncBasicHandle().StructToArray
			var yyq2895 [2]bool
			_, _, _ = yysep2895, yyq2895, yy2arr2895
			const yyr2895 bool = false
			yyq2895[0] = x.Component != ""
			yyq2895[1] = x.Host != ""
			var yynn2895 int
			if yyr2895 || yy2arr2895 {
				r.EncodeArrayStart(2)
			} else {
				yynn2895 = 0
				for _, b := range yyq2895 {
					if b {
						yynn2895++
					}
				}
				r.EncodeMapStart(yynn2895)
				yynn2895 = 0
			}
			if yyr2895 || yy2arr2895 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2895[0] {
					yym2897 := z.EncBinary()
					_ = yym2897
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2895[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("component"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2898 := z.EncBinary()
					_ = yym2898
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				}
			}
			if yyr2895 || yy2arr2895 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2895[1] {
					yym2900 := z.EncBinary()
					_ = yym2900
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2895[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2901 := z.EncBinary()
					_ = yym2901
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr2895 || yy2arr2895 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2902 := z.DecBinary()
	_ = yym2902
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2903 := r.ContainerType()
		if yyct2903 == codecSelferValueTypeMap1234 {
			yyl2903 := r.ReadMapStart()
			if yyl2903 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2903, d)
			}
		} else if yyct2903 == codecSelferValueTypeArray1234 {
			yyl2903 := r.ReadArrayStart()
			if yyl2903 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2903, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2904Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2904Slc
	var yyhl2904 bool = l >= 0
	for yyj2904 := 0; ; yyj2904++ {
		if yyhl2904 {
			if yyj2904 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2904Slc = r.DecodeBytes(yys2904Slc, true, true)
		yys2904 := string(yys2904Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2904 {
		case "component":
			if r.TryDecodeAsNil() {
				x.Component = ""
			} else {
				x.Component = string(r.DecodeString())
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2904)
		} // end switch yys2904
	} // end for yyj2904
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2907 int
	var yyb2907 bool
	var yyhl2907 bool = l >= 0
	yyj2907++
	if yyhl2907 {
		yyb2907 = yyj2907 > l
	} else {
		yyb2907 = r.CheckBreak()
	}
	if yyb2907 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Component = ""
	} else {
		x.Component = string(r.DecodeString())
	}
	yyj2907++
	if yyhl2907 {
		yyb2907 = yyj2907 > l
	} else {
		yyb2907 = r.CheckBreak()
	}
	if yyb2907 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	for {
		yyj2907++
		if yyhl2907 {
			yyb2907 = yyj2907 > l
		} else {
			yyb2907 = r.CheckBreak()
		}
		if yyb2907 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2907-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Event) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2910 := z.EncBinary()
		_ = yym2910
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2911 := !z.EncBinary()
			yy2arr2911 := z.EncBasicHandle().StructToArray
			var yyq2911 [11]bool
			_, _, _ = yysep2911, yyq2911, yy2arr2911
			const yyr2911 bool = false
			yyq2911[0] = x.Kind != ""
			yyq2911[1] = x.APIVersion != ""
			yyq2911[4] = x.Reason != ""
			yyq2911[5] = x.Message != ""
			yyq2911[6] = true
			yyq2911[7] = true
			yyq2911[8] = true
			yyq2911[9] = x.Count != 0
			yyq2911[10] = x.Type != ""
			var yynn2911 int
			if yyr2911 || yy2arr2911 {
				r.EncodeArrayStart(11)
			} else {
				yynn2911 = 2
				for _, b := range yyq2911 {
					if b {
						yynn2911++
					}
				}
				r.EncodeMapStart(yynn2911)
				yynn2911 = 0
			}
			if yyr2911 || yy2arr2911 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2911[0] {
					yym2913 := z.EncBinary()
					_ = yym2913
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2911[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2914 := z.EncBinary()
					_ = yym2914
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2911 || yy2arr2911 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2911[1] {
					yym2916 := z.EncBinary()
					_ = yym2916
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2911[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2917 := z.EncBinary()
					_ = yym2917
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2911 || yy2arr2911 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy2919 := &x.ObjectMeta
				yy2919.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("metadata"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy2920 := &x.ObjectMeta
				yy2920.CodecEncodeSelf(e)
			}
			if yyr2911 || yy2arr2911 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy2922 := &x.InvolvedObject
				yy2922.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("involvedObject"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy2923 := &x.InvolvedObject
				yy2923.CodecEncodeSelf(e)
			}
			if yyr2911 || yy2arr2911 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2911[4] {
					yym2925 := z.EncBinary()
					_ = yym2925
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2911[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2926 := z.EncBinary()
					_ = yym2926
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2911 || yy2arr2911 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2911[5] {
					yym2928 := z.EncBinary()
					_ = yym2928
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2911[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2929 := z.EncBinary()
					_ = yym2929
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2911 || yy2arr2911 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2911[6] {
					yy2931 := &x.Source
					yy2931.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2911[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("source"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2932 := &x.Source
					yy2932.CodecEncodeSelf(e)
				}
			}
			if yyr2911 || yy2arr2911 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2911[7] {
					yy2934 := &x.FirstTimestamp
					yym2935 := z.EncBinary()
					_ = yym2935
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2934) {
					} else if yym2935 {
						z.EncBinaryMarshal(yy2934)
					} else if !yym2935 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2934)
					} else {
						z.EncFallback(yy2934)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2911[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("firstTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2936 := &x.FirstTimestamp
					yym2937 := z.EncBinary()
					_ = yym2937
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2936) {
					} else if yym2937 {
						z.EncBinaryMarshal(yy2936)
					} else if !yym2937 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2936)
					} else {
						z.EncFallback(yy2936)
					}
				}
			}
			if yyr2911 || yy2arr2911 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2911[8] {
					yy2939 := &x.LastTimestamp
					yym2940 := z.EncBinary()
					_ = yym2940
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2939) {
					} else if yym2940 {
						z.EncBinaryMarshal(yy2939)
					} else if !yym2940 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2939)
					} else {
						z.EncFallback(yy2939)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2911[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2941 := &x.LastTimestamp
					yym2942 := z.EncBinary()
					_ = yym2942
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2941) {
					} else if yym2942 {
						z.EncBinaryMarshal(yy2941)
					} else if !yym2942 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2941)
					} else {
						z.EncFallback(yy2941)
					}
				}
			}
			if yyr2911 || yy2arr2911 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2911[9] {
					yym2944 := z.EncBinary()
					_ = yym2944
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2911[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("count"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2945 := z.EncBinary()
					_ = yym2945
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				}
			}
			if yyr2911 || yy2arr2911 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2911[10] {
					yym2947 := z.EncBinary()
					_ = yym2947
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2911[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2948 := z.EncBinary()
					_ = yym2948
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr2911 || yy2arr2911 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Event) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2949 := z.DecBinary()
	_ = yym2949
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2950 := r.ContainerType()
		if yyct2950 == codecSelferValueTypeMap1234 {
			yyl2950 := r.ReadMapStart()
			if yyl2950 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2950, d)
			}
		} else if yyct2950 == codecSelferValueTypeArray1234 {
			yyl2950 := r.ReadArrayStart()
			if yyl2950 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2950, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Event) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2951Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2951Slc
	var yyhl2951 bool = l >= 0
	for yyj2951 := 0; ; yyj2951++ {
		if yyhl2951 {
			if yyj2951 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2951Slc = r.DecodeBytes(yys2951Slc, true, true)
		yys2951 := string(yys2951Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2951 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2954 := &x.ObjectMeta
				yyv2954.CodecDecodeSelf(d)
			}
		case "involvedObject":
			if r.TryDecodeAsNil() {
				x.InvolvedObject = ObjectReference{}
			} else {
				yyv2955 := &x.InvolvedObject
				yyv2955.CodecDecodeSelf(d)
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = EventSource{}
			} else {
				yyv2958 := &x.Source
				yyv2958.CodecDecodeSelf(d)
			}
		case "firstTimestamp":
			if r.TryDecodeAsNil() {
				x.FirstTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv2959 := &x.FirstTimestamp
				yym2960 := z.DecBinary()
				_ = yym2960
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2959) {
				} else if yym2960 {
					z.DecBinaryUnmarshal(yyv2959)
				} else if !yym2960 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2959)
				} else {
					z.DecFallback(yyv2959, false)
				}
			}
		case "lastTimestamp":
			if r.TryDecodeAsNil() {
				x.LastTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv2961 := &x.LastTimestamp
				yym2962 := z.DecBinary()
				_ = yym2962
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2961) {
				} else if yym2962 {
					z.DecBinaryUnmarshal(yyv2961)
				} else if !yym2962 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2961)
				} else {
					z.DecFallback(yyv2961, false)
				}
			}
		case "count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				x.Count = int32(r.DecodeInt(32))
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2951)
		} // end switch yys2951
	} // end for yyj2951
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Event) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2965 int
	var yyb2965 bool
	var yyhl2965 bool = l >= 0
	yyj2965++
	if yyhl2965 {
		yyb2965 = yyj2965 > l
	} else {
		yyb2965 = r.CheckBreak()
	}
	if yyb2965 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2965++
	if yyhl2965 {
		yyb2965 = yyj2965 > l
	} else {
		yyb2965 = r.CheckBreak()
	}
	if yyb2965 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2965++
	if yyhl2965 {
		yyb2965 = yyj2965 > l
	} else {
		yyb2965 = r.CheckBreak()
	}
	if yyb2965 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2968 := &x.ObjectMeta
		yyv2968.CodecDecodeSelf(d)
	}
	yyj2965++
	if yyhl2965 {
		yyb2965 = yyj2965 > l
	} else {
		yyb2965 = r.CheckBreak()
	}
	if yyb2965 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InvolvedObject = ObjectReference{}
	} else {
		yyv2969 := &x.InvolvedObject
		yyv2969.CodecDecodeSelf(d)
	}
	yyj2965++
	if yyhl2965 {
		yyb2965 = yyj2965 > l
	} else {
		yyb2965 = r.CheckBreak()
	}
	if yyb2965 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2965++
	if yyhl2965 {
		yyb2965 = yyj2965 > l
	} else {
		yyb2965 = r.CheckBreak()
	}
	if yyb2965 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj2965++
	if yyhl2965 {
		yyb2965 = yyj2965 > l
	} else {
		yyb2965 = r.CheckBreak()
	}
	if yyb2965 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Source = EventSource{}
	} else {
		yyv2972 := &x.Source
		yyv2972.CodecDecodeSelf(d)
	}
	yyj2965++
	if yyhl2965 {
		yyb2965 = yyj2965 > l
	} else {
		yyb2965 = r.CheckBreak()
	}
	if yyb2965 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FirstTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv2973 := &x.FirstTimestamp
		yym2974 := z.DecBinary()
		_ = yym2974
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2973) {
		} else if yym2974 {
			z.DecBinaryUnmarshal(yyv2973)
		} else if !yym2974 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2973)
		} else {
			z.DecFallback(yyv2973, false)
		}
	}
	yyj2965++
	if yyhl2965 {
		yyb2965 = yyj2965 > l
	} else {
		yyb2965 = r.CheckBreak()
	}
	if yyb2965 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv2975 := &x.LastTimestamp
		yym2976 := z.DecBinary()
		_ = yym2976
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2975) {
		} else if yym2976 {
			z.DecBinaryUnmarshal(yyv2975)
		} else if !yym2976 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2975)
		} else {
			z.DecFallback(yyv2975, false)
		}
	}
	yyj2965++
	if yyhl2965 {
		yyb2965 = yyj2965 > l
	} else {
		yyb2965 = r.CheckBreak()
	}
	if yyb2965 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		x.Count = int32(r.DecodeInt(32))
	}
	yyj2965++
	if yyhl2965 {
		yyb2965 = yyj2965 > l
	} else {
		yyb2965 = r.CheckBreak()
	}
	if yyb2965 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	for {
		yyj2965++
		if yyhl2965 {
			yyb2965 = yyj2965 > l
		} else {
			yyb2965 = r.CheckBreak()
		}
		if yyb2965 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2965-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2979 := z.EncBinary()
		_ = yym2979
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2980 := !z.EncBinary()
			yy2arr2980 := z.EncBasicHandle().StructToArray
			var yyq2980 [4]bool
			_, _, _ = yysep2980, yyq2980, yy2arr2980
			const yyr2980 bool = false
			yyq2980[0] = x.Kind != ""
			yyq2980[1] = x.APIVersion != ""
			yyq2980[2] = true
			var yynn2980 int
			if yyr2980 || yy2arr2980 {
				r.EncodeArrayStart(4)
			} else {
				yynn2980 = 1
				for _, b := range yyq2980 {
					if b {
						yynn2980++
					}
				}
				r.EncodeMapStart(yynn2980)
				yynn2980 = 0
			}
			if yyr2980 || yy2arr2980 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2980[0] {
					yym2982 := z.EncBinary()
					_ = yym2982
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2980[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2983 := z.EncBinary()
					_ = yym2983
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2980 || yy2arr2980 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2980[1] {
					yym2985 := z.EncBinary()
					_ = yym2985
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2980[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2986 := z.EncBinary()
					_ = yym2986
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2980 || yy2arr2980 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2980[2] {
					yy2988 := &x.ListMeta
					yym2989 := z.EncBinary()
					_ = yym2989
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2988) {
					} else {
						z.EncFallback(yy2988)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2980[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2990 := &x.ListMeta
					yym2991 := z.EncBinary()
					_ = yym2991
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2990) {
					} else {
						z.EncFallback(yy2990)
					}
				}
			}
			if yyr2980 || yy2arr2980 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2993 := z.EncBinary()
					_ = yym2993
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2994 := z.EncBinary()
					_ = yym2994
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			}
			if yyr2980 || yy2arr2980 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2995 := z.DecBinary()
	_ = yym2995
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2996 := r.ContainerType()
		if yyct2996 == codecSelferValueTypeMap1234 {
			yyl2996 := r.ReadMapStart()
			if yyl2996 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2996, d)
			}
		} else if yyct2996 == codecSelferValueTypeArray1234 {
			yyl2996 := r.ReadArrayStart()
			if yyl2996 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2996, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2997Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2997Slc
	var yyhl2997 bool = l >= 0
	for yyj2997 := 0; ; yyj2997++ {
		if yyhl2997 {
			if yyj2997 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2997Slc = r.DecodeBytes(yys2997Slc, true, true)
		yys2997 := string(yys2997Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2997 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3000 := &x.ListMeta
				yym3001 := z.DecBinary()
				_ = yym3001
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3000) {
				} else {
					z.DecFallback(yyv3000, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3002 := &x.Items
				yym3003 := z.DecBinary()
				_ = yym3003
				if false {
				} else {
					h.decSliceEvent((*[]Event)(yyv3002), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2997)
		} // end switch yys2997
	} // end for yyj2997
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3004 int
	var yyb3004 bool
	var yyhl3004 bool = l >= 0
	yyj3004++
	if yyhl3004 {
		yyb3004 = yyj3004 > l
	} else {
		yyb3004 = r.CheckBreak()
	}
	if yyb3004 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3004++
	if yyhl3004 {
		yyb3004 = yyj3004 > l
	} else {
		yyb3004 = r.CheckBreak()
	}
	if yyb3004 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3004++
	if yyhl3004 {
		yyb3004 = yyj3004 > l
	} else {
		yyb3004 = r.CheckBreak()
	}
	if yyb3004 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3007 := &x.ListMeta
		yym3008 := z.DecBinary()
		_ = yym3008
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3007) {
		} else {
			z.DecFallback(yyv3007, false)
		}
	}
	yyj3004++
	if yyhl3004 {
		yyb3004 = yyj3004 > l
	} else {
		yyb3004 = r.CheckBreak()
	}
	if yyb3004 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3009 := &x.Items
		yym3010 := z.DecBinary()
		_ = yym3010
		if false {
		} else {
			h.decSliceEvent((*[]Event)(yyv3009), d)
		}
	}
	for {
		yyj3004++
		if yyhl3004 {
			yyb3004 = yyj3004 > l
		} else {
			yyb3004 = r.CheckBreak()
		}
		if yyb3004 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3004-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *List) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3011 := z.EncBinary()
		_ = yym3011
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3012 := !z.EncBinary()
			yy2arr3012 := z.EncBasicHandle().StructToArray
			var yyq3012 [4]bool
			_, _, _ = yysep3012, yyq3012, yy2arr3012
			const yyr3012 bool = false
			yyq3012[0] = x.Kind != ""
			yyq3012[1] = x.APIVersion != ""
			yyq3012[2] = true
			var yynn3012 int
			if yyr3012 || yy2arr3012 {
				r.EncodeArrayStart(4)
			} else {
				yynn3012 = 1
				for _, b := range yyq3012 {
					if b {
						yynn3012++
					}
				}
				r.EncodeMapStart(yynn3012)
				yynn3012 = 0
			}
			if yyr3012 || yy2arr3012 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3012[0] {
					yym3014 := z.EncBinary()
					_ = yym3014
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3012[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3015 := z.EncBinary()
					_ = yym3015
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3012 || yy2arr3012 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3012[1] {
					yym3017 := z.EncBinary()
					_ = yym3017
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3012[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3018 := z.EncBinary()
					_ = yym3018
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3012 || yy2arr3012 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3012[2] {
					yy3020 := &x.ListMeta
					yym3021 := z.EncBinary()
					_ = yym3021
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3020) {
					} else {
						z.EncFallback(yy3020)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3012[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3022 := &x.ListMeta
					yym3023 := z.EncBinary()
					_ = yym3023
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3022) {
					} else {
						z.EncFallback(yy3022)
					}
				}
			}
			if yyr3012 || yy2arr3012 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3025 := z.EncBinary()
					_ = yym3025
					if false {
					} else {
						h.encSliceruntime_RawExtension(([]pkg6_runtime.RawExtension)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3026 := z.EncBinary()
					_ = yym3026
					if false {
					} else {
						h.encSliceruntime_RawExtension(([]pkg6_runtime.RawExtension)(x.Items), e)
					}
				}
			}
			if yyr3012 || yy2arr3012 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *List) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3027 := z.DecBinary()
	_ = yym3027
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3028 := r.ContainerType()
		if yyct3028 == codecSelferValueTypeMap1234 {
			yyl3028 := r.ReadMapStart()
			if yyl3028 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3028, d)
			}
		} else if yyct3028 == codecSelferValueTypeArray1234 {
			yyl3028 := r.ReadArrayStart()
			if yyl3028 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3028, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *List) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3029Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3029Slc
	var yyhl3029 bool = l >= 0
	for yyj3029 := 0; ; yyj3029++ {
		if yyhl3029 {
			if yyj3029 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3029Slc = r.DecodeBytes(yys3029Slc, true, true)
		yys3029 := string(yys3029Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3029 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3032 := &x.ListMeta
				yym3033 := z.DecBinary()
				_ = yym3033
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3032) {
				} else {
					z.DecFallback(yyv3032, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3034 := &x.Items
				yym3035 := z.DecBinary()
				_ = yym3035
				if false {
				} else {
					h.decSliceruntime_RawExtension((*[]pkg6_runtime.RawExtension)(yyv3034), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3029)
		} // end switch yys3029
	} // end for yyj3029
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *List) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3036 int
	var yyb3036 bool
	var yyhl3036 bool = l >= 0
	yyj3036++
	if yyhl3036 {
		yyb3036 = yyj3036 > l
	} else {
		yyb3036 = r.CheckBreak()
	}
	if yyb3036 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3036++
	if yyhl3036 {
		yyb3036 = yyj3036 > l
	} else {
		yyb3036 = r.CheckBreak()
	}
	if yyb3036 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3036++
	if yyhl3036 {
		yyb3036 = yyj3036 > l
	} else {
		yyb3036 = r.CheckBreak()
	}
	if yyb3036 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3039 := &x.ListMeta
		yym3040 := z.DecBinary()
		_ = yym3040
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3039) {
		} else {
			z.DecFallback(yyv3039, false)
		}
	}
	yyj3036++
	if yyhl3036 {
		yyb3036 = yyj3036 > l
	} else {
		yyb3036 = r.CheckBreak()
	}
	if yyb3036 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3041 := &x.Items
		yym3042 := z.DecBinary()
		_ = yym3042
		if false {
		} else {
			h.decSliceruntime_RawExtension((*[]pkg6_runtime.RawExtension)(yyv3041), d)
		}
	}
	for {
		yyj3036++
		if yyhl3036 {
			yyb3036 = yyj3036 > l
		} else {
			yyb3036 = r.CheckBreak()
		}
		if yyb3036 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3036-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x LimitType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3043 := z.EncBinary()
	_ = yym3043
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LimitType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3044 := z.DecBinary()
	_ = yym3044
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *LimitRangeItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3045 := z.EncBinary()
		_ = yym3045
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3046 := !z.EncBinary()
			yy2arr3046 := z.EncBasicHandle().StructToArray
			var yyq3046 [6]bool
			_, _, _ = yysep3046, yyq3046, yy2arr3046
			const yyr3046 bool = false
			yyq3046[0] = x.Type != ""
			yyq3046[1] = len(x.Max) != 0
			yyq3046[2] = len(x.Min) != 0
			yyq3046[3] = len(x.Default) != 0
			yyq3046[4] = len(x.DefaultRequest) != 0
			yyq3046[5] = len(x.MaxLimitRequestRatio) != 0
			var yynn3046 int
			if yyr3046 || yy2arr3046 {
				r.EncodeArrayStart(6)
			} else {
				yynn3046 = 0
				for _, b := range yyq3046 {
					if b {
						yynn3046++
					}
				}
				r.EncodeMapStart(yynn3046)
				yynn3046 = 0
			}
			if yyr3046 || yy2arr3046 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3046[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3046[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr3046 || yy2arr3046 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3046[1] {
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3046[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("max"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3046 || yy2arr3046 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3046[2] {
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3046[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("min"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3046 || yy2arr3046 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3046[3] {
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3046[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("default"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3046 || yy2arr3046 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3046[4] {
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3046[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultRequest"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3046 || yy2arr3046 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3046[5] {
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3046[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxLimitRequestRatio"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3046 || yy2arr3046 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3053 := z.DecBinary()
	_ = yym3053
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3054 := r.ContainerType()
		if yyct3054 == codecSelferValueTypeMap1234 {
			yyl3054 := r.ReadMapStart()
			if yyl3054 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3054, d)
			}
		} else if yyct3054 == codecSelferValueTypeArray1234 {
			yyl3054 := r.ReadArrayStart()
			if yyl3054 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3054, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3055Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3055Slc
	var yyhl3055 bool = l >= 0
	for yyj3055 := 0; ; yyj3055++ {
		if yyhl3055 {
			if yyj3055 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3055Slc = r.DecodeBytes(yys3055Slc, true, true)
		yys3055 := string(yys3055Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3055 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = LimitType(r.DecodeString())
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = nil
			} else {
				yyv3057 := &x.Max
				yyv3057.CodecDecodeSelf(d)
			}
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = nil
			} else {
				yyv3058 := &x.Min
				yyv3058.CodecDecodeSelf(d)
			}
		case "default":
			if r.TryDecodeAsNil() {
				x.Default = nil
			} else {
				yyv3059 := &x.Default
				yyv3059.CodecDecodeSelf(d)
			}
		case "defaultRequest":
			if r.TryDecodeAsNil() {
				x.DefaultRequest = nil
			} else {
				yyv3060 := &x.DefaultRequest
				yyv3060.CodecDecodeSelf(d)
			}
		case "maxLimitRequestRatio":
			if r.TryDecodeAsNil() {
				x.MaxLimitRequestRatio = nil
			} else {
				yyv3061 := &x.MaxLimitRequestRatio
				yyv3061.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3055)
		} // end switch yys3055
	} // end for yyj3055
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3062 int
	var yyb3062 bool
	var yyhl3062 bool = l >= 0
	yyj3062++
	if yyhl3062 {
		yyb3062 = yyj3062 > l
	} else {
		yyb3062 = r.CheckBreak()
	}
	if yyb3062 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = LimitType(r.DecodeString())
	}
	yyj3062++
	if yyhl3062 {
		yyb3062 = yyj3062 > l
	} else {
		yyb3062 = r.CheckBreak()
	}
	if yyb3062 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Max = nil
	} else {
		yyv3064 := &x.Max
		yyv3064.CodecDecodeSelf(d)
	}
	yyj3062++
	if yyhl3062 {
		yyb3062 = yyj3062 > l
	} else {
		yyb3062 = r.CheckBreak()
	}
	if yyb3062 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Min = nil
	} else {
		yyv3065 := &x.Min
		yyv3065.CodecDecodeSelf(d)
	}
	yyj3062++
	if yyhl3062 {
		yyb3062 = yyj3062 > l
	} else {
		yyb3062 = r.CheckBreak()
	}
	if yyb3062 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Default = nil
	} else {
		yyv3066 := &x.Default
		yyv3066.CodecDecodeSelf(d)
	}
	yyj3062++
	if yyhl3062 {
		yyb3062 = yyj3062 > l
	} else {
		yyb3062 = r.CheckBreak()
	}
	if yyb3062 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DefaultRequest = nil
	} else {
		yyv3067 := &x.DefaultRequest
		yyv3067.CodecDecodeSelf(d)
	}
	yyj3062++
	if yyhl3062 {
		yyb3062 = yyj3062 > l
	} else {
		yyb3062 = r.CheckBreak()
	}
	if yyb3062 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxLimitRequestRatio = nil
	} else {
		yyv3068 := &x.MaxLimitRequestRatio
		yyv3068.CodecDecodeSelf(d)
	}
	for {
		yyj3062++
		if yyhl3062 {
			yyb3062 = yyj3062 > l
		} else {
			yyb3062 = r.CheckBreak()
		}
		if yyb3062 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3062-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3069 := z.EncBinary()
		_ = yym3069
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3070 := !z.EncBinary()
			yy2arr3070 := z.EncBasicHandle().StructToArray
			var yyq3070 [1]bool
			_, _, _ = yysep3070, yyq3070, yy2arr3070
			const yyr3070 bool = false
			var yynn3070 int
			if yyr3070 || yy2arr3070 {
				r.EncodeArrayStart(1)
			} else {
				yynn3070 = 1
				for _, b := range yyq3070 {
					if b {
						yynn3070++
					}
				}
				r.EncodeMapStart(yynn3070)
				yynn3070 = 0
			}
			if yyr3070 || yy2arr3070 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3072 := z.EncBinary()
					_ = yym3072
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("limits"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3073 := z.EncBinary()
					_ = yym3073
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			}
			if yyr3070 || yy2arr3070 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3074 := z.DecBinary()
	_ = yym3074
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3075 := r.ContainerType()
		if yyct3075 == codecSelferValueTypeMap1234 {
			yyl3075 := r.ReadMapStart()
			if yyl3075 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3075, d)
			}
		} else if yyct3075 == codecSelferValueTypeArray1234 {
			yyl3075 := r.ReadArrayStart()
			if yyl3075 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3075, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3076Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3076Slc
	var yyhl3076 bool = l >= 0
	for yyj3076 := 0; ; yyj3076++ {
		if yyhl3076 {
			if yyj3076 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3076Slc = r.DecodeBytes(yys3076Slc, true, true)
		yys3076 := string(yys3076Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3076 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv3077 := &x.Limits
				yym3078 := z.DecBinary()
				_ = yym3078
				if false {
				} else {
					h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3077), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3076)
		} // end switch yys3076
	} // end for yyj3076
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3079 int
	var yyb3079 bool
	var yyhl3079 bool = l >= 0
	yyj3079++
	if yyhl3079 {
		yyb3079 = yyj3079 > l
	} else {
		yyb3079 = r.CheckBreak()
	}
	if yyb3079 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv3080 := &x.Limits
		yym3081 := z.DecBinary()
		_ = yym3081
		if false {
		} else {
			h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3080), d)
		}
	}
	for {
		yyj3079++
		if yyhl3079 {
			yyb3079 = yyj3079 > l
		} else {
			yyb3079 = r.CheckBreak()
		}
		if yyb3079 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3079-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3082 := z.EncBinary()
		_ = yym3082
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3083 := !z.EncBinary()
			yy2arr3083 := z.EncBasicHandle().StructToArray
			var yyq3083 [4]bool
			_, _, _ = yysep3083, yyq3083, yy2arr3083
			const yyr3083 bool = false
			yyq3083[0] = x.Kind != ""
			yyq3083[1] = x.APIVersion != ""
			yyq3083[2] = true
			yyq3083[3] = true
			var yynn3083 int
			if yyr3083 || yy2arr3083 {
				r.EncodeArrayStart(4)
			} else {
				yynn3083 = 0
				for _, b := range yyq3083 {
					if b {
						yynn3083++
					}
				}
				r.EncodeMapStart(yynn3083)
				yynn3083 = 0
			}
			if yyr3083 || yy2arr3083 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3083[0] {
					yym3085 := z.EncBinary()
					_ = yym3085
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3083[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3086 := z.EncBinary()
					_ = yym3086
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3083 || yy2arr3083 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3083[1] {
					yym3088 := z.EncBinary()
					_ = yym3088
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3083[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3089 := z.EncBinary()
					_ = yym3089
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3083 || yy2arr3083 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3083[2] {
					yy3091 := &x.ObjectMeta
					yy3091.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3083[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3092 := &x.ObjectMeta
					yy3092.CodecEncodeSelf(e)
				}
			}
			if yyr3083 || yy2arr3083 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3083[3] {
					yy3094 := &x.Spec
					yy3094.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3083[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3095 := &x.Spec
					yy3095.CodecEncodeSelf(e)
				}
			}
			if yyr3083 || yy2arr3083 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3096 := z.DecBinary()
	_ = yym3096
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3097 := r.ContainerType()
		if yyct3097 == codecSelferValueTypeMap1234 {
			yyl3097 := r.ReadMapStart()
			if yyl3097 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3097, d)
			}
		} else if yyct3097 == codecSelferValueTypeArray1234 {
			yyl3097 := r.ReadArrayStart()
			if yyl3097 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3097, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3098Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3098Slc
	var yyhl3098 bool = l >= 0
	for yyj3098 := 0; ; yyj3098++ {
		if yyhl3098 {
			if yyj3098 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3098Slc = r.DecodeBytes(yys3098Slc, true, true)
		yys3098 := string(yys3098Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3098 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3101 := &x.ObjectMeta
				yyv3101.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = LimitRangeSpec{}
			} else {
				yyv3102 := &x.Spec
				yyv3102.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3098)
		} // end switch yys3098
	} // end for yyj3098
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3103 int
	var yyb3103 bool
	var yyhl3103 bool = l >= 0
	yyj3103++
	if yyhl3103 {
		yyb3103 = yyj3103 > l
	} else {
		yyb3103 = r.CheckBreak()
	}
	if yyb3103 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3103++
	if yyhl3103 {
		yyb3103 = yyj3103 > l
	} else {
		yyb3103 = r.CheckBreak()
	}
	if yyb3103 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3103++
	if yyhl3103 {
		yyb3103 = yyj3103 > l
	} else {
		yyb3103 = r.CheckBreak()
	}
	if yyb3103 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3106 := &x.ObjectMeta
		yyv3106.CodecDecodeSelf(d)
	}
	yyj3103++
	if yyhl3103 {
		yyb3103 = yyj3103 > l
	} else {
		yyb3103 = r.CheckBreak()
	}
	if yyb3103 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = LimitRangeSpec{}
	} else {
		yyv3107 := &x.Spec
		yyv3107.CodecDecodeSelf(d)
	}
	for {
		yyj3103++
		if yyhl3103 {
			yyb3103 = yyj3103 > l
		} else {
			yyb3103 = r.CheckBreak()
		}
		if yyb3103 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3103-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3108 := z.EncBinary()
		_ = yym3108
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3109 := !z.EncBinary()
			yy2arr3109 := z.EncBasicHandle().StructToArray
			var yyq3109 [4]bool
			_, _, _ = yysep3109, yyq3109, yy2arr3109
			const yyr3109 bool = false
			yyq3109[0] = x.Kind != ""
			yyq3109[1] = x.APIVersion != ""
			yyq3109[2] = true
			var yynn3109 int
			if yyr3109 || yy2arr3109 {
				r.EncodeArrayStart(4)
			} else {
				yynn3109 = 1
				for _, b := range yyq3109 {
					if b {
						yynn3109++
					}
				}
				r.EncodeMapStart(yynn3109)
				yynn3109 = 0
			}
			if yyr3109 || yy2arr3109 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3109[0] {
					yym3111 := z.EncBinary()
					_ = yym3111
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3109[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3112 := z.EncBinary()
					_ = yym3112
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3109 || yy2arr3109 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3109[1] {
					yym3114 := z.EncBinary()
					_ = yym3114
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3109[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3115 := z.EncBinary()
					_ = yym3115
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3109 || yy2arr3109 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3109[2] {
					yy3117 := &x.ListMeta
					yym3118 := z.EncBinary()
					_ = yym3118
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3117) {
					} else {
						z.EncFallback(yy3117)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3109[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3119 := &x.ListMeta
					yym3120 := z.EncBinary()
					_ = yym3120
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3119) {
					} else {
						z.EncFallback(yy3119)
					}
				}
			}
			if yyr3109 || yy2arr3109 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3122 := z.EncBinary()
					_ = yym3122
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3123 := z.EncBinary()
					_ = yym3123
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			}
			if yyr3109 || yy2arr3109 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3124 := z.DecBinary()
	_ = yym3124
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3125 := r.ContainerType()
		if yyct3125 == codecSelferValueTypeMap1234 {
			yyl3125 := r.ReadMapStart()
			if yyl3125 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3125, d)
			}
		} else if yyct3125 == codecSelferValueTypeArray1234 {
			yyl3125 := r.ReadArrayStart()
			if yyl3125 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3125, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3126Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3126Slc
	var yyhl3126 bool = l >= 0
	for yyj3126 := 0; ; yyj3126++ {
		if yyhl3126 {
			if yyj3126 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3126Slc = r.DecodeBytes(yys3126Slc, true, true)
		yys3126 := string(yys3126Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3126 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3129 := &x.ListMeta
				yym3130 := z.DecBinary()
				_ = yym3130
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3129) {
				} else {
					z.DecFallback(yyv3129, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3131 := &x.Items
				yym3132 := z.DecBinary()
				_ = yym3132
				if false {
				} else {
					h.decSliceLimitRange((*[]LimitRange)(yyv3131), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3126)
		} // end switch yys3126
	} // end for yyj3126
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3133 int
	var yyb3133 bool
	var yyhl3133 bool = l >= 0
	yyj3133++
	if yyhl3133 {
		yyb3133 = yyj3133 > l
	} else {
		yyb3133 = r.CheckBreak()
	}
	if yyb3133 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3133++
	if yyhl3133 {
		yyb3133 = yyj3133 > l
	} else {
		yyb3133 = r.CheckBreak()
	}
	if yyb3133 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3133++
	if yyhl3133 {
		yyb3133 = yyj3133 > l
	} else {
		yyb3133 = r.CheckBreak()
	}
	if yyb3133 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3136 := &x.ListMeta
		yym3137 := z.DecBinary()
		_ = yym3137
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3136) {
		} else {
			z.DecFallback(yyv3136, false)
		}
	}
	yyj3133++
	if yyhl3133 {
		yyb3133 = yyj3133 > l
	} else {
		yyb3133 = r.CheckBreak()
	}
	if yyb3133 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3138 := &x.Items
		yym3139 := z.DecBinary()
		_ = yym3139
		if false {
		} else {
			h.decSliceLimitRange((*[]LimitRange)(yyv3138), d)
		}
	}
	for {
		yyj3133++
		if yyhl3133 {
			yyb3133 = yyj3133 > l
		} else {
			yyb3133 = r.CheckBreak()
		}
		if yyb3133 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3133-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3140 := z.EncBinary()
		_ = yym3140
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3141 := !z.EncBinary()
			yy2arr3141 := z.EncBasicHandle().StructToArray
			var yyq3141 [1]bool
			_, _, _ = yysep3141, yyq3141, yy2arr3141
			const yyr3141 bool = false
			yyq3141[0] = len(x.Hard) != 0
			var yynn3141 int
			if yyr3141 || yy2arr3141 {
				r.EncodeArrayStart(1)
			} else {
				yynn3141 = 0
				for _, b := range yyq3141 {
					if b {
						yynn3141++
					}
				}
				r.EncodeMapStart(yynn3141)
				yynn3141 = 0
			}
			if yyr3141 || yy2arr3141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3141[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3141[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3141 || yy2arr3141 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3143 := z.DecBinary()
	_ = yym3143
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3144 := r.ContainerType()
		if yyct3144 == codecSelferValueTypeMap1234 {
			yyl3144 := r.ReadMapStart()
			if yyl3144 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3144, d)
			}
		} else if yyct3144 == codecSelferValueTypeArray1234 {
			yyl3144 := r.ReadArrayStart()
			if yyl3144 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3144, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3145Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3145Slc
	var yyhl3145 bool = l >= 0
	for yyj3145 := 0; ; yyj3145++ {
		if yyhl3145 {
			if yyj3145 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3145Slc = r.DecodeBytes(yys3145Slc, true, true)
		yys3145 := string(yys3145Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3145 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3146 := &x.Hard
				yyv3146.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3145)
		} // end switch yys3145
	} // end for yyj3145
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3147 int
	var yyb3147 bool
	var yyhl3147 bool = l >= 0
	yyj3147++
	if yyhl3147 {
		yyb3147 = yyj3147 > l
	} else {
		yyb3147 = r.CheckBreak()
	}
	if yyb3147 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3148 := &x.Hard
		yyv3148.CodecDecodeSelf(d)
	}
	for {
		yyj3147++
		if yyhl3147 {
			yyb3147 = yyj3147 > l
		} else {
			yyb3147 = r.CheckBreak()
		}
		if yyb3147 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3147-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3149 := z.EncBinary()
		_ = yym3149
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3150 := !z.EncBinary()
			yy2arr3150 := z.EncBasicHandle().StructToArray
			var yyq3150 [2]bool
			_, _, _ = yysep3150, yyq3150, yy2arr3150
			const yyr3150 bool = false
			yyq3150[0] = len(x.Hard) != 0
			yyq3150[1] = len(x.Used) != 0
			var yynn3150 int
			if yyr3150 || yy2arr3150 {
				r.EncodeArrayStart(2)
			} else {
				yynn3150 = 0
				for _, b := range yyq3150 {
					if b {
						yynn3150++
					}
				}
				r.EncodeMapStart(yynn3150)
				yynn3150 = 0
			}
			if yyr3150 || yy2arr3150 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3150[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3150[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3150 || yy2arr3150 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3150[1] {
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3150[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("used"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3150 || yy2arr3150 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3153 := z.DecBinary()
	_ = yym3153
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3154 := r.ContainerType()
		if yyct3154 == codecSelferValueTypeMap1234 {
			yyl3154 := r.ReadMapStart()
			if yyl3154 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3154, d)
			}
		} else if yyct3154 == codecSelferValueTypeArray1234 {
			yyl3154 := r.ReadArrayStart()
			if yyl3154 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3154, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3155Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3155Slc
	var yyhl3155 bool = l >= 0
	for yyj3155 := 0; ; yyj3155++ {
		if yyhl3155 {
			if yyj3155 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3155Slc = r.DecodeBytes(yys3155Slc, true, true)
		yys3155 := string(yys3155Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3155 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3156 := &x.Hard
				yyv3156.CodecDecodeSelf(d)
			}
		case "used":
			if r.TryDecodeAsNil() {
				x.Used = nil
			} else {
				yyv3157 := &x.Used
				yyv3157.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3155)
		} // end switch yys3155
	} // end for yyj3155
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3158 int
	var yyb3158 bool
	var yyhl3158 bool = l >= 0
	yyj3158++
	if yyhl3158 {
		yyb3158 = yyj3158 > l
	} else {
		yyb3158 = r.CheckBreak()
	}
	if yyb3158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3159 := &x.Hard
		yyv3159.CodecDecodeSelf(d)
	}
	yyj3158++
	if yyhl3158 {
		yyb3158 = yyj3158 > l
	} else {
		yyb3158 = r.CheckBreak()
	}
	if yyb3158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Used = nil
	} else {
		yyv3160 := &x.Used
		yyv3160.CodecDecodeSelf(d)
	}
	for {
		yyj3158++
		if yyhl3158 {
			yyb3158 = yyj3158 > l
		} else {
			yyb3158 = r.CheckBreak()
		}
		if yyb3158 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3158-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuota) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3161 := z.EncBinary()
		_ = yym3161
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3162 := !z.EncBinary()
			yy2arr3162 := z.EncBasicHandle().StructToArray
			var yyq3162 [5]bool
			_, _, _ = yysep3162, yyq3162, yy2arr3162
			const yyr3162 bool = false
			yyq3162[0] = x.Kind != ""
			yyq3162[1] = x.APIVersion != ""
			yyq3162[2] = true
			yyq3162[3] = true
			yyq3162[4] = true
			var yynn3162 int
			if yyr3162 || yy2arr3162 {
				r.EncodeArrayStart(5)
			} else {
				yynn3162 = 0
				for _, b := range yyq3162 {
					if b {
						yynn3162++
					}
				}
				r.EncodeMapStart(yynn3162)
				yynn3162 = 0
			}
			if yyr3162 || yy2arr3162 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3162[0] {
					yym3164 := z.EncBinary()
					_ = yym3164
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3162[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3165 := z.EncBinary()
					_ = yym3165
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3162 || yy2arr3162 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3162[1] {
					yym3167 := z.EncBinary()
					_ = yym3167
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3162[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3168 := z.EncBinary()
					_ = yym3168
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3162 || yy2arr3162 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3162[2] {
					yy3170 := &x.ObjectMeta
					yy3170.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3162[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3171 := &x.ObjectMeta
					yy3171.CodecEncodeSelf(e)
				}
			}
			if yyr3162 || yy2arr3162 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3162[3] {
					yy3173 := &x.Spec
					yy3173.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3162[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3174 := &x.Spec
					yy3174.CodecEncodeSelf(e)
				}
			}
			if yyr3162 || yy2arr3162 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3162[4] {
					yy3176 := &x.Status
					yy3176.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3162[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3177 := &x.Status
					yy3177.CodecEncodeSelf(e)
				}
			}
			if yyr3162 || yy2arr3162 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuota) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3178 := z.DecBinary()
	_ = yym3178
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3179 := r.ContainerType()
		if yyct3179 == codecSelferValueTypeMap1234 {
			yyl3179 := r.ReadMapStart()
			if yyl3179 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3179, d)
			}
		} else if yyct3179 == codecSelferValueTypeArray1234 {
			yyl3179 := r.ReadArrayStart()
			if yyl3179 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3179, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuota) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3180Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3180Slc
	var yyhl3180 bool = l >= 0
	for yyj3180 := 0; ; yyj3180++ {
		if yyhl3180 {
			if yyj3180 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3180Slc = r.DecodeBytes(yys3180Slc, true, true)
		yys3180 := string(yys3180Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3180 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3183 := &x.ObjectMeta
				yyv3183.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ResourceQuotaSpec{}
			} else {
				yyv3184 := &x.Spec
				yyv3184.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ResourceQuotaStatus{}
			} else {
				yyv3185 := &x.Status
				yyv3185.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3180)
		} // end switch yys3180
	} // end for yyj3180
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuota) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3186 int
	var yyb3186 bool
	var yyhl3186 bool = l >= 0
	yyj3186++
	if yyhl3186 {
		yyb3186 = yyj3186 > l
	} else {
		yyb3186 = r.CheckBreak()
	}
	if yyb3186 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3186++
	if yyhl3186 {
		yyb3186 = yyj3186 > l
	} else {
		yyb3186 = r.CheckBreak()
	}
	if yyb3186 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3186++
	if yyhl3186 {
		yyb3186 = yyj3186 > l
	} else {
		yyb3186 = r.CheckBreak()
	}
	if yyb3186 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3189 := &x.ObjectMeta
		yyv3189.CodecDecodeSelf(d)
	}
	yyj3186++
	if yyhl3186 {
		yyb3186 = yyj3186 > l
	} else {
		yyb3186 = r.CheckBreak()
	}
	if yyb3186 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ResourceQuotaSpec{}
	} else {
		yyv3190 := &x.Spec
		yyv3190.CodecDecodeSelf(d)
	}
	yyj3186++
	if yyhl3186 {
		yyb3186 = yyj3186 > l
	} else {
		yyb3186 = r.CheckBreak()
	}
	if yyb3186 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ResourceQuotaStatus{}
	} else {
		yyv3191 := &x.Status
		yyv3191.CodecDecodeSelf(d)
	}
	for {
		yyj3186++
		if yyhl3186 {
			yyb3186 = yyj3186 > l
		} else {
			yyb3186 = r.CheckBreak()
		}
		if yyb3186 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3186-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3192 := z.EncBinary()
		_ = yym3192
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3193 := !z.EncBinary()
			yy2arr3193 := z.EncBasicHandle().StructToArray
			var yyq3193 [4]bool
			_, _, _ = yysep3193, yyq3193, yy2arr3193
			const yyr3193 bool = false
			yyq3193[0] = x.Kind != ""
			yyq3193[1] = x.APIVersion != ""
			yyq3193[2] = true
			var yynn3193 int
			if yyr3193 || yy2arr3193 {
				r.EncodeArrayStart(4)
			} else {
				yynn3193 = 1
				for _, b := range yyq3193 {
					if b {
						yynn3193++
					}
				}
				r.EncodeMapStart(yynn3193)
				yynn3193 = 0
			}
			if yyr3193 || yy2arr3193 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3193[0] {
					yym3195 := z.EncBinary()
					_ = yym3195
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3193[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3196 := z.EncBinary()
					_ = yym3196
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3193 || yy2arr3193 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3193[1] {
					yym3198 := z.EncBinary()
					_ = yym3198
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3193[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3199 := z.EncBinary()
					_ = yym3199
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3193 || yy2arr3193 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3193[2] {
					yy3201 := &x.ListMeta
					yym3202 := z.EncBinary()
					_ = yym3202
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3201) {
					} else {
						z.EncFallback(yy3201)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3193[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3203 := &x.ListMeta
					yym3204 := z.EncBinary()
					_ = yym3204
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3203) {
					} else {
						z.EncFallback(yy3203)
					}
				}
			}
			if yyr3193 || yy2arr3193 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3206 := z.EncBinary()
					_ = yym3206
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3207 := z.EncBinary()
					_ = yym3207
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			}
			if yyr3193 || yy2arr3193 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3208 := z.DecBinary()
	_ = yym3208
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3209 := r.ContainerType()
		if yyct3209 == codecSelferValueTypeMap1234 {
			yyl3209 := r.ReadMapStart()
			if yyl3209 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3209, d)
			}
		} else if yyct3209 == codecSelferValueTypeArray1234 {
			yyl3209 := r.ReadArrayStart()
			if yyl3209 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3209, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3210Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3210Slc
	var yyhl3210 bool = l >= 0
	for yyj3210 := 0; ; yyj3210++ {
		if yyhl3210 {
			if yyj3210 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3210Slc = r.DecodeBytes(yys3210Slc, true, true)
		yys3210 := string(yys3210Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3210 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3213 := &x.ListMeta
				yym3214 := z.DecBinary()
				_ = yym3214
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3213) {
				} else {
					z.DecFallback(yyv3213, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3215 := &x.Items
				yym3216 := z.DecBinary()
				_ = yym3216
				if false {
				} else {
					h.decSliceResourceQuota((*[]ResourceQuota)(yyv3215), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3210)
		} // end switch yys3210
	} // end for yyj3210
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3217 int
	var yyb3217 bool
	var yyhl3217 bool = l >= 0
	yyj3217++
	if yyhl3217 {
		yyb3217 = yyj3217 > l
	} else {
		yyb3217 = r.CheckBreak()
	}
	if yyb3217 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3217++
	if yyhl3217 {
		yyb3217 = yyj3217 > l
	} else {
		yyb3217 = r.CheckBreak()
	}
	if yyb3217 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3217++
	if yyhl3217 {
		yyb3217 = yyj3217 > l
	} else {
		yyb3217 = r.CheckBreak()
	}
	if yyb3217 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3220 := &x.ListMeta
		yym3221 := z.DecBinary()
		_ = yym3221
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3220) {
		} else {
			z.DecFallback(yyv3220, false)
		}
	}
	yyj3217++
	if yyhl3217 {
		yyb3217 = yyj3217 > l
	} else {
		yyb3217 = r.CheckBreak()
	}
	if yyb3217 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3222 := &x.Items
		yym3223 := z.DecBinary()
		_ = yym3223
		if false {
		} else {
			h.decSliceResourceQuota((*[]ResourceQuota)(yyv3222), d)
		}
	}
	for {
		yyj3217++
		if yyhl3217 {
			yyb3217 = yyj3217 > l
		} else {
			yyb3217 = r.CheckBreak()
		}
		if yyb3217 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3217-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Secret) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3224 := z.EncBinary()
		_ = yym3224
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3225 := !z.EncBinary()
			yy2arr3225 := z.EncBasicHandle().StructToArray
			var yyq3225 [5]bool
			_, _, _ = yysep3225, yyq3225, yy2arr3225
			const yyr3225 bool = false
			yyq3225[0] = x.Kind != ""
			yyq3225[1] = x.APIVersion != ""
			yyq3225[2] = true
			yyq3225[3] = len(x.Data) != 0
			yyq3225[4] = x.Type != ""
			var yynn3225 int
			if yyr3225 || yy2arr3225 {
				r.EncodeArrayStart(5)
			} else {
				yynn3225 = 0
				for _, b := range yyq3225 {
					if b {
						yynn3225++
					}
				}
				r.EncodeMapStart(yynn3225)
				yynn3225 = 0
			}
			if yyr3225 || yy2arr3225 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3225[0] {
					yym3227 := z.EncBinary()
					_ = yym3227
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3225[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3228 := z.EncBinary()
					_ = yym3228
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3225 || yy2arr3225 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3225[1] {
					yym3230 := z.EncBinary()
					_ = yym3230
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3225[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3231 := z.EncBinary()
					_ = yym3231
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3225 || yy2arr3225 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3225[2] {
					yy3233 := &x.ObjectMeta
					yy3233.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3225[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3234 := &x.ObjectMeta
					yy3234.CodecEncodeSelf(e)
				}
			}
			if yyr3225 || yy2arr3225 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3225[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3236 := z.EncBinary()
						_ = yym3236
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3225[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3237 := z.EncBinary()
						_ = yym3237
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				}
			}
			if yyr3225 || yy2arr3225 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3225[4] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3225[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr3225 || yy2arr3225 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Secret) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3239 := z.DecBinary()
	_ = yym3239
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3240 := r.ContainerType()
		if yyct3240 == codecSelferValueTypeMap1234 {
			yyl3240 := r.ReadMapStart()
			if yyl3240 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3240, d)
			}
		} else if yyct3240 == codecSelferValueTypeArray1234 {
			yyl3240 := r.ReadArrayStart()
			if yyl3240 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3240, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Secret) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3241Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3241Slc
	var yyhl3241 bool = l >= 0
	for yyj3241 := 0; ; yyj3241++ {
		if yyhl3241 {
			if yyj3241 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3241Slc = r.DecodeBytes(yys3241Slc, true, true)
		yys3241 := string(yys3241Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3241 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3244 := &x.ObjectMeta
				yyv3244.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv3245 := &x.Data
				yym3246 := z.DecBinary()
				_ = yym3246
				if false {
				} else {
					h.decMapstringSliceuint8((*map[string][]uint8)(yyv3245), d)
				}
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = SecretType(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3241)
		} // end switch yys3241
	} // end for yyj3241
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Secret) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3248 int
	var yyb3248 bool
	var yyhl3248 bool = l >= 0
	yyj3248++
	if yyhl3248 {
		yyb3248 = yyj3248 > l
	} else {
		yyb3248 = r.CheckBreak()
	}
	if yyb3248 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3248++
	if yyhl3248 {
		yyb3248 = yyj3248 > l
	} else {
		yyb3248 = r.CheckBreak()
	}
	if yyb3248 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3248++
	if yyhl3248 {
		yyb3248 = yyj3248 > l
	} else {
		yyb3248 = r.CheckBreak()
	}
	if yyb3248 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3251 := &x.ObjectMeta
		yyv3251.CodecDecodeSelf(d)
	}
	yyj3248++
	if yyhl3248 {
		yyb3248 = yyj3248 > l
	} else {
		yyb3248 = r.CheckBreak()
	}
	if yyb3248 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv3252 := &x.Data
		yym3253 := z.DecBinary()
		_ = yym3253
		if false {
		} else {
			h.decMapstringSliceuint8((*map[string][]uint8)(yyv3252), d)
		}
	}
	yyj3248++
	if yyhl3248 {
		yyb3248 = yyj3248 > l
	} else {
		yyb3248 = r.CheckBreak()
	}
	if yyb3248 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = SecretType(r.DecodeString())
	}
	for {
		yyj3248++
		if yyhl3248 {
			yyb3248 = yyj3248 > l
		} else {
			yyb3248 = r.CheckBreak()
		}
		if yyb3248 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3248-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x SecretType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3255 := z.EncBinary()
	_ = yym3255
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SecretType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3256 := z.DecBinary()
	_ = yym3256
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SecretList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3257 := z.EncBinary()
		_ = yym3257
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3258 := !z.EncBinary()
			yy2arr3258 := z.EncBasicHandle().StructToArray
			var yyq3258 [4]bool
			_, _, _ = yysep3258, yyq3258, yy2arr3258
			const yyr3258 bool = false
			yyq3258[0] = x.Kind != ""
			yyq3258[1] = x.APIVersion != ""
			yyq3258[2] = true
			var yynn3258 int
			if yyr3258 || yy2arr3258 {
				r.EncodeArrayStart(4)
			} else {
				yynn3258 = 1
				for _, b := range yyq3258 {
					if b {
						yynn3258++
					}
				}
				r.EncodeMapStart(yynn3258)
				yynn3258 = 0
			}
			if yyr3258 || yy2arr3258 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3258[0] {
					yym3260 := z.EncBinary()
					_ = yym3260
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3258[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3261 := z.EncBinary()
					_ = yym3261
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3258 || yy2arr3258 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3258[1] {
					yym3263 := z.EncBinary()
					_ = yym3263
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3258[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3264 := z.EncBinary()
					_ = yym3264
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3258 || yy2arr3258 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3258[2] {
					yy3266 := &x.ListMeta
					yym3267 := z.EncBinary()
					_ = yym3267
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3266) {
					} else {
						z.EncFallback(yy3266)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3258[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3268 := &x.ListMeta
					yym3269 := z.EncBinary()
					_ = yym3269
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3268) {
					} else {
						z.EncFallback(yy3268)
					}
				}
			}
			if yyr3258 || yy2arr3258 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3271 := z.EncBinary()
					_ = yym3271
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3272 := z.EncBinary()
					_ = yym3272
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			}
			if yyr3258 || yy2arr3258 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3273 := z.DecBinary()
	_ = yym3273
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3274 := r.ContainerType()
		if yyct3274 == codecSelferValueTypeMap1234 {
			yyl3274 := r.ReadMapStart()
			if yyl3274 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3274, d)
			}
		} else if yyct3274 == codecSelferValueTypeArray1234 {
			yyl3274 := r.ReadArrayStart()
			if yyl3274 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3274, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3275Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3275Slc
	var yyhl3275 bool = l >= 0
	for yyj3275 := 0; ; yyj3275++ {
		if yyhl3275 {
			if yyj3275 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3275Slc = r.DecodeBytes(yys3275Slc, true, true)
		yys3275 := string(yys3275Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3275 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3278 := &x.ListMeta
				yym3279 := z.DecBinary()
				_ = yym3279
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3278) {
				} else {
					z.DecFallback(yyv3278, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3280 := &x.Items
				yym3281 := z.DecBinary()
				_ = yym3281
				if false {
				} else {
					h.decSliceSecret((*[]Secret)(yyv3280), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3275)
		} // end switch yys3275
	} // end for yyj3275
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3282 int
	var yyb3282 bool
	var yyhl3282 bool = l >= 0
	yyj3282++
	if yyhl3282 {
		yyb3282 = yyj3282 > l
	} else {
		yyb3282 = r.CheckBreak()
	}
	if yyb3282 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3282++
	if yyhl3282 {
		yyb3282 = yyj3282 > l
	} else {
		yyb3282 = r.CheckBreak()
	}
	if yyb3282 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3282++
	if yyhl3282 {
		yyb3282 = yyj3282 > l
	} else {
		yyb3282 = r.CheckBreak()
	}
	if yyb3282 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3285 := &x.ListMeta
		yym3286 := z.DecBinary()
		_ = yym3286
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3285) {
		} else {
			z.DecFallback(yyv3285, false)
		}
	}
	yyj3282++
	if yyhl3282 {
		yyb3282 = yyj3282 > l
	} else {
		yyb3282 = r.CheckBreak()
	}
	if yyb3282 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3287 := &x.Items
		yym3288 := z.DecBinary()
		_ = yym3288
		if false {
		} else {
			h.decSliceSecret((*[]Secret)(yyv3287), d)
		}
	}
	for {
		yyj3282++
		if yyhl3282 {
			yyb3282 = yyj3282 > l
		} else {
			yyb3282 = r.CheckBreak()
		}
		if yyb3282 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3282-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ComponentConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3289 := z.EncBinary()
	_ = yym3289
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ComponentConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3290 := z.DecBinary()
	_ = yym3290
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ComponentCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3291 := z.EncBinary()
		_ = yym3291
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3292 := !z.EncBinary()
			yy2arr3292 := z.EncBasicHandle().StructToArray
			var yyq3292 [4]bool
			_, _, _ = yysep3292, yyq3292, yy2arr3292
			const yyr3292 bool = false
			yyq3292[2] = x.Message != ""
			yyq3292[3] = x.Error != ""
			var yynn3292 int
			if yyr3292 || yy2arr3292 {
				r.EncodeArrayStart(4)
			} else {
				yynn3292 = 2
				for _, b := range yyq3292 {
					if b {
						yynn3292++
					}
				}
				r.EncodeMapStart(yynn3292)
				yynn3292 = 0
			}
			if yyr3292 || yy2arr3292 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3292 || yy2arr3292 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr3292 || yy2arr3292 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3292[2] {
					yym3296 := z.EncBinary()
					_ = yym3296
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3292[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3297 := z.EncBinary()
					_ = yym3297
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3292 || yy2arr3292 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3292[3] {
					yym3299 := z.EncBinary()
					_ = yym3299
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3292[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("error"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3300 := z.EncBinary()
					_ = yym3300
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				}
			}
			if yyr3292 || yy2arr3292 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3301 := z.DecBinary()
	_ = yym3301
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3302 := r.ContainerType()
		if yyct3302 == codecSelferValueTypeMap1234 {
			yyl3302 := r.ReadMapStart()
			if yyl3302 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3302, d)
			}
		} else if yyct3302 == codecSelferValueTypeArray1234 {
			yyl3302 := r.ReadArrayStart()
			if yyl3302 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3302, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3303Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3303Slc
	var yyhl3303 bool = l >= 0
	for yyj3303 := 0; ; yyj3303++ {
		if yyhl3303 {
			if yyj3303 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3303Slc = r.DecodeBytes(yys3303Slc, true, true)
		yys3303 := string(yys3303Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3303 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ComponentConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "error":
			if r.TryDecodeAsNil() {
				x.Error = ""
			} else {
				x.Error = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3303)
		} // end switch yys3303
	} // end for yyj3303
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3308 int
	var yyb3308 bool
	var yyhl3308 bool = l >= 0
	yyj3308++
	if yyhl3308 {
		yyb3308 = yyj3308 > l
	} else {
		yyb3308 = r.CheckBreak()
	}
	if yyb3308 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ComponentConditionType(r.DecodeString())
	}
	yyj3308++
	if yyhl3308 {
		yyb3308 = yyj3308 > l
	} else {
		yyb3308 = r.CheckBreak()
	}
	if yyb3308 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj3308++
	if yyhl3308 {
		yyb3308 = yyj3308 > l
	} else {
		yyb3308 = r.CheckBreak()
	}
	if yyb3308 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3308++
	if yyhl3308 {
		yyb3308 = yyj3308 > l
	} else {
		yyb3308 = r.CheckBreak()
	}
	if yyb3308 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Error = ""
	} else {
		x.Error = string(r.DecodeString())
	}
	for {
		yyj3308++
		if yyhl3308 {
			yyb3308 = yyj3308 > l
		} else {
			yyb3308 = r.CheckBreak()
		}
		if yyb3308 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3308-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3313 := z.EncBinary()
		_ = yym3313
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3314 := !z.EncBinary()
			yy2arr3314 := z.EncBasicHandle().StructToArray
			var yyq3314 [4]bool
			_, _, _ = yysep3314, yyq3314, yy2arr3314
			const yyr3314 bool = false
			yyq3314[0] = x.Kind != ""
			yyq3314[1] = x.APIVersion != ""
			yyq3314[2] = true
			yyq3314[3] = len(x.Conditions) != 0
			var yynn3314 int
			if yyr3314 || yy2arr3314 {
				r.EncodeArrayStart(4)
			} else {
				yynn3314 = 0
				for _, b := range yyq3314 {
					if b {
						yynn3314++
					}
				}
				r.EncodeMapStart(yynn3314)
				yynn3314 = 0
			}
			if yyr3314 || yy2arr3314 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3314[0] {
					yym3316 := z.EncBinary()
					_ = yym3316
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3314[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3317 := z.EncBinary()
					_ = yym3317
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3314 || yy2arr3314 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3314[1] {
					yym3319 := z.EncBinary()
					_ = yym3319
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3314[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3320 := z.EncBinary()
					_ = yym3320
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3314 || yy2arr3314 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3314[2] {
					yy3322 := &x.ObjectMeta
					yy3322.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3314[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3323 := &x.ObjectMeta
					yy3323.CodecEncodeSelf(e)
				}
			}
			if yyr3314 || yy2arr3314 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3314[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3325 := z.EncBinary()
						_ = yym3325
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3314[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3326 := z.EncBinary()
						_ = yym3326
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr3314 || yy2arr3314 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3327 := z.DecBinary()
	_ = yym3327
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3328 := r.ContainerType()
		if yyct3328 == codecSelferValueTypeMap1234 {
			yyl3328 := r.ReadMapStart()
			if yyl3328 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3328, d)
			}
		} else if yyct3328 == codecSelferValueTypeArray1234 {
			yyl3328 := r.ReadArrayStart()
			if yyl3328 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3328, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3329Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3329Slc
	var yyhl3329 bool = l >= 0
	for yyj3329 := 0; ; yyj3329++ {
		if yyhl3329 {
			if yyj3329 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3329Slc = r.DecodeBytes(yys3329Slc, true, true)
		yys3329 := string(yys3329Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3329 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3332 := &x.ObjectMeta
				yyv3332.CodecDecodeSelf(d)
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv3333 := &x.Conditions
				yym3334 := z.DecBinary()
				_ = yym3334
				if false {
				} else {
					h.decSliceComponentCondition((*[]ComponentCondition)(yyv3333), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3329)
		} // end switch yys3329
	} // end for yyj3329
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3335 int
	var yyb3335 bool
	var yyhl3335 bool = l >= 0
	yyj3335++
	if yyhl3335 {
		yyb3335 = yyj3335 > l
	} else {
		yyb3335 = r.CheckBreak()
	}
	if yyb3335 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3335++
	if yyhl3335 {
		yyb3335 = yyj3335 > l
	} else {
		yyb3335 = r.CheckBreak()
	}
	if yyb3335 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3335++
	if yyhl3335 {
		yyb3335 = yyj3335 > l
	} else {
		yyb3335 = r.CheckBreak()
	}
	if yyb3335 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3338 := &x.ObjectMeta
		yyv3338.CodecDecodeSelf(d)
	}
	yyj3335++
	if yyhl3335 {
		yyb3335 = yyj3335 > l
	} else {
		yyb3335 = r.CheckBreak()
	}
	if yyb3335 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv3339 := &x.Conditions
		yym3340 := z.DecBinary()
		_ = yym3340
		if false {
		} else {
			h.decSliceComponentCondition((*[]ComponentCondition)(yyv3339), d)
		}
	}
	for {
		yyj3335++
		if yyhl3335 {
			yyb3335 = yyj3335 > l
		} else {
			yyb3335 = r.CheckBreak()
		}
		if yyb3335 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3335-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3341 := z.EncBinary()
		_ = yym3341
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3342 := !z.EncBinary()
			yy2arr3342 := z.EncBasicHandle().StructToArray
			var yyq3342 [4]bool
			_, _, _ = yysep3342, yyq3342, yy2arr3342
			const yyr3342 bool = false
			yyq3342[0] = x.Kind != ""
			yyq3342[1] = x.APIVersion != ""
			yyq3342[2] = true
			var yynn3342 int
			if yyr3342 || yy2arr3342 {
				r.EncodeArrayStart(4)
			} else {
				yynn3342 = 1
				for _, b := range yyq3342 {
					if b {
						yynn3342++
					}
				}
				r.EncodeMapStart(yynn3342)
				yynn3342 = 0
			}
			if yyr3342 || yy2arr3342 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3342[0] {
					yym3344 := z.EncBinary()
					_ = yym3344
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3342[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3345 := z.EncBinary()
					_ = yym3345
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3342 || yy2arr3342 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3342[1] {
					yym3347 := z.EncBinary()
					_ = yym3347
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3342[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3348 := z.EncBinary()
					_ = yym3348
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3342 || yy2arr3342 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3342[2] {
					yy3350 := &x.ListMeta
					yym3351 := z.EncBinary()
					_ = yym3351
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3350) {
					} else {
						z.EncFallback(yy3350)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3342[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3352 := &x.ListMeta
					yym3353 := z.EncBinary()
					_ = yym3353
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3352) {
					} else {
						z.EncFallback(yy3352)
					}
				}
			}
			if yyr3342 || yy2arr3342 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3355 := z.EncBinary()
					_ = yym3355
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3356 := z.EncBinary()
					_ = yym3356
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			}
			if yyr3342 || yy2arr3342 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3357 := z.DecBinary()
	_ = yym3357
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3358 := r.ContainerType()
		if yyct3358 == codecSelferValueTypeMap1234 {
			yyl3358 := r.ReadMapStart()
			if yyl3358 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3358, d)
			}
		} else if yyct3358 == codecSelferValueTypeArray1234 {
			yyl3358 := r.ReadArrayStart()
			if yyl3358 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3358, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3359Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3359Slc
	var yyhl3359 bool = l >= 0
	for yyj3359 := 0; ; yyj3359++ {
		if yyhl3359 {
			if yyj3359 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3359Slc = r.DecodeBytes(yys3359Slc, true, true)
		yys3359 := string(yys3359Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3359 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3362 := &x.ListMeta
				yym3363 := z.DecBinary()
				_ = yym3363
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3362) {
				} else {
					z.DecFallback(yyv3362, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3364 := &x.Items
				yym3365 := z.DecBinary()
				_ = yym3365
				if false {
				} else {
					h.decSliceComponentStatus((*[]ComponentStatus)(yyv3364), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3359)
		} // end switch yys3359
	} // end for yyj3359
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3366 int
	var yyb3366 bool
	var yyhl3366 bool = l >= 0
	yyj3366++
	if yyhl3366 {
		yyb3366 = yyj3366 > l
	} else {
		yyb3366 = r.CheckBreak()
	}
	if yyb3366 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3366++
	if yyhl3366 {
		yyb3366 = yyj3366 > l
	} else {
		yyb3366 = r.CheckBreak()
	}
	if yyb3366 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3366++
	if yyhl3366 {
		yyb3366 = yyj3366 > l
	} else {
		yyb3366 = r.CheckBreak()
	}
	if yyb3366 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3369 := &x.ListMeta
		yym3370 := z.DecBinary()
		_ = yym3370
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3369) {
		} else {
			z.DecFallback(yyv3369, false)
		}
	}
	yyj3366++
	if yyhl3366 {
		yyb3366 = yyj3366 > l
	} else {
		yyb3366 = r.CheckBreak()
	}
	if yyb3366 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3371 := &x.Items
		yym3372 := z.DecBinary()
		_ = yym3372
		if false {
		} else {
			h.decSliceComponentStatus((*[]ComponentStatus)(yyv3371), d)
		}
	}
	for {
		yyj3366++
		if yyhl3366 {
			yyb3366 = yyj3366 > l
		} else {
			yyb3366 = r.CheckBreak()
		}
		if yyb3366 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3366-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3373 := z.EncBinary()
		_ = yym3373
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3374 := !z.EncBinary()
			yy2arr3374 := z.EncBasicHandle().StructToArray
			var yyq3374 [1]bool
			_, _, _ = yysep3374, yyq3374, yy2arr3374
			const yyr3374 bool = false
			yyq3374[0] = len(x.Items) != 0
			var yynn3374 int
			if yyr3374 || yy2arr3374 {
				r.EncodeArrayStart(1)
			} else {
				yynn3374 = 0
				for _, b := range yyq3374 {
					if b {
						yynn3374++
					}
				}
				r.EncodeMapStart(yynn3374)
				yynn3374 = 0
			}
			if yyr3374 || yy2arr3374 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3374[0] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym3376 := z.EncBinary()
						_ = yym3376
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3374[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym3377 := z.EncBinary()
						_ = yym3377
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				}
			}
			if yyr3374 || yy2arr3374 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3378 := z.DecBinary()
	_ = yym3378
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3379 := r.ContainerType()
		if yyct3379 == codecSelferValueTypeMap1234 {
			yyl3379 := r.ReadMapStart()
			if yyl3379 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3379, d)
			}
		} else if yyct3379 == codecSelferValueTypeArray1234 {
			yyl3379 := r.ReadArrayStart()
			if yyl3379 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3379, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3380Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3380Slc
	var yyhl3380 bool = l >= 0
	for yyj3380 := 0; ; yyj3380++ {
		if yyhl3380 {
			if yyj3380 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3380Slc = r.DecodeBytes(yys3380Slc, true, true)
		yys3380 := string(yys3380Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3380 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3381 := &x.Items
				yym3382 := z.DecBinary()
				_ = yym3382
				if false {
				} else {
					h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv3381), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3380)
		} // end switch yys3380
	} // end for yyj3380
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3383 int
	var yyb3383 bool
	var yyhl3383 bool = l >= 0
	yyj3383++
	if yyhl3383 {
		yyb3383 = yyj3383 > l
	} else {
		yyb3383 = r.CheckBreak()
	}
	if yyb3383 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3384 := &x.Items
		yym3385 := z.DecBinary()
		_ = yym3385
		if false {
		} else {
			h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv3384), d)
		}
	}
	for {
		yyj3383++
		if yyhl3383 {
			yyb3383 = yyj3383 > l
		} else {
			yyb3383 = r.CheckBreak()
		}
		if yyb3383 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3383-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeFile) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3386 := z.EncBinary()
		_ = yym3386
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3387 := !z.EncBinary()
			yy2arr3387 := z.EncBasicHandle().StructToArray
			var yyq3387 [2]bool
			_, _, _ = yysep3387, yyq3387, yy2arr3387
			const yyr3387 bool = false
			var yynn3387 int
			if yyr3387 || yy2arr3387 {
				r.EncodeArrayStart(2)
			} else {
				yynn3387 = 2
				for _, b := range yyq3387 {
					if b {
						yynn3387++
					}
				}
				r.EncodeMapStart(yynn3387)
				yynn3387 = 0
			}
			if yyr3387 || yy2arr3387 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3389 := z.EncBinary()
				_ = yym3389
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3390 := z.EncBinary()
				_ = yym3390
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr3387 || yy2arr3387 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3392 := &x.FieldRef
				yy3392.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3393 := &x.FieldRef
				yy3393.CodecEncodeSelf(e)
			}
			if yyr3387 || yy2arr3387 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeFile) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3394 := z.DecBinary()
	_ = yym3394
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3395 := r.ContainerType()
		if yyct3395 == codecSelferValueTypeMap1234 {
			yyl3395 := r.ReadMapStart()
			if yyl3395 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3395, d)
			}
		} else if yyct3395 == codecSelferValueTypeArray1234 {
			yyl3395 := r.ReadArrayStart()
			if yyl3395 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3395, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3396Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3396Slc
	var yyhl3396 bool = l >= 0
	for yyj3396 := 0; ; yyj3396++ {
		if yyhl3396 {
			if yyj3396 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3396Slc = r.DecodeBytes(yys3396Slc, true, true)
		yys3396 := string(yys3396Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3396 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "fieldRef":
			if r.TryDecodeAsNil() {
				x.FieldRef = ObjectFieldSelector{}
			} else {
				yyv3398 := &x.FieldRef
				yyv3398.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3396)
		} // end switch yys3396
	} // end for yyj3396
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3399 int
	var yyb3399 bool
	var yyhl3399 bool = l >= 0
	yyj3399++
	if yyhl3399 {
		yyb3399 = yyj3399 > l
	} else {
		yyb3399 = r.CheckBreak()
	}
	if yyb3399 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj3399++
	if yyhl3399 {
		yyb3399 = yyj3399 > l
	} else {
		yyb3399 = r.CheckBreak()
	}
	if yyb3399 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldRef = ObjectFieldSelector{}
	} else {
		yyv3401 := &x.FieldRef
		yyv3401.CodecDecodeSelf(d)
	}
	for {
		yyj3399++
		if yyhl3399 {
			yyb3399 = yyj3399 > l
		} else {
			yyb3399 = r.CheckBreak()
		}
		if yyb3399 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3399-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3402 := z.EncBinary()
		_ = yym3402
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3403 := !z.EncBinary()
			yy2arr3403 := z.EncBasicHandle().StructToArray
			var yyq3403 [5]bool
			_, _, _ = yysep3403, yyq3403, yy2arr3403
			const yyr3403 bool = false
			yyq3403[0] = x.Capabilities != nil
			yyq3403[1] = x.Privileged != nil
			yyq3403[2] = x.SELinuxOptions != nil
			yyq3403[3] = x.RunAsUser != nil
			yyq3403[4] = x.RunAsNonRoot != nil
			var yynn3403 int
			if yyr3403 || yy2arr3403 {
				r.EncodeArrayStart(5)
			} else {
				yynn3403 = 0
				for _, b := range yyq3403 {
					if b {
						yynn3403++
					}
				}
				r.EncodeMapStart(yynn3403)
				yynn3403 = 0
			}
			if yyr3403 || yy2arr3403 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3403[0] {
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3403[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capabilities"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3403 || yy2arr3403 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3403[1] {
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy3406 := *x.Privileged
						yym3407 := z.EncBinary()
						_ = yym3407
						if false {
						} else {
							r.EncodeBool(bool(yy3406))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3403[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy3408 := *x.Privileged
						yym3409 := z.EncBinary()
						_ = yym3409
						if false {
						} else {
							r.EncodeBool(bool(yy3408))
						}
					}
				}
			}
			if yyr3403 || yy2arr3403 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3403[2] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3403[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3403 || yy2arr3403 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3403[3] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy3412 := *x.RunAsUser
						yym3413 := z.EncBinary()
						_ = yym3413
						if false {
						} else {
							r.EncodeInt(int64(yy3412))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3403[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy3414 := *x.RunAsUser
						yym3415 := z.EncBinary()
						_ = yym3415
						if false {
						} else {
							r.EncodeInt(int64(yy3414))
						}
					}
				}
			}
			if yyr3403 || yy2arr3403 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3403[4] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy3417 := *x.RunAsNonRoot
						yym3418 := z.EncBinary()
						_ = yym3418
						if false {
						} else {
							r.EncodeBool(bool(yy3417))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3403[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy3419 := *x.RunAsNonRoot
						yym3420 := z.EncBinary()
						_ = yym3420
						if false {
						} else {
							r.EncodeBool(bool(yy3419))
						}
					}
				}
			}
			if yyr3403 || yy2arr3403 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3421 := z.DecBinary()
	_ = yym3421
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3422 := r.ContainerType()
		if yyct3422 == codecSelferValueTypeMap1234 {
			yyl3422 := r.ReadMapStart()
			if yyl3422 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3422, d)
			}
		} else if yyct3422 == codecSelferValueTypeArray1234 {
			yyl3422 := r.ReadArrayStart()
			if yyl3422 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3422, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3423Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3423Slc
	var yyhl3423 bool = l >= 0
	for yyj3423 := 0; ; yyj3423++ {
		if yyhl3423 {
			if yyj3423 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3423Slc = r.DecodeBytes(yys3423Slc, true, true)
		yys3423 := string(yys3423Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3423 {
		case "capabilities":
			if r.TryDecodeAsNil() {
				if x.Capabilities != nil {
					x.Capabilities = nil
				}
			} else {
				if x.Capabilities == nil {
					x.Capabilities = new(Capabilities)
				}
				x.Capabilities.CodecDecodeSelf(d)
			}
		case "privileged":
			if r.TryDecodeAsNil() {
				if x.Privileged != nil {
					x.Privileged = nil
				}
			} else {
				if x.Privileged == nil {
					x.Privileged = new(bool)
				}
				yym3426 := z.DecBinary()
				_ = yym3426
				if false {
				} else {
					*((*bool)(x.Privileged)) = r.DecodeBool()
				}
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym3429 := z.DecBinary()
				_ = yym3429
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym3431 := z.DecBinary()
				_ = yym3431
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3423)
		} // end switch yys3423
	} // end for yyj3423
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3432 int
	var yyb3432 bool
	var yyhl3432 bool = l >= 0
	yyj3432++
	if yyhl3432 {
		yyb3432 = yyj3432 > l
	} else {
		yyb3432 = r.CheckBreak()
	}
	if yyb3432 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Capabilities != nil {
			x.Capabilities = nil
		}
	} else {
		if x.Capabilities == nil {
			x.Capabilities = new(Capabilities)
		}
		x.Capabilities.CodecDecodeSelf(d)
	}
	yyj3432++
	if yyhl3432 {
		yyb3432 = yyj3432 > l
	} else {
		yyb3432 = r.CheckBreak()
	}
	if yyb3432 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Privileged != nil {
			x.Privileged = nil
		}
	} else {
		if x.Privileged == nil {
			x.Privileged = new(bool)
		}
		yym3435 := z.DecBinary()
		_ = yym3435
		if false {
		} else {
			*((*bool)(x.Privileged)) = r.DecodeBool()
		}
	}
	yyj3432++
	if yyhl3432 {
		yyb3432 = yyj3432 > l
	} else {
		yyb3432 = r.CheckBreak()
	}
	if yyb3432 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj3432++
	if yyhl3432 {
		yyb3432 = yyj3432 > l
	} else {
		yyb3432 = r.CheckBreak()
	}
	if yyb3432 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym3438 := z.DecBinary()
		_ = yym3438
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj3432++
	if yyhl3432 {
		yyb3432 = yyj3432 > l
	} else {
		yyb3432 = r.CheckBreak()
	}
	if yyb3432 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym3440 := z.DecBinary()
		_ = yym3440
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	for {
		yyj3432++
		if yyhl3432 {
			yyb3432 = yyj3432 > l
		} else {
			yyb3432 = r.CheckBreak()
		}
		if yyb3432 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3432-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SELinuxOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3441 := z.EncBinary()
		_ = yym3441
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3442 := !z.EncBinary()
			yy2arr3442 := z.EncBasicHandle().StructToArray
			var yyq3442 [4]bool
			_, _, _ = yysep3442, yyq3442, yy2arr3442
			const yyr3442 bool = false
			yyq3442[0] = x.User != ""
			yyq3442[1] = x.Role != ""
			yyq3442[2] = x.Type != ""
			yyq3442[3] = x.Level != ""
			var yynn3442 int
			if yyr3442 || yy2arr3442 {
				r.EncodeArrayStart(4)
			} else {
				yynn3442 = 0
				for _, b := range yyq3442 {
					if b {
						yynn3442++
					}
				}
				r.EncodeMapStart(yynn3442)
				yynn3442 = 0
			}
			if yyr3442 || yy2arr3442 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3442[0] {
					yym3444 := z.EncBinary()
					_ = yym3444
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3442[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3445 := z.EncBinary()
					_ = yym3445
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr3442 || yy2arr3442 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3442[1] {
					yym3447 := z.EncBinary()
					_ = yym3447
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3442[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("role"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3448 := z.EncBinary()
					_ = yym3448
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				}
			}
			if yyr3442 || yy2arr3442 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3442[2] {
					yym3450 := z.EncBinary()
					_ = yym3450
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3442[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3451 := z.EncBinary()
					_ = yym3451
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr3442 || yy2arr3442 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3442[3] {
					yym3453 := z.EncBinary()
					_ = yym3453
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3442[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("level"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3454 := z.EncBinary()
					_ = yym3454
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				}
			}
			if yyr3442 || yy2arr3442 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SELinuxOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3455 := z.DecBinary()
	_ = yym3455
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3456 := r.ContainerType()
		if yyct3456 == codecSelferValueTypeMap1234 {
			yyl3456 := r.ReadMapStart()
			if yyl3456 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3456, d)
			}
		} else if yyct3456 == codecSelferValueTypeArray1234 {
			yyl3456 := r.ReadArrayStart()
			if yyl3456 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3456, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3457Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3457Slc
	var yyhl3457 bool = l >= 0
	for yyj3457 := 0; ; yyj3457++ {
		if yyhl3457 {
			if yyj3457 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3457Slc = r.DecodeBytes(yys3457Slc, true, true)
		yys3457 := string(yys3457Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3457 {
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "role":
			if r.TryDecodeAsNil() {
				x.Role = ""
			} else {
				x.Role = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		case "level":
			if r.TryDecodeAsNil() {
				x.Level = ""
			} else {
				x.Level = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3457)
		} // end switch yys3457
	} // end for yyj3457
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SELinuxOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3462 int
	var yyb3462 bool
	var yyhl3462 bool = l >= 0
	yyj3462++
	if yyhl3462 {
		yyb3462 = yyj3462 > l
	} else {
		yyb3462 = r.CheckBreak()
	}
	if yyb3462 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj3462++
	if yyhl3462 {
		yyb3462 = yyj3462 > l
	} else {
		yyb3462 = r.CheckBreak()
	}
	if yyb3462 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Role = ""
	} else {
		x.Role = string(r.DecodeString())
	}
	yyj3462++
	if yyhl3462 {
		yyb3462 = yyj3462 > l
	} else {
		yyb3462 = r.CheckBreak()
	}
	if yyb3462 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	yyj3462++
	if yyhl3462 {
		yyb3462 = yyj3462 > l
	} else {
		yyb3462 = r.CheckBreak()
	}
	if yyb3462 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Level = ""
	} else {
		x.Level = string(r.DecodeString())
	}
	for {
		yyj3462++
		if yyhl3462 {
			yyb3462 = yyj3462 > l
		} else {
			yyb3462 = r.CheckBreak()
		}
		if yyb3462 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3462-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RangeAllocation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3467 := z.EncBinary()
		_ = yym3467
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3468 := !z.EncBinary()
			yy2arr3468 := z.EncBasicHandle().StructToArray
			var yyq3468 [5]bool
			_, _, _ = yysep3468, yyq3468, yy2arr3468
			const yyr3468 bool = false
			yyq3468[0] = x.Kind != ""
			yyq3468[1] = x.APIVersion != ""
			yyq3468[2] = true
			var yynn3468 int
			if yyr3468 || yy2arr3468 {
				r.EncodeArrayStart(5)
			} else {
				yynn3468 = 2
				for _, b := range yyq3468 {
					if b {
						yynn3468++
					}
				}
				r.EncodeMapStart(yynn3468)
				yynn3468 = 0
			}
			if yyr3468 || yy2arr3468 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3468[0] {
					yym3470 := z.EncBinary()
					_ = yym3470
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3468[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3471 := z.EncBinary()
					_ = yym3471
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3468 || yy2arr3468 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3468[1] {
					yym3473 := z.EncBinary()
					_ = yym3473
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3468[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3474 := z.EncBinary()
					_ = yym3474
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3468 || yy2arr3468 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3468[2] {
					yy3476 := &x.ObjectMeta
					yy3476.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3468[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3477 := &x.ObjectMeta
					yy3477.CodecEncodeSelf(e)
				}
			}
			if yyr3468 || yy2arr3468 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3479 := z.EncBinary()
				_ = yym3479
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("range"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3480 := z.EncBinary()
				_ = yym3480
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			}
			if yyr3468 || yy2arr3468 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym3482 := z.EncBinary()
					_ = yym3482
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("data"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym3483 := z.EncBinary()
					_ = yym3483
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			}
			if yyr3468 || yy2arr3468 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RangeAllocation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3484 := z.DecBinary()
	_ = yym3484
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3485 := r.ContainerType()
		if yyct3485 == codecSelferValueTypeMap1234 {
			yyl3485 := r.ReadMapStart()
			if yyl3485 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3485, d)
			}
		} else if yyct3485 == codecSelferValueTypeArray1234 {
			yyl3485 := r.ReadArrayStart()
			if yyl3485 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3485, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RangeAllocation) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3486Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3486Slc
	var yyhl3486 bool = l >= 0
	for yyj3486 := 0; ; yyj3486++ {
		if yyhl3486 {
			if yyj3486 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3486Slc = r.DecodeBytes(yys3486Slc, true, true)
		yys3486 := string(yys3486Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3486 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3489 := &x.ObjectMeta
				yyv3489.CodecDecodeSelf(d)
			}
		case "range":
			if r.TryDecodeAsNil() {
				x.Range = ""
			} else {
				x.Range = string(r.DecodeString())
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv3491 := &x.Data
				yym3492 := z.DecBinary()
				_ = yym3492
				if false {
				} else {
					*yyv3491 = r.DecodeBytes(*(*[]byte)(yyv3491), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3486)
		} // end switch yys3486
	} // end for yyj3486
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RangeAllocation) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3493 int
	var yyb3493 bool
	var yyhl3493 bool = l >= 0
	yyj3493++
	if yyhl3493 {
		yyb3493 = yyj3493 > l
	} else {
		yyb3493 = r.CheckBreak()
	}
	if yyb3493 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3493++
	if yyhl3493 {
		yyb3493 = yyj3493 > l
	} else {
		yyb3493 = r.CheckBreak()
	}
	if yyb3493 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3493++
	if yyhl3493 {
		yyb3493 = yyj3493 > l
	} else {
		yyb3493 = r.CheckBreak()
	}
	if yyb3493 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3496 := &x.ObjectMeta
		yyv3496.CodecDecodeSelf(d)
	}
	yyj3493++
	if yyhl3493 {
		yyb3493 = yyj3493 > l
	} else {
		yyb3493 = r.CheckBreak()
	}
	if yyb3493 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Range = ""
	} else {
		x.Range = string(r.DecodeString())
	}
	yyj3493++
	if yyhl3493 {
		yyb3493 = yyj3493 > l
	} else {
		yyb3493 = r.CheckBreak()
	}
	if yyb3493 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv3498 := &x.Data
		yym3499 := z.DecBinary()
		_ = yym3499
		if false {
		} else {
			*yyv3498 = r.DecodeBytes(*(*[]byte)(yyv3498), false, false)
		}
	}
	for {
		yyj3493++
		if yyhl3493 {
			yyb3493 = yyj3493 > l
		} else {
			yyb3493 = r.CheckBreak()
		}
		if yyb3493 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3493-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSlicePersistentVolumeAccessMode(v []PersistentVolumeAccessMode, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3500 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv3500.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeAccessMode(v *[]PersistentVolumeAccessMode, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3501 := *v
	yyh3501, yyl3501 := z.DecSliceHelperStart()
	var yyc3501 bool
	if yyl3501 == 0 {
		if yyv3501 == nil {
			yyv3501 = []PersistentVolumeAccessMode{}
			yyc3501 = true
		} else if len(yyv3501) != 0 {
			yyv3501 = yyv3501[:0]
			yyc3501 = true
		}
	} else if yyl3501 > 0 {
		var yyrr3501, yyrl3501 int
		var yyrt3501 bool
		if yyl3501 > cap(yyv3501) {

			yyrl3501, yyrt3501 = z.DecInferLen(yyl3501, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt3501 {
				if yyrl3501 <= cap(yyv3501) {
					yyv3501 = yyv3501[:yyrl3501]
				} else {
					yyv3501 = make([]PersistentVolumeAccessMode, yyrl3501)
				}
			} else {
				yyv3501 = make([]PersistentVolumeAccessMode, yyrl3501)
			}
			yyc3501 = true
			yyrr3501 = len(yyv3501)
		} else if yyl3501 != len(yyv3501) {
			yyv3501 = yyv3501[:yyl3501]
			yyc3501 = true
		}
		yyj3501 := 0
		for ; yyj3501 < yyrr3501; yyj3501++ {
			yyh3501.ElemContainerState(yyj3501)
			if r.TryDecodeAsNil() {
				yyv3501[yyj3501] = ""
			} else {
				yyv3501[yyj3501] = PersistentVolumeAccessMode(r.DecodeString())
			}

		}
		if yyrt3501 {
			for ; yyj3501 < yyl3501; yyj3501++ {
				yyv3501 = append(yyv3501, "")
				yyh3501.ElemContainerState(yyj3501)
				if r.TryDecodeAsNil() {
					yyv3501[yyj3501] = ""
				} else {
					yyv3501[yyj3501] = PersistentVolumeAccessMode(r.DecodeString())
				}

			}
		}

	} else {
		yyj3501 := 0
		for ; !r.CheckBreak(); yyj3501++ {

			if yyj3501 >= len(yyv3501) {
				yyv3501 = append(yyv3501, "") // var yyz3501 PersistentVolumeAccessMode
				yyc3501 = true
			}
			yyh3501.ElemContainerState(yyj3501)
			if yyj3501 < len(yyv3501) {
				if r.TryDecodeAsNil() {
					yyv3501[yyj3501] = ""
				} else {
					yyv3501[yyj3501] = PersistentVolumeAccessMode(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3501 < len(yyv3501) {
			yyv3501 = yyv3501[:yyj3501]
			yyc3501 = true
		} else if yyj3501 == 0 && yyv3501 == nil {
			yyv3501 = []PersistentVolumeAccessMode{}
			yyc3501 = true
		}
	}
	yyh3501.End()
	if yyc3501 {
		*v = yyv3501
	}
}

func (x codecSelfer1234) encSlicePersistentVolume(v []PersistentVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3505 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3506 := &yyv3505
		yy3506.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolume(v *[]PersistentVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3507 := *v
	yyh3507, yyl3507 := z.DecSliceHelperStart()
	var yyc3507 bool
	if yyl3507 == 0 {
		if yyv3507 == nil {
			yyv3507 = []PersistentVolume{}
			yyc3507 = true
		} else if len(yyv3507) != 0 {
			yyv3507 = yyv3507[:0]
			yyc3507 = true
		}
	} else if yyl3507 > 0 {
		var yyrr3507, yyrl3507 int
		var yyrt3507 bool
		if yyl3507 > cap(yyv3507) {

			yyrg3507 := len(yyv3507) > 0
			yyv23507 := yyv3507
			yyrl3507, yyrt3507 = z.DecInferLen(yyl3507, z.DecBasicHandle().MaxInitLen, 384)
			if yyrt3507 {
				if yyrl3507 <= cap(yyv3507) {
					yyv3507 = yyv3507[:yyrl3507]
				} else {
					yyv3507 = make([]PersistentVolume, yyrl3507)
				}
			} else {
				yyv3507 = make([]PersistentVolume, yyrl3507)
			}
			yyc3507 = true
			yyrr3507 = len(yyv3507)
			if yyrg3507 {
				copy(yyv3507, yyv23507)
			}
		} else if yyl3507 != len(yyv3507) {
			yyv3507 = yyv3507[:yyl3507]
			yyc3507 = true
		}
		yyj3507 := 0
		for ; yyj3507 < yyrr3507; yyj3507++ {
			yyh3507.ElemContainerState(yyj3507)
			if r.TryDecodeAsNil() {
				yyv3507[yyj3507] = PersistentVolume{}
			} else {
				yyv3508 := &yyv3507[yyj3507]
				yyv3508.CodecDecodeSelf(d)
			}

		}
		if yyrt3507 {
			for ; yyj3507 < yyl3507; yyj3507++ {
				yyv3507 = append(yyv3507, PersistentVolume{})
				yyh3507.ElemContainerState(yyj3507)
				if r.TryDecodeAsNil() {
					yyv3507[yyj3507] = PersistentVolume{}
				} else {
					yyv3509 := &yyv3507[yyj3507]
					yyv3509.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3507 := 0
		for ; !r.CheckBreak(); yyj3507++ {

			if yyj3507 >= len(yyv3507) {
				yyv3507 = append(yyv3507, PersistentVolume{}) // var yyz3507 PersistentVolume
				yyc3507 = true
			}
			yyh3507.ElemContainerState(yyj3507)
			if yyj3507 < len(yyv3507) {
				if r.TryDecodeAsNil() {
					yyv3507[yyj3507] = PersistentVolume{}
				} else {
					yyv3510 := &yyv3507[yyj3507]
					yyv3510.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3507 < len(yyv3507) {
			yyv3507 = yyv3507[:yyj3507]
			yyc3507 = true
		} else if yyj3507 == 0 && yyv3507 == nil {
			yyv3507 = []PersistentVolume{}
			yyc3507 = true
		}
	}
	yyh3507.End()
	if yyc3507 {
		*v = yyv3507
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeClaim(v []PersistentVolumeClaim, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3511 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3512 := &yyv3511
		yy3512.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeClaim(v *[]PersistentVolumeClaim, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3513 := *v
	yyh3513, yyl3513 := z.DecSliceHelperStart()
	var yyc3513 bool
	if yyl3513 == 0 {
		if yyv3513 == nil {
			yyv3513 = []PersistentVolumeClaim{}
			yyc3513 = true
		} else if len(yyv3513) != 0 {
			yyv3513 = yyv3513[:0]
			yyc3513 = true
		}
	} else if yyl3513 > 0 {
		var yyrr3513, yyrl3513 int
		var yyrt3513 bool
		if yyl3513 > cap(yyv3513) {

			yyrg3513 := len(yyv3513) > 0
			yyv23513 := yyv3513
			yyrl3513, yyrt3513 = z.DecInferLen(yyl3513, z.DecBasicHandle().MaxInitLen, 296)
			if yyrt3513 {
				if yyrl3513 <= cap(yyv3513) {
					yyv3513 = yyv3513[:yyrl3513]
				} else {
					yyv3513 = make([]PersistentVolumeClaim, yyrl3513)
				}
			} else {
				yyv3513 = make([]PersistentVolumeClaim, yyrl3513)
			}
			yyc3513 = true
			yyrr3513 = len(yyv3513)
			if yyrg3513 {
				copy(yyv3513, yyv23513)
			}
		} else if yyl3513 != len(yyv3513) {
			yyv3513 = yyv3513[:yyl3513]
			yyc3513 = true
		}
		yyj3513 := 0
		for ; yyj3513 < yyrr3513; yyj3513++ {
			yyh3513.ElemContainerState(yyj3513)
			if r.TryDecodeAsNil() {
				yyv3513[yyj3513] = PersistentVolumeClaim{}
			} else {
				yyv3514 := &yyv3513[yyj3513]
				yyv3514.CodecDecodeSelf(d)
			}

		}
		if yyrt3513 {
			for ; yyj3513 < yyl3513; yyj3513++ {
				yyv3513 = append(yyv3513, PersistentVolumeClaim{})
				yyh3513.ElemContainerState(yyj3513)
				if r.TryDecodeAsNil() {
					yyv3513[yyj3513] = PersistentVolumeClaim{}
				} else {
					yyv3515 := &yyv3513[yyj3513]
					yyv3515.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3513 := 0
		for ; !r.CheckBreak(); yyj3513++ {

			if yyj3513 >= len(yyv3513) {
				yyv3513 = append(yyv3513, PersistentVolumeClaim{}) // var yyz3513 PersistentVolumeClaim
				yyc3513 = true
			}
			yyh3513.ElemContainerState(yyj3513)
			if yyj3513 < len(yyv3513) {
				if r.TryDecodeAsNil() {
					yyv3513[yyj3513] = PersistentVolumeClaim{}
				} else {
					yyv3516 := &yyv3513[yyj3513]
					yyv3516.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3513 < len(yyv3513) {
			yyv3513 = yyv3513[:yyj3513]
			yyc3513 = true
		} else if yyj3513 == 0 && yyv3513 == nil {
			yyv3513 = []PersistentVolumeClaim{}
			yyc3513 = true
		}
	}
	yyh3513.End()
	if yyc3513 {
		*v = yyv3513
	}
}

func (x codecSelfer1234) encSliceCapability(v []Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3517 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv3517.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCapability(v *[]Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3518 := *v
	yyh3518, yyl3518 := z.DecSliceHelperStart()
	var yyc3518 bool
	if yyl3518 == 0 {
		if yyv3518 == nil {
			yyv3518 = []Capability{}
			yyc3518 = true
		} else if len(yyv3518) != 0 {
			yyv3518 = yyv3518[:0]
			yyc3518 = true
		}
	} else if yyl3518 > 0 {
		var yyrr3518, yyrl3518 int
		var yyrt3518 bool
		if yyl3518 > cap(yyv3518) {

			yyrl3518, yyrt3518 = z.DecInferLen(yyl3518, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt3518 {
				if yyrl3518 <= cap(yyv3518) {
					yyv3518 = yyv3518[:yyrl3518]
				} else {
					yyv3518 = make([]Capability, yyrl3518)
				}
			} else {
				yyv3518 = make([]Capability, yyrl3518)
			}
			yyc3518 = true
			yyrr3518 = len(yyv3518)
		} else if yyl3518 != len(yyv3518) {
			yyv3518 = yyv3518[:yyl3518]
			yyc3518 = true
		}
		yyj3518 := 0
		for ; yyj3518 < yyrr3518; yyj3518++ {
			yyh3518.ElemContainerState(yyj3518)
			if r.TryDecodeAsNil() {
				yyv3518[yyj3518] = ""
			} else {
				yyv3518[yyj3518] = Capability(r.DecodeString())
			}

		}
		if yyrt3518 {
			for ; yyj3518 < yyl3518; yyj3518++ {
				yyv3518 = append(yyv3518, "")
				yyh3518.ElemContainerState(yyj3518)
				if r.TryDecodeAsNil() {
					yyv3518[yyj3518] = ""
				} else {
					yyv3518[yyj3518] = Capability(r.DecodeString())
				}

			}
		}

	} else {
		yyj3518 := 0
		for ; !r.CheckBreak(); yyj3518++ {

			if yyj3518 >= len(yyv3518) {
				yyv3518 = append(yyv3518, "") // var yyz3518 Capability
				yyc3518 = true
			}
			yyh3518.ElemContainerState(yyj3518)
			if yyj3518 < len(yyv3518) {
				if r.TryDecodeAsNil() {
					yyv3518[yyj3518] = ""
				} else {
					yyv3518[yyj3518] = Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3518 < len(yyv3518) {
			yyv3518 = yyv3518[:yyj3518]
			yyc3518 = true
		} else if yyj3518 == 0 && yyv3518 == nil {
			yyv3518 = []Capability{}
			yyc3518 = true
		}
	}
	yyh3518.End()
	if yyc3518 {
		*v = yyv3518
	}
}

func (x codecSelfer1234) encSliceContainerPort(v []ContainerPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3522 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3523 := &yyv3522
		yy3523.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerPort(v *[]ContainerPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3524 := *v
	yyh3524, yyl3524 := z.DecSliceHelperStart()
	var yyc3524 bool
	if yyl3524 == 0 {
		if yyv3524 == nil {
			yyv3524 = []ContainerPort{}
			yyc3524 = true
		} else if len(yyv3524) != 0 {
			yyv3524 = yyv3524[:0]
			yyc3524 = true
		}
	} else if yyl3524 > 0 {
		var yyrr3524, yyrl3524 int
		var yyrt3524 bool
		if yyl3524 > cap(yyv3524) {

			yyrg3524 := len(yyv3524) > 0
			yyv23524 := yyv3524
			yyrl3524, yyrt3524 = z.DecInferLen(yyl3524, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt3524 {
				if yyrl3524 <= cap(yyv3524) {
					yyv3524 = yyv3524[:yyrl3524]
				} else {
					yyv3524 = make([]ContainerPort, yyrl3524)
				}
			} else {
				yyv3524 = make([]ContainerPort, yyrl3524)
			}
			yyc3524 = true
			yyrr3524 = len(yyv3524)
			if yyrg3524 {
				copy(yyv3524, yyv23524)
			}
		} else if yyl3524 != len(yyv3524) {
			yyv3524 = yyv3524[:yyl3524]
			yyc3524 = true
		}
		yyj3524 := 0
		for ; yyj3524 < yyrr3524; yyj3524++ {
			yyh3524.ElemContainerState(yyj3524)
			if r.TryDecodeAsNil() {
				yyv3524[yyj3524] = ContainerPort{}
			} else {
				yyv3525 := &yyv3524[yyj3524]
				yyv3525.CodecDecodeSelf(d)
			}

		}
		if yyrt3524 {
			for ; yyj3524 < yyl3524; yyj3524++ {
				yyv3524 = append(yyv3524, ContainerPort{})
				yyh3524.ElemContainerState(yyj3524)
				if r.TryDecodeAsNil() {
					yyv3524[yyj3524] = ContainerPort{}
				} else {
					yyv3526 := &yyv3524[yyj3524]
					yyv3526.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3524 := 0
		for ; !r.CheckBreak(); yyj3524++ {

			if yyj3524 >= len(yyv3524) {
				yyv3524 = append(yyv3524, ContainerPort{}) // var yyz3524 ContainerPort
				yyc3524 = true
			}
			yyh3524.ElemContainerState(yyj3524)
			if yyj3524 < len(yyv3524) {
				if r.TryDecodeAsNil() {
					yyv3524[yyj3524] = ContainerPort{}
				} else {
					yyv3527 := &yyv3524[yyj3524]
					yyv3527.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3524 < len(yyv3524) {
			yyv3524 = yyv3524[:yyj3524]
			yyc3524 = true
		} else if yyj3524 == 0 && yyv3524 == nil {
			yyv3524 = []ContainerPort{}
			yyc3524 = true
		}
	}
	yyh3524.End()
	if yyc3524 {
		*v = yyv3524
	}
}

func (x codecSelfer1234) encSliceEnvVar(v []EnvVar, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3528 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3529 := &yyv3528
		yy3529.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEnvVar(v *[]EnvVar, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3530 := *v
	yyh3530, yyl3530 := z.DecSliceHelperStart()
	var yyc3530 bool
	if yyl3530 == 0 {
		if yyv3530 == nil {
			yyv3530 = []EnvVar{}
			yyc3530 = true
		} else if len(yyv3530) != 0 {
			yyv3530 = yyv3530[:0]
			yyc3530 = true
		}
	} else if yyl3530 > 0 {
		var yyrr3530, yyrl3530 int
		var yyrt3530 bool
		if yyl3530 > cap(yyv3530) {

			yyrg3530 := len(yyv3530) > 0
			yyv23530 := yyv3530
			yyrl3530, yyrt3530 = z.DecInferLen(yyl3530, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt3530 {
				if yyrl3530 <= cap(yyv3530) {
					yyv3530 = yyv3530[:yyrl3530]
				} else {
					yyv3530 = make([]EnvVar, yyrl3530)
				}
			} else {
				yyv3530 = make([]EnvVar, yyrl3530)
			}
			yyc3530 = true
			yyrr3530 = len(yyv3530)
			if yyrg3530 {
				copy(yyv3530, yyv23530)
			}
		} else if yyl3530 != len(yyv3530) {
			yyv3530 = yyv3530[:yyl3530]
			yyc3530 = true
		}
		yyj3530 := 0
		for ; yyj3530 < yyrr3530; yyj3530++ {
			yyh3530.ElemContainerState(yyj3530)
			if r.TryDecodeAsNil() {
				yyv3530[yyj3530] = EnvVar{}
			} else {
				yyv3531 := &yyv3530[yyj3530]
				yyv3531.CodecDecodeSelf(d)
			}

		}
		if yyrt3530 {
			for ; yyj3530 < yyl3530; yyj3530++ {
				yyv3530 = append(yyv3530, EnvVar{})
				yyh3530.ElemContainerState(yyj3530)
				if r.TryDecodeAsNil() {
					yyv3530[yyj3530] = EnvVar{}
				} else {
					yyv3532 := &yyv3530[yyj3530]
					yyv3532.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3530 := 0
		for ; !r.CheckBreak(); yyj3530++ {

			if yyj3530 >= len(yyv3530) {
				yyv3530 = append(yyv3530, EnvVar{}) // var yyz3530 EnvVar
				yyc3530 = true
			}
			yyh3530.ElemContainerState(yyj3530)
			if yyj3530 < len(yyv3530) {
				if r.TryDecodeAsNil() {
					yyv3530[yyj3530] = EnvVar{}
				} else {
					yyv3533 := &yyv3530[yyj3530]
					yyv3533.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3530 < len(yyv3530) {
			yyv3530 = yyv3530[:yyj3530]
			yyc3530 = true
		} else if yyj3530 == 0 && yyv3530 == nil {
			yyv3530 = []EnvVar{}
			yyc3530 = true
		}
	}
	yyh3530.End()
	if yyc3530 {
		*v = yyv3530
	}
}

func (x codecSelfer1234) encSliceVolumeMount(v []VolumeMount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3534 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3535 := &yyv3534
		yy3535.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolumeMount(v *[]VolumeMount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3536 := *v
	yyh3536, yyl3536 := z.DecSliceHelperStart()
	var yyc3536 bool
	if yyl3536 == 0 {
		if yyv3536 == nil {
			yyv3536 = []VolumeMount{}
			yyc3536 = true
		} else if len(yyv3536) != 0 {
			yyv3536 = yyv3536[:0]
			yyc3536 = true
		}
	} else if yyl3536 > 0 {
		var yyrr3536, yyrl3536 int
		var yyrt3536 bool
		if yyl3536 > cap(yyv3536) {

			yyrg3536 := len(yyv3536) > 0
			yyv23536 := yyv3536
			yyrl3536, yyrt3536 = z.DecInferLen(yyl3536, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt3536 {
				if yyrl3536 <= cap(yyv3536) {
					yyv3536 = yyv3536[:yyrl3536]
				} else {
					yyv3536 = make([]VolumeMount, yyrl3536)
				}
			} else {
				yyv3536 = make([]VolumeMount, yyrl3536)
			}
			yyc3536 = true
			yyrr3536 = len(yyv3536)
			if yyrg3536 {
				copy(yyv3536, yyv23536)
			}
		} else if yyl3536 != len(yyv3536) {
			yyv3536 = yyv3536[:yyl3536]
			yyc3536 = true
		}
		yyj3536 := 0
		for ; yyj3536 < yyrr3536; yyj3536++ {
			yyh3536.ElemContainerState(yyj3536)
			if r.TryDecodeAsNil() {
				yyv3536[yyj3536] = VolumeMount{}
			} else {
				yyv3537 := &yyv3536[yyj3536]
				yyv3537.CodecDecodeSelf(d)
			}

		}
		if yyrt3536 {
			for ; yyj3536 < yyl3536; yyj3536++ {
				yyv3536 = append(yyv3536, VolumeMount{})
				yyh3536.ElemContainerState(yyj3536)
				if r.TryDecodeAsNil() {
					yyv3536[yyj3536] = VolumeMount{}
				} else {
					yyv3538 := &yyv3536[yyj3536]
					yyv3538.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3536 := 0
		for ; !r.CheckBreak(); yyj3536++ {

			if yyj3536 >= len(yyv3536) {
				yyv3536 = append(yyv3536, VolumeMount{}) // var yyz3536 VolumeMount
				yyc3536 = true
			}
			yyh3536.ElemContainerState(yyj3536)
			if yyj3536 < len(yyv3536) {
				if r.TryDecodeAsNil() {
					yyv3536[yyj3536] = VolumeMount{}
				} else {
					yyv3539 := &yyv3536[yyj3536]
					yyv3539.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3536 < len(yyv3536) {
			yyv3536 = yyv3536[:yyj3536]
			yyc3536 = true
		} else if yyj3536 == 0 && yyv3536 == nil {
			yyv3536 = []VolumeMount{}
			yyc3536 = true
		}
	}
	yyh3536.End()
	if yyc3536 {
		*v = yyv3536
	}
}

func (x codecSelfer1234) encSliceVolume(v []Volume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3540 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3541 := &yyv3540
		yy3541.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolume(v *[]Volume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3542 := *v
	yyh3542, yyl3542 := z.DecSliceHelperStart()
	var yyc3542 bool
	if yyl3542 == 0 {
		if yyv3542 == nil {
			yyv3542 = []Volume{}
			yyc3542 = true
		} else if len(yyv3542) != 0 {
			yyv3542 = yyv3542[:0]
			yyc3542 = true
		}
	} else if yyl3542 > 0 {
		var yyrr3542, yyrl3542 int
		var yyrt3542 bool
		if yyl3542 > cap(yyv3542) {

			yyrg3542 := len(yyv3542) > 0
			yyv23542 := yyv3542
			yyrl3542, yyrt3542 = z.DecInferLen(yyl3542, z.DecBasicHandle().MaxInitLen, 144)
			if yyrt3542 {
				if yyrl3542 <= cap(yyv3542) {
					yyv3542 = yyv3542[:yyrl3542]
				} else {
					yyv3542 = make([]Volume, yyrl3542)
				}
			} else {
				yyv3542 = make([]Volume, yyrl3542)
			}
			yyc3542 = true
			yyrr3542 = len(yyv3542)
			if yyrg3542 {
				copy(yyv3542, yyv23542)
			}
		} else if yyl3542 != len(yyv3542) {
			yyv3542 = yyv3542[:yyl3542]
			yyc3542 = true
		}
		yyj3542 := 0
		for ; yyj3542 < yyrr3542; yyj3542++ {
			yyh3542.ElemContainerState(yyj3542)
			if r.TryDecodeAsNil() {
				yyv3542[yyj3542] = Volume{}
			} else {
				yyv3543 := &yyv3542[yyj3542]
				yyv3543.CodecDecodeSelf(d)
			}

		}
		if yyrt3542 {
			for ; yyj3542 < yyl3542; yyj3542++ {
				yyv3542 = append(yyv3542, Volume{})
				yyh3542.ElemContainerState(yyj3542)
				if r.TryDecodeAsNil() {
					yyv3542[yyj3542] = Volume{}
				} else {
					yyv3544 := &yyv3542[yyj3542]
					yyv3544.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3542 := 0
		for ; !r.CheckBreak(); yyj3542++ {

			if yyj3542 >= len(yyv3542) {
				yyv3542 = append(yyv3542, Volume{}) // var yyz3542 Volume
				yyc3542 = true
			}
			yyh3542.ElemContainerState(yyj3542)
			if yyj3542 < len(yyv3542) {
				if r.TryDecodeAsNil() {
					yyv3542[yyj3542] = Volume{}
				} else {
					yyv3545 := &yyv3542[yyj3542]
					yyv3545.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3542 < len(yyv3542) {
			yyv3542 = yyv3542[:yyj3542]
			yyc3542 = true
		} else if yyj3542 == 0 && yyv3542 == nil {
			yyv3542 = []Volume{}
			yyc3542 = true
		}
	}
	yyh3542.End()
	if yyc3542 {
		*v = yyv3542
	}
}

func (x codecSelfer1234) encSliceContainer(v []Container, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3546 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3547 := &yyv3546
		yy3547.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainer(v *[]Container, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3548 := *v
	yyh3548, yyl3548 := z.DecSliceHelperStart()
	var yyc3548 bool
	if yyl3548 == 0 {
		if yyv3548 == nil {
			yyv3548 = []Container{}
			yyc3548 = true
		} else if len(yyv3548) != 0 {
			yyv3548 = yyv3548[:0]
			yyc3548 = true
		}
	} else if yyl3548 > 0 {
		var yyrr3548, yyrl3548 int
		var yyrt3548 bool
		if yyl3548 > cap(yyv3548) {

			yyrg3548 := len(yyv3548) > 0
			yyv23548 := yyv3548
			yyrl3548, yyrt3548 = z.DecInferLen(yyl3548, z.DecBasicHandle().MaxInitLen, 256)
			if yyrt3548 {
				if yyrl3548 <= cap(yyv3548) {
					yyv3548 = yyv3548[:yyrl3548]
				} else {
					yyv3548 = make([]Container, yyrl3548)
				}
			} else {
				yyv3548 = make([]Container, yyrl3548)
			}
			yyc3548 = true
			yyrr3548 = len(yyv3548)
			if yyrg3548 {
				copy(yyv3548, yyv23548)
			}
		} else if yyl3548 != len(yyv3548) {
			yyv3548 = yyv3548[:yyl3548]
			yyc3548 = true
		}
		yyj3548 := 0
		for ; yyj3548 < yyrr3548; yyj3548++ {
			yyh3548.ElemContainerState(yyj3548)
			if r.TryDecodeAsNil() {
				yyv3548[yyj3548] = Container{}
			} else {
				yyv3549 := &yyv3548[yyj3548]
				yyv3549.CodecDecodeSelf(d)
			}

		}
		if yyrt3548 {
			for ; yyj3548 < yyl3548; yyj3548++ {
				yyv3548 = append(yyv3548, Container{})
				yyh3548.ElemContainerState(yyj3548)
				if r.TryDecodeAsNil() {
					yyv3548[yyj3548] = Container{}
				} else {
					yyv3550 := &yyv3548[yyj3548]
					yyv3550.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3548 := 0
		for ; !r.CheckBreak(); yyj3548++ {

			if yyj3548 >= len(yyv3548) {
				yyv3548 = append(yyv3548, Container{}) // var yyz3548 Container
				yyc3548 = true
			}
			yyh3548.ElemContainerState(yyj3548)
			if yyj3548 < len(yyv3548) {
				if r.TryDecodeAsNil() {
					yyv3548[yyj3548] = Container{}
				} else {
					yyv3551 := &yyv3548[yyj3548]
					yyv3551.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3548 < len(yyv3548) {
			yyv3548 = yyv3548[:yyj3548]
			yyc3548 = true
		} else if yyj3548 == 0 && yyv3548 == nil {
			yyv3548 = []Container{}
			yyc3548 = true
		}
	}
	yyh3548.End()
	if yyc3548 {
		*v = yyv3548
	}
}

func (x codecSelfer1234) encSliceLocalObjectReference(v []LocalObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3552 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3553 := &yyv3552
		yy3553.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLocalObjectReference(v *[]LocalObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3554 := *v
	yyh3554, yyl3554 := z.DecSliceHelperStart()
	var yyc3554 bool
	if yyl3554 == 0 {
		if yyv3554 == nil {
			yyv3554 = []LocalObjectReference{}
			yyc3554 = true
		} else if len(yyv3554) != 0 {
			yyv3554 = yyv3554[:0]
			yyc3554 = true
		}
	} else if yyl3554 > 0 {
		var yyrr3554, yyrl3554 int
		var yyrt3554 bool
		if yyl3554 > cap(yyv3554) {

			yyrg3554 := len(yyv3554) > 0
			yyv23554 := yyv3554
			yyrl3554, yyrt3554 = z.DecInferLen(yyl3554, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt3554 {
				if yyrl3554 <= cap(yyv3554) {
					yyv3554 = yyv3554[:yyrl3554]
				} else {
					yyv3554 = make([]LocalObjectReference, yyrl3554)
				}
			} else {
				yyv3554 = make([]LocalObjectReference, yyrl3554)
			}
			yyc3554 = true
			yyrr3554 = len(yyv3554)
			if yyrg3554 {
				copy(yyv3554, yyv23554)
			}
		} else if yyl3554 != len(yyv3554) {
			yyv3554 = yyv3554[:yyl3554]
			yyc3554 = true
		}
		yyj3554 := 0
		for ; yyj3554 < yyrr3554; yyj3554++ {
			yyh3554.ElemContainerState(yyj3554)
			if r.TryDecodeAsNil() {
				yyv3554[yyj3554] = LocalObjectReference{}
			} else {
				yyv3555 := &yyv3554[yyj3554]
				yyv3555.CodecDecodeSelf(d)
			}

		}
		if yyrt3554 {
			for ; yyj3554 < yyl3554; yyj3554++ {
				yyv3554 = append(yyv3554, LocalObjectReference{})
				yyh3554.ElemContainerState(yyj3554)
				if r.TryDecodeAsNil() {
					yyv3554[yyj3554] = LocalObjectReference{}
				} else {
					yyv3556 := &yyv3554[yyj3554]
					yyv3556.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3554 := 0
		for ; !r.CheckBreak(); yyj3554++ {

			if yyj3554 >= len(yyv3554) {
				yyv3554 = append(yyv3554, LocalObjectReference{}) // var yyz3554 LocalObjectReference
				yyc3554 = true
			}
			yyh3554.ElemContainerState(yyj3554)
			if yyj3554 < len(yyv3554) {
				if r.TryDecodeAsNil() {
					yyv3554[yyj3554] = LocalObjectReference{}
				} else {
					yyv3557 := &yyv3554[yyj3554]
					yyv3557.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3554 < len(yyv3554) {
			yyv3554 = yyv3554[:yyj3554]
			yyc3554 = true
		} else if yyj3554 == 0 && yyv3554 == nil {
			yyv3554 = []LocalObjectReference{}
			yyc3554 = true
		}
	}
	yyh3554.End()
	if yyc3554 {
		*v = yyv3554
	}
}

func (x codecSelfer1234) encSlicePodCondition(v []PodCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3558 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3559 := &yyv3558
		yy3559.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodCondition(v *[]PodCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3560 := *v
	yyh3560, yyl3560 := z.DecSliceHelperStart()
	var yyc3560 bool
	if yyl3560 == 0 {
		if yyv3560 == nil {
			yyv3560 = []PodCondition{}
			yyc3560 = true
		} else if len(yyv3560) != 0 {
			yyv3560 = yyv3560[:0]
			yyc3560 = true
		}
	} else if yyl3560 > 0 {
		var yyrr3560, yyrl3560 int
		var yyrt3560 bool
		if yyl3560 > cap(yyv3560) {

			yyrg3560 := len(yyv3560) > 0
			yyv23560 := yyv3560
			yyrl3560, yyrt3560 = z.DecInferLen(yyl3560, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt3560 {
				if yyrl3560 <= cap(yyv3560) {
					yyv3560 = yyv3560[:yyrl3560]
				} else {
					yyv3560 = make([]PodCondition, yyrl3560)
				}
			} else {
				yyv3560 = make([]PodCondition, yyrl3560)
			}
			yyc3560 = true
			yyrr3560 = len(yyv3560)
			if yyrg3560 {
				copy(yyv3560, yyv23560)
			}
		} else if yyl3560 != len(yyv3560) {
			yyv3560 = yyv3560[:yyl3560]
			yyc3560 = true
		}
		yyj3560 := 0
		for ; yyj3560 < yyrr3560; yyj3560++ {
			yyh3560.ElemContainerState(yyj3560)
			if r.TryDecodeAsNil() {
				yyv3560[yyj3560] = PodCondition{}
			} else {
				yyv3561 := &yyv3560[yyj3560]
				yyv3561.CodecDecodeSelf(d)
			}

		}
		if yyrt3560 {
			for ; yyj3560 < yyl3560; yyj3560++ {
				yyv3560 = append(yyv3560, PodCondition{})
				yyh3560.ElemContainerState(yyj3560)
				if r.TryDecodeAsNil() {
					yyv3560[yyj3560] = PodCondition{}
				} else {
					yyv3562 := &yyv3560[yyj3560]
					yyv3562.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3560 := 0
		for ; !r.CheckBreak(); yyj3560++ {

			if yyj3560 >= len(yyv3560) {
				yyv3560 = append(yyv3560, PodCondition{}) // var yyz3560 PodCondition
				yyc3560 = true
			}
			yyh3560.ElemContainerState(yyj3560)
			if yyj3560 < len(yyv3560) {
				if r.TryDecodeAsNil() {
					yyv3560[yyj3560] = PodCondition{}
				} else {
					yyv3563 := &yyv3560[yyj3560]
					yyv3563.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3560 < len(yyv3560) {
			yyv3560 = yyv3560[:yyj3560]
			yyc3560 = true
		} else if yyj3560 == 0 && yyv3560 == nil {
			yyv3560 = []PodCondition{}
			yyc3560 = true
		}
	}
	yyh3560.End()
	if yyc3560 {
		*v = yyv3560
	}
}

func (x codecSelfer1234) encSliceContainerStatus(v []ContainerStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3564 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3565 := &yyv3564
		yy3565.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerStatus(v *[]ContainerStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3566 := *v
	yyh3566, yyl3566 := z.DecSliceHelperStart()
	var yyc3566 bool
	if yyl3566 == 0 {
		if yyv3566 == nil {
			yyv3566 = []ContainerStatus{}
			yyc3566 = true
		} else if len(yyv3566) != 0 {
			yyv3566 = yyv3566[:0]
			yyc3566 = true
		}
	} else if yyl3566 > 0 {
		var yyrr3566, yyrl3566 int
		var yyrt3566 bool
		if yyl3566 > cap(yyv3566) {

			yyrg3566 := len(yyv3566) > 0
			yyv23566 := yyv3566
			yyrl3566, yyrt3566 = z.DecInferLen(yyl3566, z.DecBasicHandle().MaxInitLen, 120)
			if yyrt3566 {
				if yyrl3566 <= cap(yyv3566) {
					yyv3566 = yyv3566[:yyrl3566]
				} else {
					yyv3566 = make([]ContainerStatus, yyrl3566)
				}
			} else {
				yyv3566 = make([]ContainerStatus, yyrl3566)
			}
			yyc3566 = true
			yyrr3566 = len(yyv3566)
			if yyrg3566 {
				copy(yyv3566, yyv23566)
			}
		} else if yyl3566 != len(yyv3566) {
			yyv3566 = yyv3566[:yyl3566]
			yyc3566 = true
		}
		yyj3566 := 0
		for ; yyj3566 < yyrr3566; yyj3566++ {
			yyh3566.ElemContainerState(yyj3566)
			if r.TryDecodeAsNil() {
				yyv3566[yyj3566] = ContainerStatus{}
			} else {
				yyv3567 := &yyv3566[yyj3566]
				yyv3567.CodecDecodeSelf(d)
			}

		}
		if yyrt3566 {
			for ; yyj3566 < yyl3566; yyj3566++ {
				yyv3566 = append(yyv3566, ContainerStatus{})
				yyh3566.ElemContainerState(yyj3566)
				if r.TryDecodeAsNil() {
					yyv3566[yyj3566] = ContainerStatus{}
				} else {
					yyv3568 := &yyv3566[yyj3566]
					yyv3568.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3566 := 0
		for ; !r.CheckBreak(); yyj3566++ {

			if yyj3566 >= len(yyv3566) {
				yyv3566 = append(yyv3566, ContainerStatus{}) // var yyz3566 ContainerStatus
				yyc3566 = true
			}
			yyh3566.ElemContainerState(yyj3566)
			if yyj3566 < len(yyv3566) {
				if r.TryDecodeAsNil() {
					yyv3566[yyj3566] = ContainerStatus{}
				} else {
					yyv3569 := &yyv3566[yyj3566]
					yyv3569.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3566 < len(yyv3566) {
			yyv3566 = yyv3566[:yyj3566]
			yyc3566 = true
		} else if yyj3566 == 0 && yyv3566 == nil {
			yyv3566 = []ContainerStatus{}
			yyc3566 = true
		}
	}
	yyh3566.End()
	if yyc3566 {
		*v = yyv3566
	}
}

func (x codecSelfer1234) encSlicePod(v []Pod, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3570 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3571 := &yyv3570
		yy3571.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePod(v *[]Pod, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3572 := *v
	yyh3572, yyl3572 := z.DecSliceHelperStart()
	var yyc3572 bool
	if yyl3572 == 0 {
		if yyv3572 == nil {
			yyv3572 = []Pod{}
			yyc3572 = true
		} else if len(yyv3572) != 0 {
			yyv3572 = yyv3572[:0]
			yyc3572 = true
		}
	} else if yyl3572 > 0 {
		var yyrr3572, yyrl3572 int
		var yyrt3572 bool
		if yyl3572 > cap(yyv3572) {

			yyrg3572 := len(yyv3572) > 0
			yyv23572 := yyv3572
			yyrl3572, yyrt3572 = z.DecInferLen(yyl3572, z.DecBasicHandle().MaxInitLen, 520)
			if yyrt3572 {
				if yyrl3572 <= cap(yyv3572) {
					yyv3572 = yyv3572[:yyrl3572]
				} else {
					yyv3572 = make([]Pod, yyrl3572)
				}
			} else {
				yyv3572 = make([]Pod, yyrl3572)
			}
			yyc3572 = true
			yyrr3572 = len(yyv3572)
			if yyrg3572 {
				copy(yyv3572, yyv23572)
			}
		} else if yyl3572 != len(yyv3572) {
			yyv3572 = yyv3572[:yyl3572]
			yyc3572 = true
		}
		yyj3572 := 0
		for ; yyj3572 < yyrr3572; yyj3572++ {
			yyh3572.ElemContainerState(yyj3572)
			if r.TryDecodeAsNil() {
				yyv3572[yyj3572] = Pod{}
			} else {
				yyv3573 := &yyv3572[yyj3572]
				yyv3573.CodecDecodeSelf(d)
			}

		}
		if yyrt3572 {
			for ; yyj3572 < yyl3572; yyj3572++ {
				yyv3572 = append(yyv3572, Pod{})
				yyh3572.ElemContainerState(yyj3572)
				if r.TryDecodeAsNil() {
					yyv3572[yyj3572] = Pod{}
				} else {
					yyv3574 := &yyv3572[yyj3572]
					yyv3574.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3572 := 0
		for ; !r.CheckBreak(); yyj3572++ {

			if yyj3572 >= len(yyv3572) {
				yyv3572 = append(yyv3572, Pod{}) // var yyz3572 Pod
				yyc3572 = true
			}
			yyh3572.ElemContainerState(yyj3572)
			if yyj3572 < len(yyv3572) {
				if r.TryDecodeAsNil() {
					yyv3572[yyj3572] = Pod{}
				} else {
					yyv3575 := &yyv3572[yyj3572]
					yyv3575.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3572 < len(yyv3572) {
			yyv3572 = yyv3572[:yyj3572]
			yyc3572 = true
		} else if yyj3572 == 0 && yyv3572 == nil {
			yyv3572 = []Pod{}
			yyc3572 = true
		}
	}
	yyh3572.End()
	if yyc3572 {
		*v = yyv3572
	}
}

func (x codecSelfer1234) encSlicePodTemplate(v []PodTemplate, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3576 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3577 := &yyv3576
		yy3577.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodTemplate(v *[]PodTemplate, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3578 := *v
	yyh3578, yyl3578 := z.DecSliceHelperStart()
	var yyc3578 bool
	if yyl3578 == 0 {
		if yyv3578 == nil {
			yyv3578 = []PodTemplate{}
			yyc3578 = true
		} else if len(yyv3578) != 0 {
			yyv3578 = yyv3578[:0]
			yyc3578 = true
		}
	} else if yyl3578 > 0 {
		var yyrr3578, yyrl3578 int
		var yyrt3578 bool
		if yyl3578 > cap(yyv3578) {

			yyrg3578 := len(yyv3578) > 0
			yyv23578 := yyv3578
			yyrl3578, yyrt3578 = z.DecInferLen(yyl3578, z.DecBasicHandle().MaxInitLen, 544)
			if yyrt3578 {
				if yyrl3578 <= cap(yyv3578) {
					yyv3578 = yyv3578[:yyrl3578]
				} else {
					yyv3578 = make([]PodTemplate, yyrl3578)
				}
			} else {
				yyv3578 = make([]PodTemplate, yyrl3578)
			}
			yyc3578 = true
			yyrr3578 = len(yyv3578)
			if yyrg3578 {
				copy(yyv3578, yyv23578)
			}
		} else if yyl3578 != len(yyv3578) {
			yyv3578 = yyv3578[:yyl3578]
			yyc3578 = true
		}
		yyj3578 := 0
		for ; yyj3578 < yyrr3578; yyj3578++ {
			yyh3578.ElemContainerState(yyj3578)
			if r.TryDecodeAsNil() {
				yyv3578[yyj3578] = PodTemplate{}
			} else {
				yyv3579 := &yyv3578[yyj3578]
				yyv3579.CodecDecodeSelf(d)
			}

		}
		if yyrt3578 {
			for ; yyj3578 < yyl3578; yyj3578++ {
				yyv3578 = append(yyv3578, PodTemplate{})
				yyh3578.ElemContainerState(yyj3578)
				if r.TryDecodeAsNil() {
					yyv3578[yyj3578] = PodTemplate{}
				} else {
					yyv3580 := &yyv3578[yyj3578]
					yyv3580.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3578 := 0
		for ; !r.CheckBreak(); yyj3578++ {

			if yyj3578 >= len(yyv3578) {
				yyv3578 = append(yyv3578, PodTemplate{}) // var yyz3578 PodTemplate
				yyc3578 = true
			}
			yyh3578.ElemContainerState(yyj3578)
			if yyj3578 < len(yyv3578) {
				if r.TryDecodeAsNil() {
					yyv3578[yyj3578] = PodTemplate{}
				} else {
					yyv3581 := &yyv3578[yyj3578]
					yyv3581.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3578 < len(yyv3578) {
			yyv3578 = yyv3578[:yyj3578]
			yyc3578 = true
		} else if yyj3578 == 0 && yyv3578 == nil {
			yyv3578 = []PodTemplate{}
			yyc3578 = true
		}
	}
	yyh3578.End()
	if yyc3578 {
		*v = yyv3578
	}
}

func (x codecSelfer1234) encSliceReplicationController(v []ReplicationController, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3582 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3583 := &yyv3582
		yy3583.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicationController(v *[]ReplicationController, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3584 := *v
	yyh3584, yyl3584 := z.DecSliceHelperStart()
	var yyc3584 bool
	if yyl3584 == 0 {
		if yyv3584 == nil {
			yyv3584 = []ReplicationController{}
			yyc3584 = true
		} else if len(yyv3584) != 0 {
			yyv3584 = yyv3584[:0]
			yyc3584 = true
		}
	} else if yyl3584 > 0 {
		var yyrr3584, yyrl3584 int
		var yyrt3584 bool
		if yyl3584 > cap(yyv3584) {

			yyrg3584 := len(yyv3584) > 0
			yyv23584 := yyv3584
			yyrl3584, yyrt3584 = z.DecInferLen(yyl3584, z.DecBasicHandle().MaxInitLen, 232)
			if yyrt3584 {
				if yyrl3584 <= cap(yyv3584) {
					yyv3584 = yyv3584[:yyrl3584]
				} else {
					yyv3584 = make([]ReplicationController, yyrl3584)
				}
			} else {
				yyv3584 = make([]ReplicationController, yyrl3584)
			}
			yyc3584 = true
			yyrr3584 = len(yyv3584)
			if yyrg3584 {
				copy(yyv3584, yyv23584)
			}
		} else if yyl3584 != len(yyv3584) {
			yyv3584 = yyv3584[:yyl3584]
			yyc3584 = true
		}
		yyj3584 := 0
		for ; yyj3584 < yyrr3584; yyj3584++ {
			yyh3584.ElemContainerState(yyj3584)
			if r.TryDecodeAsNil() {
				yyv3584[yyj3584] = ReplicationController{}
			} else {
				yyv3585 := &yyv3584[yyj3584]
				yyv3585.CodecDecodeSelf(d)
			}

		}
		if yyrt3584 {
			for ; yyj3584 < yyl3584; yyj3584++ {
				yyv3584 = append(yyv3584, ReplicationController{})
				yyh3584.ElemContainerState(yyj3584)
				if r.TryDecodeAsNil() {
					yyv3584[yyj3584] = ReplicationController{}
				} else {
					yyv3586 := &yyv3584[yyj3584]
					yyv3586.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3584 := 0
		for ; !r.CheckBreak(); yyj3584++ {

			if yyj3584 >= len(yyv3584) {
				yyv3584 = append(yyv3584, ReplicationController{}) // var yyz3584 ReplicationController
				yyc3584 = true
			}
			yyh3584.ElemContainerState(yyj3584)
			if yyj3584 < len(yyv3584) {
				if r.TryDecodeAsNil() {
					yyv3584[yyj3584] = ReplicationController{}
				} else {
					yyv3587 := &yyv3584[yyj3584]
					yyv3587.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3584 < len(yyv3584) {
			yyv3584 = yyv3584[:yyj3584]
			yyc3584 = true
		} else if yyj3584 == 0 && yyv3584 == nil {
			yyv3584 = []ReplicationController{}
			yyc3584 = true
		}
	}
	yyh3584.End()
	if yyc3584 {
		*v = yyv3584
	}
}

func (x codecSelfer1234) encSliceLoadBalancerIngress(v []LoadBalancerIngress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3588 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3589 := &yyv3588
		yy3589.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLoadBalancerIngress(v *[]LoadBalancerIngress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3590 := *v
	yyh3590, yyl3590 := z.DecSliceHelperStart()
	var yyc3590 bool
	if yyl3590 == 0 {
		if yyv3590 == nil {
			yyv3590 = []LoadBalancerIngress{}
			yyc3590 = true
		} else if len(yyv3590) != 0 {
			yyv3590 = yyv3590[:0]
			yyc3590 = true
		}
	} else if yyl3590 > 0 {
		var yyrr3590, yyrl3590 int
		var yyrt3590 bool
		if yyl3590 > cap(yyv3590) {

			yyrg3590 := len(yyv3590) > 0
			yyv23590 := yyv3590
			yyrl3590, yyrt3590 = z.DecInferLen(yyl3590, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt3590 {
				if yyrl3590 <= cap(yyv3590) {
					yyv3590 = yyv3590[:yyrl3590]
				} else {
					yyv3590 = make([]LoadBalancerIngress, yyrl3590)
				}
			} else {
				yyv3590 = make([]LoadBalancerIngress, yyrl3590)
			}
			yyc3590 = true
			yyrr3590 = len(yyv3590)
			if yyrg3590 {
				copy(yyv3590, yyv23590)
			}
		} else if yyl3590 != len(yyv3590) {
			yyv3590 = yyv3590[:yyl3590]
			yyc3590 = true
		}
		yyj3590 := 0
		for ; yyj3590 < yyrr3590; yyj3590++ {
			yyh3590.ElemContainerState(yyj3590)
			if r.TryDecodeAsNil() {
				yyv3590[yyj3590] = LoadBalancerIngress{}
			} else {
				yyv3591 := &yyv3590[yyj3590]
				yyv3591.CodecDecodeSelf(d)
			}

		}
		if yyrt3590 {
			for ; yyj3590 < yyl3590; yyj3590++ {
				yyv3590 = append(yyv3590, LoadBalancerIngress{})
				yyh3590.ElemContainerState(yyj3590)
				if r.TryDecodeAsNil() {
					yyv3590[yyj3590] = LoadBalancerIngress{}
				} else {
					yyv3592 := &yyv3590[yyj3590]
					yyv3592.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3590 := 0
		for ; !r.CheckBreak(); yyj3590++ {

			if yyj3590 >= len(yyv3590) {
				yyv3590 = append(yyv3590, LoadBalancerIngress{}) // var yyz3590 LoadBalancerIngress
				yyc3590 = true
			}
			yyh3590.ElemContainerState(yyj3590)
			if yyj3590 < len(yyv3590) {
				if r.TryDecodeAsNil() {
					yyv3590[yyj3590] = LoadBalancerIngress{}
				} else {
					yyv3593 := &yyv3590[yyj3590]
					yyv3593.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3590 < len(yyv3590) {
			yyv3590 = yyv3590[:yyj3590]
			yyc3590 = true
		} else if yyj3590 == 0 && yyv3590 == nil {
			yyv3590 = []LoadBalancerIngress{}
			yyc3590 = true
		}
	}
	yyh3590.End()
	if yyc3590 {
		*v = yyv3590
	}
}

func (x codecSelfer1234) encSliceServicePort(v []ServicePort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3594 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3595 := &yyv3594
		yy3595.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServicePort(v *[]ServicePort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3596 := *v
	yyh3596, yyl3596 := z.DecSliceHelperStart()
	var yyc3596 bool
	if yyl3596 == 0 {
		if yyv3596 == nil {
			yyv3596 = []ServicePort{}
			yyc3596 = true
		} else if len(yyv3596) != 0 {
			yyv3596 = yyv3596[:0]
			yyc3596 = true
		}
	} else if yyl3596 > 0 {
		var yyrr3596, yyrl3596 int
		var yyrt3596 bool
		if yyl3596 > cap(yyv3596) {

			yyrg3596 := len(yyv3596) > 0
			yyv23596 := yyv3596
			yyrl3596, yyrt3596 = z.DecInferLen(yyl3596, z.DecBasicHandle().MaxInitLen, 80)
			if yyrt3596 {
				if yyrl3596 <= cap(yyv3596) {
					yyv3596 = yyv3596[:yyrl3596]
				} else {
					yyv3596 = make([]ServicePort, yyrl3596)
				}
			} else {
				yyv3596 = make([]ServicePort, yyrl3596)
			}
			yyc3596 = true
			yyrr3596 = len(yyv3596)
			if yyrg3596 {
				copy(yyv3596, yyv23596)
			}
		} else if yyl3596 != len(yyv3596) {
			yyv3596 = yyv3596[:yyl3596]
			yyc3596 = true
		}
		yyj3596 := 0
		for ; yyj3596 < yyrr3596; yyj3596++ {
			yyh3596.ElemContainerState(yyj3596)
			if r.TryDecodeAsNil() {
				yyv3596[yyj3596] = ServicePort{}
			} else {
				yyv3597 := &yyv3596[yyj3596]
				yyv3597.CodecDecodeSelf(d)
			}

		}
		if yyrt3596 {
			for ; yyj3596 < yyl3596; yyj3596++ {
				yyv3596 = append(yyv3596, ServicePort{})
				yyh3596.ElemContainerState(yyj3596)
				if r.TryDecodeAsNil() {
					yyv3596[yyj3596] = ServicePort{}
				} else {
					yyv3598 := &yyv3596[yyj3596]
					yyv3598.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3596 := 0
		for ; !r.CheckBreak(); yyj3596++ {

			if yyj3596 >= len(yyv3596) {
				yyv3596 = append(yyv3596, ServicePort{}) // var yyz3596 ServicePort
				yyc3596 = true
			}
			yyh3596.ElemContainerState(yyj3596)
			if yyj3596 < len(yyv3596) {
				if r.TryDecodeAsNil() {
					yyv3596[yyj3596] = ServicePort{}
				} else {
					yyv3599 := &yyv3596[yyj3596]
					yyv3599.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3596 < len(yyv3596) {
			yyv3596 = yyv3596[:yyj3596]
			yyc3596 = true
		} else if yyj3596 == 0 && yyv3596 == nil {
			yyv3596 = []ServicePort{}
			yyc3596 = true
		}
	}
	yyh3596.End()
	if yyc3596 {
		*v = yyv3596
	}
}

func (x codecSelfer1234) encSliceService(v []Service, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3600 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3601 := &yyv3600
		yy3601.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceService(v *[]Service, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3602 := *v
	yyh3602, yyl3602 := z.DecSliceHelperStart()
	var yyc3602 bool
	if yyl3602 == 0 {
		if yyv3602 == nil {
			yyv3602 = []Service{}
			yyc3602 = true
		} else if len(yyv3602) != 0 {
			yyv3602 = yyv3602[:0]
			yyc3602 = true
		}
	} else if yyl3602 > 0 {
		var yyrr3602, yyrl3602 int
		var yyrt3602 bool
		if yyl3602 > cap(yyv3602) {

			yyrg3602 := len(yyv3602) > 0
			yyv23602 := yyv3602
			yyrl3602, yyrt3602 = z.DecInferLen(yyl3602, z.DecBasicHandle().MaxInitLen, 360)
			if yyrt3602 {
				if yyrl3602 <= cap(yyv3602) {
					yyv3602 = yyv3602[:yyrl3602]
				} else {
					yyv3602 = make([]Service, yyrl3602)
				}
			} else {
				yyv3602 = make([]Service, yyrl3602)
			}
			yyc3602 = true
			yyrr3602 = len(yyv3602)
			if yyrg3602 {
				copy(yyv3602, yyv23602)
			}
		} else if yyl3602 != len(yyv3602) {
			yyv3602 = yyv3602[:yyl3602]
			yyc3602 = true
		}
		yyj3602 := 0
		for ; yyj3602 < yyrr3602; yyj3602++ {
			yyh3602.ElemContainerState(yyj3602)
			if r.TryDecodeAsNil() {
				yyv3602[yyj3602] = Service{}
			} else {
				yyv3603 := &yyv3602[yyj3602]
				yyv3603.CodecDecodeSelf(d)
			}

		}
		if yyrt3602 {
			for ; yyj3602 < yyl3602; yyj3602++ {
				yyv3602 = append(yyv3602, Service{})
				yyh3602.ElemContainerState(yyj3602)
				if r.TryDecodeAsNil() {
					yyv3602[yyj3602] = Service{}
				} else {
					yyv3604 := &yyv3602[yyj3602]
					yyv3604.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3602 := 0
		for ; !r.CheckBreak(); yyj3602++ {

			if yyj3602 >= len(yyv3602) {
				yyv3602 = append(yyv3602, Service{}) // var yyz3602 Service
				yyc3602 = true
			}
			yyh3602.ElemContainerState(yyj3602)
			if yyj3602 < len(yyv3602) {
				if r.TryDecodeAsNil() {
					yyv3602[yyj3602] = Service{}
				} else {
					yyv3605 := &yyv3602[yyj3602]
					yyv3605.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3602 < len(yyv3602) {
			yyv3602 = yyv3602[:yyj3602]
			yyc3602 = true
		} else if yyj3602 == 0 && yyv3602 == nil {
			yyv3602 = []Service{}
			yyc3602 = true
		}
	}
	yyh3602.End()
	if yyc3602 {
		*v = yyv3602
	}
}

func (x codecSelfer1234) encSliceObjectReference(v []ObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3606 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3607 := &yyv3606
		yy3607.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceObjectReference(v *[]ObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3608 := *v
	yyh3608, yyl3608 := z.DecSliceHelperStart()
	var yyc3608 bool
	if yyl3608 == 0 {
		if yyv3608 == nil {
			yyv3608 = []ObjectReference{}
			yyc3608 = true
		} else if len(yyv3608) != 0 {
			yyv3608 = yyv3608[:0]
			yyc3608 = true
		}
	} else if yyl3608 > 0 {
		var yyrr3608, yyrl3608 int
		var yyrt3608 bool
		if yyl3608 > cap(yyv3608) {

			yyrg3608 := len(yyv3608) > 0
			yyv23608 := yyv3608
			yyrl3608, yyrt3608 = z.DecInferLen(yyl3608, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt3608 {
				if yyrl3608 <= cap(yyv3608) {
					yyv3608 = yyv3608[:yyrl3608]
				} else {
					yyv3608 = make([]ObjectReference, yyrl3608)
				}
			} else {
				yyv3608 = make([]ObjectReference, yyrl3608)
			}
			yyc3608 = true
			yyrr3608 = len(yyv3608)
			if yyrg3608 {
				copy(yyv3608, yyv23608)
			}
		} else if yyl3608 != len(yyv3608) {
			yyv3608 = yyv3608[:yyl3608]
			yyc3608 = true
		}
		yyj3608 := 0
		for ; yyj3608 < yyrr3608; yyj3608++ {
			yyh3608.ElemContainerState(yyj3608)
			if r.TryDecodeAsNil() {
				yyv3608[yyj3608] = ObjectReference{}
			} else {
				yyv3609 := &yyv3608[yyj3608]
				yyv3609.CodecDecodeSelf(d)
			}

		}
		if yyrt3608 {
			for ; yyj3608 < yyl3608; yyj3608++ {
				yyv3608 = append(yyv3608, ObjectReference{})
				yyh3608.ElemContainerState(yyj3608)
				if r.TryDecodeAsNil() {
					yyv3608[yyj3608] = ObjectReference{}
				} else {
					yyv3610 := &yyv3608[yyj3608]
					yyv3610.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3608 := 0
		for ; !r.CheckBreak(); yyj3608++ {

			if yyj3608 >= len(yyv3608) {
				yyv3608 = append(yyv3608, ObjectReference{}) // var yyz3608 ObjectReference
				yyc3608 = true
			}
			yyh3608.ElemContainerState(yyj3608)
			if yyj3608 < len(yyv3608) {
				if r.TryDecodeAsNil() {
					yyv3608[yyj3608] = ObjectReference{}
				} else {
					yyv3611 := &yyv3608[yyj3608]
					yyv3611.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3608 < len(yyv3608) {
			yyv3608 = yyv3608[:yyj3608]
			yyc3608 = true
		} else if yyj3608 == 0 && yyv3608 == nil {
			yyv3608 = []ObjectReference{}
			yyc3608 = true
		}
	}
	yyh3608.End()
	if yyc3608 {
		*v = yyv3608
	}
}

func (x codecSelfer1234) encSliceServiceAccount(v []ServiceAccount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3612 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3613 := &yyv3612
		yy3613.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServiceAccount(v *[]ServiceAccount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3614 := *v
	yyh3614, yyl3614 := z.DecSliceHelperStart()
	var yyc3614 bool
	if yyl3614 == 0 {
		if yyv3614 == nil {
			yyv3614 = []ServiceAccount{}
			yyc3614 = true
		} else if len(yyv3614) != 0 {
			yyv3614 = yyv3614[:0]
			yyc3614 = true
		}
	} else if yyl3614 > 0 {
		var yyrr3614, yyrl3614 int
		var yyrt3614 bool
		if yyl3614 > cap(yyv3614) {

			yyrg3614 := len(yyv3614) > 0
			yyv23614 := yyv3614
			yyrl3614, yyrt3614 = z.DecInferLen(yyl3614, z.DecBasicHandle().MaxInitLen, 240)
			if yyrt3614 {
				if yyrl3614 <= cap(yyv3614) {
					yyv3614 = yyv3614[:yyrl3614]
				} else {
					yyv3614 = make([]ServiceAccount, yyrl3614)
				}
			} else {
				yyv3614 = make([]ServiceAccount, yyrl3614)
			}
			yyc3614 = true
			yyrr3614 = len(yyv3614)
			if yyrg3614 {
				copy(yyv3614, yyv23614)
			}
		} else if yyl3614 != len(yyv3614) {
			yyv3614 = yyv3614[:yyl3614]
			yyc3614 = true
		}
		yyj3614 := 0
		for ; yyj3614 < yyrr3614; yyj3614++ {
			yyh3614.ElemContainerState(yyj3614)
			if r.TryDecodeAsNil() {
				yyv3614[yyj3614] = ServiceAccount{}
			} else {
				yyv3615 := &yyv3614[yyj3614]
				yyv3615.CodecDecodeSelf(d)
			}

		}
		if yyrt3614 {
			for ; yyj3614 < yyl3614; yyj3614++ {
				yyv3614 = append(yyv3614, ServiceAccount{})
				yyh3614.ElemContainerState(yyj3614)
				if r.TryDecodeAsNil() {
					yyv3614[yyj3614] = ServiceAccount{}
				} else {
					yyv3616 := &yyv3614[yyj3614]
					yyv3616.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3614 := 0
		for ; !r.CheckBreak(); yyj3614++ {

			if yyj3614 >= len(yyv3614) {
				yyv3614 = append(yyv3614, ServiceAccount{}) // var yyz3614 ServiceAccount
				yyc3614 = true
			}
			yyh3614.ElemContainerState(yyj3614)
			if yyj3614 < len(yyv3614) {
				if r.TryDecodeAsNil() {
					yyv3614[yyj3614] = ServiceAccount{}
				} else {
					yyv3617 := &yyv3614[yyj3614]
					yyv3617.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3614 < len(yyv3614) {
			yyv3614 = yyv3614[:yyj3614]
			yyc3614 = true
		} else if yyj3614 == 0 && yyv3614 == nil {
			yyv3614 = []ServiceAccount{}
			yyc3614 = true
		}
	}
	yyh3614.End()
	if yyc3614 {
		*v = yyv3614
	}
}

func (x codecSelfer1234) encSliceEndpointSubset(v []EndpointSubset, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3618 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3619 := &yyv3618
		yy3619.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointSubset(v *[]EndpointSubset, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3620 := *v
	yyh3620, yyl3620 := z.DecSliceHelperStart()
	var yyc3620 bool
	if yyl3620 == 0 {
		if yyv3620 == nil {
			yyv3620 = []EndpointSubset{}
			yyc3620 = true
		} else if len(yyv3620) != 0 {
			yyv3620 = yyv3620[:0]
			yyc3620 = true
		}
	} else if yyl3620 > 0 {
		var yyrr3620, yyrl3620 int
		var yyrt3620 bool
		if yyl3620 > cap(yyv3620) {

			yyrg3620 := len(yyv3620) > 0
			yyv23620 := yyv3620
			yyrl3620, yyrt3620 = z.DecInferLen(yyl3620, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt3620 {
				if yyrl3620 <= cap(yyv3620) {
					yyv3620 = yyv3620[:yyrl3620]
				} else {
					yyv3620 = make([]EndpointSubset, yyrl3620)
				}
			} else {
				yyv3620 = make([]EndpointSubset, yyrl3620)
			}
			yyc3620 = true
			yyrr3620 = len(yyv3620)
			if yyrg3620 {
				copy(yyv3620, yyv23620)
			}
		} else if yyl3620 != len(yyv3620) {
			yyv3620 = yyv3620[:yyl3620]
			yyc3620 = true
		}
		yyj3620 := 0
		for ; yyj3620 < yyrr3620; yyj3620++ {
			yyh3620.ElemContainerState(yyj3620)
			if r.TryDecodeAsNil() {
				yyv3620[yyj3620] = EndpointSubset{}
			} else {
				yyv3621 := &yyv3620[yyj3620]
				yyv3621.CodecDecodeSelf(d)
			}

		}
		if yyrt3620 {
			for ; yyj3620 < yyl3620; yyj3620++ {
				yyv3620 = append(yyv3620, EndpointSubset{})
				yyh3620.ElemContainerState(yyj3620)
				if r.TryDecodeAsNil() {
					yyv3620[yyj3620] = EndpointSubset{}
				} else {
					yyv3622 := &yyv3620[yyj3620]
					yyv3622.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3620 := 0
		for ; !r.CheckBreak(); yyj3620++ {

			if yyj3620 >= len(yyv3620) {
				yyv3620 = append(yyv3620, EndpointSubset{}) // var yyz3620 EndpointSubset
				yyc3620 = true
			}
			yyh3620.ElemContainerState(yyj3620)
			if yyj3620 < len(yyv3620) {
				if r.TryDecodeAsNil() {
					yyv3620[yyj3620] = EndpointSubset{}
				} else {
					yyv3623 := &yyv3620[yyj3620]
					yyv3623.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3620 < len(yyv3620) {
			yyv3620 = yyv3620[:yyj3620]
			yyc3620 = true
		} else if yyj3620 == 0 && yyv3620 == nil {
			yyv3620 = []EndpointSubset{}
			yyc3620 = true
		}
	}
	yyh3620.End()
	if yyc3620 {
		*v = yyv3620
	}
}

func (x codecSelfer1234) encSliceEndpointAddress(v []EndpointAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3624 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3625 := &yyv3624
		yy3625.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointAddress(v *[]EndpointAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3626 := *v
	yyh3626, yyl3626 := z.DecSliceHelperStart()
	var yyc3626 bool
	if yyl3626 == 0 {
		if yyv3626 == nil {
			yyv3626 = []EndpointAddress{}
			yyc3626 = true
		} else if len(yyv3626) != 0 {
			yyv3626 = yyv3626[:0]
			yyc3626 = true
		}
	} else if yyl3626 > 0 {
		var yyrr3626, yyrl3626 int
		var yyrt3626 bool
		if yyl3626 > cap(yyv3626) {

			yyrg3626 := len(yyv3626) > 0
			yyv23626 := yyv3626
			yyrl3626, yyrt3626 = z.DecInferLen(yyl3626, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt3626 {
				if yyrl3626 <= cap(yyv3626) {
					yyv3626 = yyv3626[:yyrl3626]
				} else {
					yyv3626 = make([]EndpointAddress, yyrl3626)
				}
			} else {
				yyv3626 = make([]EndpointAddress, yyrl3626)
			}
			yyc3626 = true
			yyrr3626 = len(yyv3626)
			if yyrg3626 {
				copy(yyv3626, yyv23626)
			}
		} else if yyl3626 != len(yyv3626) {
			yyv3626 = yyv3626[:yyl3626]
			yyc3626 = true
		}
		yyj3626 := 0
		for ; yyj3626 < yyrr3626; yyj3626++ {
			yyh3626.ElemContainerState(yyj3626)
			if r.TryDecodeAsNil() {
				yyv3626[yyj3626] = EndpointAddress{}
			} else {
				yyv3627 := &yyv3626[yyj3626]
				yyv3627.CodecDecodeSelf(d)
			}

		}
		if yyrt3626 {
			for ; yyj3626 < yyl3626; yyj3626++ {
				yyv3626 = append(yyv3626, EndpointAddress{})
				yyh3626.ElemContainerState(yyj3626)
				if r.TryDecodeAsNil() {
					yyv3626[yyj3626] = EndpointAddress{}
				} else {
					yyv3628 := &yyv3626[yyj3626]
					yyv3628.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3626 := 0
		for ; !r.CheckBreak(); yyj3626++ {

			if yyj3626 >= len(yyv3626) {
				yyv3626 = append(yyv3626, EndpointAddress{}) // var yyz3626 EndpointAddress
				yyc3626 = true
			}
			yyh3626.ElemContainerState(yyj3626)
			if yyj3626 < len(yyv3626) {
				if r.TryDecodeAsNil() {
					yyv3626[yyj3626] = EndpointAddress{}
				} else {
					yyv3629 := &yyv3626[yyj3626]
					yyv3629.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3626 < len(yyv3626) {
			yyv3626 = yyv3626[:yyj3626]
			yyc3626 = true
		} else if yyj3626 == 0 && yyv3626 == nil {
			yyv3626 = []EndpointAddress{}
			yyc3626 = true
		}
	}
	yyh3626.End()
	if yyc3626 {
		*v = yyv3626
	}
}

func (x codecSelfer1234) encSliceEndpointPort(v []EndpointPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3630 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3631 := &yyv3630
		yy3631.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointPort(v *[]EndpointPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3632 := *v
	yyh3632, yyl3632 := z.DecSliceHelperStart()
	var yyc3632 bool
	if yyl3632 == 0 {
		if yyv3632 == nil {
			yyv3632 = []EndpointPort{}
			yyc3632 = true
		} else if len(yyv3632) != 0 {
			yyv3632 = yyv3632[:0]
			yyc3632 = true
		}
	} else if yyl3632 > 0 {
		var yyrr3632, yyrl3632 int
		var yyrt3632 bool
		if yyl3632 > cap(yyv3632) {

			yyrg3632 := len(yyv3632) > 0
			yyv23632 := yyv3632
			yyrl3632, yyrt3632 = z.DecInferLen(yyl3632, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt3632 {
				if yyrl3632 <= cap(yyv3632) {
					yyv3632 = yyv3632[:yyrl3632]
				} else {
					yyv3632 = make([]EndpointPort, yyrl3632)
				}
			} else {
				yyv3632 = make([]EndpointPort, yyrl3632)
			}
			yyc3632 = true
			yyrr3632 = len(yyv3632)
			if yyrg3632 {
				copy(yyv3632, yyv23632)
			}
		} else if yyl3632 != len(yyv3632) {
			yyv3632 = yyv3632[:yyl3632]
			yyc3632 = true
		}
		yyj3632 := 0
		for ; yyj3632 < yyrr3632; yyj3632++ {
			yyh3632.ElemContainerState(yyj3632)
			if r.TryDecodeAsNil() {
				yyv3632[yyj3632] = EndpointPort{}
			} else {
				yyv3633 := &yyv3632[yyj3632]
				yyv3633.CodecDecodeSelf(d)
			}

		}
		if yyrt3632 {
			for ; yyj3632 < yyl3632; yyj3632++ {
				yyv3632 = append(yyv3632, EndpointPort{})
				yyh3632.ElemContainerState(yyj3632)
				if r.TryDecodeAsNil() {
					yyv3632[yyj3632] = EndpointPort{}
				} else {
					yyv3634 := &yyv3632[yyj3632]
					yyv3634.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3632 := 0
		for ; !r.CheckBreak(); yyj3632++ {

			if yyj3632 >= len(yyv3632) {
				yyv3632 = append(yyv3632, EndpointPort{}) // var yyz3632 EndpointPort
				yyc3632 = true
			}
			yyh3632.ElemContainerState(yyj3632)
			if yyj3632 < len(yyv3632) {
				if r.TryDecodeAsNil() {
					yyv3632[yyj3632] = EndpointPort{}
				} else {
					yyv3635 := &yyv3632[yyj3632]
					yyv3635.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3632 < len(yyv3632) {
			yyv3632 = yyv3632[:yyj3632]
			yyc3632 = true
		} else if yyj3632 == 0 && yyv3632 == nil {
			yyv3632 = []EndpointPort{}
			yyc3632 = true
		}
	}
	yyh3632.End()
	if yyc3632 {
		*v = yyv3632
	}
}

func (x codecSelfer1234) encSliceEndpoints(v []Endpoints, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3636 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3637 := &yyv3636
		yy3637.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpoints(v *[]Endpoints, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3638 := *v
	yyh3638, yyl3638 := z.DecSliceHelperStart()
	var yyc3638 bool
	if yyl3638 == 0 {
		if yyv3638 == nil {
			yyv3638 = []Endpoints{}
			yyc3638 = true
		} else if len(yyv3638) != 0 {
			yyv3638 = yyv3638[:0]
			yyc3638 = true
		}
	} else if yyl3638 > 0 {
		var yyrr3638, yyrl3638 int
		var yyrt3638 bool
		if yyl3638 > cap(yyv3638) {

			yyrg3638 := len(yyv3638) > 0
			yyv23638 := yyv3638
			yyrl3638, yyrt3638 = z.DecInferLen(yyl3638, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt3638 {
				if yyrl3638 <= cap(yyv3638) {
					yyv3638 = yyv3638[:yyrl3638]
				} else {
					yyv3638 = make([]Endpoints, yyrl3638)
				}
			} else {
				yyv3638 = make([]Endpoints, yyrl3638)
			}
			yyc3638 = true
			yyrr3638 = len(yyv3638)
			if yyrg3638 {
				copy(yyv3638, yyv23638)
			}
		} else if yyl3638 != len(yyv3638) {
			yyv3638 = yyv3638[:yyl3638]
			yyc3638 = true
		}
		yyj3638 := 0
		for ; yyj3638 < yyrr3638; yyj3638++ {
			yyh3638.ElemContainerState(yyj3638)
			if r.TryDecodeAsNil() {
				yyv3638[yyj3638] = Endpoints{}
			} else {
				yyv3639 := &yyv3638[yyj3638]
				yyv3639.CodecDecodeSelf(d)
			}

		}
		if yyrt3638 {
			for ; yyj3638 < yyl3638; yyj3638++ {
				yyv3638 = append(yyv3638, Endpoints{})
				yyh3638.ElemContainerState(yyj3638)
				if r.TryDecodeAsNil() {
					yyv3638[yyj3638] = Endpoints{}
				} else {
					yyv3640 := &yyv3638[yyj3638]
					yyv3640.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3638 := 0
		for ; !r.CheckBreak(); yyj3638++ {

			if yyj3638 >= len(yyv3638) {
				yyv3638 = append(yyv3638, Endpoints{}) // var yyz3638 Endpoints
				yyc3638 = true
			}
			yyh3638.ElemContainerState(yyj3638)
			if yyj3638 < len(yyv3638) {
				if r.TryDecodeAsNil() {
					yyv3638[yyj3638] = Endpoints{}
				} else {
					yyv3641 := &yyv3638[yyj3638]
					yyv3641.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3638 < len(yyv3638) {
			yyv3638 = yyv3638[:yyj3638]
			yyc3638 = true
		} else if yyj3638 == 0 && yyv3638 == nil {
			yyv3638 = []Endpoints{}
			yyc3638 = true
		}
	}
	yyh3638.End()
	if yyc3638 {
		*v = yyv3638
	}
}

func (x codecSelfer1234) encSliceNodeCondition(v []NodeCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3642 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3643 := &yyv3642
		yy3643.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeCondition(v *[]NodeCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3644 := *v
	yyh3644, yyl3644 := z.DecSliceHelperStart()
	var yyc3644 bool
	if yyl3644 == 0 {
		if yyv3644 == nil {
			yyv3644 = []NodeCondition{}
			yyc3644 = true
		} else if len(yyv3644) != 0 {
			yyv3644 = yyv3644[:0]
			yyc3644 = true
		}
	} else if yyl3644 > 0 {
		var yyrr3644, yyrl3644 int
		var yyrt3644 bool
		if yyl3644 > cap(yyv3644) {

			yyrg3644 := len(yyv3644) > 0
			yyv23644 := yyv3644
			yyrl3644, yyrt3644 = z.DecInferLen(yyl3644, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt3644 {
				if yyrl3644 <= cap(yyv3644) {
					yyv3644 = yyv3644[:yyrl3644]
				} else {
					yyv3644 = make([]NodeCondition, yyrl3644)
				}
			} else {
				yyv3644 = make([]NodeCondition, yyrl3644)
			}
			yyc3644 = true
			yyrr3644 = len(yyv3644)
			if yyrg3644 {
				copy(yyv3644, yyv23644)
			}
		} else if yyl3644 != len(yyv3644) {
			yyv3644 = yyv3644[:yyl3644]
			yyc3644 = true
		}
		yyj3644 := 0
		for ; yyj3644 < yyrr3644; yyj3644++ {
			yyh3644.ElemContainerState(yyj3644)
			if r.TryDecodeAsNil() {
				yyv3644[yyj3644] = NodeCondition{}
			} else {
				yyv3645 := &yyv3644[yyj3644]
				yyv3645.CodecDecodeSelf(d)
			}

		}
		if yyrt3644 {
			for ; yyj3644 < yyl3644; yyj3644++ {
				yyv3644 = append(yyv3644, NodeCondition{})
				yyh3644.ElemContainerState(yyj3644)
				if r.TryDecodeAsNil() {
					yyv3644[yyj3644] = NodeCondition{}
				} else {
					yyv3646 := &yyv3644[yyj3644]
					yyv3646.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3644 := 0
		for ; !r.CheckBreak(); yyj3644++ {

			if yyj3644 >= len(yyv3644) {
				yyv3644 = append(yyv3644, NodeCondition{}) // var yyz3644 NodeCondition
				yyc3644 = true
			}
			yyh3644.ElemContainerState(yyj3644)
			if yyj3644 < len(yyv3644) {
				if r.TryDecodeAsNil() {
					yyv3644[yyj3644] = NodeCondition{}
				} else {
					yyv3647 := &yyv3644[yyj3644]
					yyv3647.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3644 < len(yyv3644) {
			yyv3644 = yyv3644[:yyj3644]
			yyc3644 = true
		} else if yyj3644 == 0 && yyv3644 == nil {
			yyv3644 = []NodeCondition{}
			yyc3644 = true
		}
	}
	yyh3644.End()
	if yyc3644 {
		*v = yyv3644
	}
}

func (x codecSelfer1234) encSliceNodeAddress(v []NodeAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3648 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3649 := &yyv3648
		yy3649.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeAddress(v *[]NodeAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3650 := *v
	yyh3650, yyl3650 := z.DecSliceHelperStart()
	var yyc3650 bool
	if yyl3650 == 0 {
		if yyv3650 == nil {
			yyv3650 = []NodeAddress{}
			yyc3650 = true
		} else if len(yyv3650) != 0 {
			yyv3650 = yyv3650[:0]
			yyc3650 = true
		}
	} else if yyl3650 > 0 {
		var yyrr3650, yyrl3650 int
		var yyrt3650 bool
		if yyl3650 > cap(yyv3650) {

			yyrg3650 := len(yyv3650) > 0
			yyv23650 := yyv3650
			yyrl3650, yyrt3650 = z.DecInferLen(yyl3650, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt3650 {
				if yyrl3650 <= cap(yyv3650) {
					yyv3650 = yyv3650[:yyrl3650]
				} else {
					yyv3650 = make([]NodeAddress, yyrl3650)
				}
			} else {
				yyv3650 = make([]NodeAddress, yyrl3650)
			}
			yyc3650 = true
			yyrr3650 = len(yyv3650)
			if yyrg3650 {
				copy(yyv3650, yyv23650)
			}
		} else if yyl3650 != len(yyv3650) {
			yyv3650 = yyv3650[:yyl3650]
			yyc3650 = true
		}
		yyj3650 := 0
		for ; yyj3650 < yyrr3650; yyj3650++ {
			yyh3650.ElemContainerState(yyj3650)
			if r.TryDecodeAsNil() {
				yyv3650[yyj3650] = NodeAddress{}
			} else {
				yyv3651 := &yyv3650[yyj3650]
				yyv3651.CodecDecodeSelf(d)
			}

		}
		if yyrt3650 {
			for ; yyj3650 < yyl3650; yyj3650++ {
				yyv3650 = append(yyv3650, NodeAddress{})
				yyh3650.ElemContainerState(yyj3650)
				if r.TryDecodeAsNil() {
					yyv3650[yyj3650] = NodeAddress{}
				} else {
					yyv3652 := &yyv3650[yyj3650]
					yyv3652.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3650 := 0
		for ; !r.CheckBreak(); yyj3650++ {

			if yyj3650 >= len(yyv3650) {
				yyv3650 = append(yyv3650, NodeAddress{}) // var yyz3650 NodeAddress
				yyc3650 = true
			}
			yyh3650.ElemContainerState(yyj3650)
			if yyj3650 < len(yyv3650) {
				if r.TryDecodeAsNil() {
					yyv3650[yyj3650] = NodeAddress{}
				} else {
					yyv3653 := &yyv3650[yyj3650]
					yyv3653.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3650 < len(yyv3650) {
			yyv3650 = yyv3650[:yyj3650]
			yyc3650 = true
		} else if yyj3650 == 0 && yyv3650 == nil {
			yyv3650 = []NodeAddress{}
			yyc3650 = true
		}
	}
	yyh3650.End()
	if yyc3650 {
		*v = yyv3650
	}
}

func (x codecSelfer1234) encResourceList(v ResourceList, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk3654, yyv3654 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yyk3654.CodecEncodeSelf(e)
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		yy3655 := &yyv3654
		yym3656 := z.EncBinary()
		_ = yym3656
		if false {
		} else if z.HasExtensions() && z.EncExt(yy3655) {
		} else if !yym3656 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy3655)
		} else {
			z.EncFallback(yy3655)
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decResourceList(v *ResourceList, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3657 := *v
	yyl3657 := r.ReadMapStart()
	yybh3657 := z.DecBasicHandle()
	if yyv3657 == nil {
		yyrl3657, _ := z.DecInferLen(yyl3657, yybh3657.MaxInitLen, 40)
		yyv3657 = make(map[ResourceName]pkg3_resource.Quantity, yyrl3657)
		*v = yyv3657
	}
	var yymk3657 ResourceName
	var yymv3657 pkg3_resource.Quantity
	var yymg3657 bool
	if yybh3657.MapValueReset {
		yymg3657 = true
	}
	if yyl3657 > 0 {
		for yyj3657 := 0; yyj3657 < yyl3657; yyj3657++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk3657 = ""
			} else {
				yymk3657 = ResourceName(r.DecodeString())
			}

			if yymg3657 {
				yymv3657 = yyv3657[yymk3657]
			} else {
				yymv3657 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv3657 = pkg3_resource.Quantity{}
			} else {
				yyv3659 := &yymv3657
				yym3660 := z.DecBinary()
				_ = yym3660
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3659) {
				} else if !yym3660 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3659)
				} else {
					z.DecFallback(yyv3659, false)
				}
			}

			if yyv3657 != nil {
				yyv3657[yymk3657] = yymv3657
			}
		}
	} else if yyl3657 < 0 {
		for yyj3657 := 0; !r.CheckBreak(); yyj3657++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk3657 = ""
			} else {
				yymk3657 = ResourceName(r.DecodeString())
			}

			if yymg3657 {
				yymv3657 = yyv3657[yymk3657]
			} else {
				yymv3657 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv3657 = pkg3_resource.Quantity{}
			} else {
				yyv3662 := &yymv3657
				yym3663 := z.DecBinary()
				_ = yym3663
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3662) {
				} else if !yym3663 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3662)
				} else {
					z.DecFallback(yyv3662, false)
				}
			}

			if yyv3657 != nil {
				yyv3657[yymk3657] = yymv3657
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceNode(v []Node, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3664 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3665 := &yyv3664
		yy3665.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNode(v *[]Node, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3666 := *v
	yyh3666, yyl3666 := z.DecSliceHelperStart()
	var yyc3666 bool
	if yyl3666 == 0 {
		if yyv3666 == nil {
			yyv3666 = []Node{}
			yyc3666 = true
		} else if len(yyv3666) != 0 {
			yyv3666 = yyv3666[:0]
			yyc3666 = true
		}
	} else if yyl3666 > 0 {
		var yyrr3666, yyrl3666 int
		var yyrt3666 bool
		if yyl3666 > cap(yyv3666) {

			yyrg3666 := len(yyv3666) > 0
			yyv23666 := yyv3666
			yyrl3666, yyrt3666 = z.DecInferLen(yyl3666, z.DecBasicHandle().MaxInitLen, 464)
			if yyrt3666 {
				if yyrl3666 <= cap(yyv3666) {
					yyv3666 = yyv3666[:yyrl3666]
				} else {
					yyv3666 = make([]Node, yyrl3666)
				}
			} else {
				yyv3666 = make([]Node, yyrl3666)
			}
			yyc3666 = true
			yyrr3666 = len(yyv3666)
			if yyrg3666 {
				copy(yyv3666, yyv23666)
			}
		} else if yyl3666 != len(yyv3666) {
			yyv3666 = yyv3666[:yyl3666]
			yyc3666 = true
		}
		yyj3666 := 0
		for ; yyj3666 < yyrr3666; yyj3666++ {
			yyh3666.ElemContainerState(yyj3666)
			if r.TryDecodeAsNil() {
				yyv3666[yyj3666] = Node{}
			} else {
				yyv3667 := &yyv3666[yyj3666]
				yyv3667.CodecDecodeSelf(d)
			}

		}
		if yyrt3666 {
			for ; yyj3666 < yyl3666; yyj3666++ {
				yyv3666 = append(yyv3666, Node{})
				yyh3666.ElemContainerState(yyj3666)
				if r.TryDecodeAsNil() {
					yyv3666[yyj3666] = Node{}
				} else {
					yyv3668 := &yyv3666[yyj3666]
					yyv3668.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3666 := 0
		for ; !r.CheckBreak(); yyj3666++ {

			if yyj3666 >= len(yyv3666) {
				yyv3666 = append(yyv3666, Node{}) // var yyz3666 Node
				yyc3666 = true
			}
			yyh3666.ElemContainerState(yyj3666)
			if yyj3666 < len(yyv3666) {
				if r.TryDecodeAsNil() {
					yyv3666[yyj3666] = Node{}
				} else {
					yyv3669 := &yyv3666[yyj3666]
					yyv3669.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3666 < len(yyv3666) {
			yyv3666 = yyv3666[:yyj3666]
			yyc3666 = true
		} else if yyj3666 == 0 && yyv3666 == nil {
			yyv3666 = []Node{}
			yyc3666 = true
		}
	}
	yyh3666.End()
	if yyc3666 {
		*v = yyv3666
	}
}

func (x codecSelfer1234) encSliceFinalizerName(v []FinalizerName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3670 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv3670.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceFinalizerName(v *[]FinalizerName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3671 := *v
	yyh3671, yyl3671 := z.DecSliceHelperStart()
	var yyc3671 bool
	if yyl3671 == 0 {
		if yyv3671 == nil {
			yyv3671 = []FinalizerName{}
			yyc3671 = true
		} else if len(yyv3671) != 0 {
			yyv3671 = yyv3671[:0]
			yyc3671 = true
		}
	} else if yyl3671 > 0 {
		var yyrr3671, yyrl3671 int
		var yyrt3671 bool
		if yyl3671 > cap(yyv3671) {

			yyrl3671, yyrt3671 = z.DecInferLen(yyl3671, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt3671 {
				if yyrl3671 <= cap(yyv3671) {
					yyv3671 = yyv3671[:yyrl3671]
				} else {
					yyv3671 = make([]FinalizerName, yyrl3671)
				}
			} else {
				yyv3671 = make([]FinalizerName, yyrl3671)
			}
			yyc3671 = true
			yyrr3671 = len(yyv3671)
		} else if yyl3671 != len(yyv3671) {
			yyv3671 = yyv3671[:yyl3671]
			yyc3671 = true
		}
		yyj3671 := 0
		for ; yyj3671 < yyrr3671; yyj3671++ {
			yyh3671.ElemContainerState(yyj3671)
			if r.TryDecodeAsNil() {
				yyv3671[yyj3671] = ""
			} else {
				yyv3671[yyj3671] = FinalizerName(r.DecodeString())
			}

		}
		if yyrt3671 {
			for ; yyj3671 < yyl3671; yyj3671++ {
				yyv3671 = append(yyv3671, "")
				yyh3671.ElemContainerState(yyj3671)
				if r.TryDecodeAsNil() {
					yyv3671[yyj3671] = ""
				} else {
					yyv3671[yyj3671] = FinalizerName(r.DecodeString())
				}

			}
		}

	} else {
		yyj3671 := 0
		for ; !r.CheckBreak(); yyj3671++ {

			if yyj3671 >= len(yyv3671) {
				yyv3671 = append(yyv3671, "") // var yyz3671 FinalizerName
				yyc3671 = true
			}
			yyh3671.ElemContainerState(yyj3671)
			if yyj3671 < len(yyv3671) {
				if r.TryDecodeAsNil() {
					yyv3671[yyj3671] = ""
				} else {
					yyv3671[yyj3671] = FinalizerName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3671 < len(yyv3671) {
			yyv3671 = yyv3671[:yyj3671]
			yyc3671 = true
		} else if yyj3671 == 0 && yyv3671 == nil {
			yyv3671 = []FinalizerName{}
			yyc3671 = true
		}
	}
	yyh3671.End()
	if yyc3671 {
		*v = yyv3671
	}
}

func (x codecSelfer1234) encSliceNamespace(v []Namespace, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3675 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3676 := &yyv3675
		yy3676.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNamespace(v *[]Namespace, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3677 := *v
	yyh3677, yyl3677 := z.DecSliceHelperStart()
	var yyc3677 bool
	if yyl3677 == 0 {
		if yyv3677 == nil {
			yyv3677 = []Namespace{}
			yyc3677 = true
		} else if len(yyv3677) != 0 {
			yyv3677 = yyv3677[:0]
			yyc3677 = true
		}
	} else if yyl3677 > 0 {
		var yyrr3677, yyrl3677 int
		var yyrt3677 bool
		if yyl3677 > cap(yyv3677) {

			yyrg3677 := len(yyv3677) > 0
			yyv23677 := yyv3677
			yyrl3677, yyrt3677 = z.DecInferLen(yyl3677, z.DecBasicHandle().MaxInitLen, 232)
			if yyrt3677 {
				if yyrl3677 <= cap(yyv3677) {
					yyv3677 = yyv3677[:yyrl3677]
				} else {
					yyv3677 = make([]Namespace, yyrl3677)
				}
			} else {
				yyv3677 = make([]Namespace, yyrl3677)
			}
			yyc3677 = true
			yyrr3677 = len(yyv3677)
			if yyrg3677 {
				copy(yyv3677, yyv23677)
			}
		} else if yyl3677 != len(yyv3677) {
			yyv3677 = yyv3677[:yyl3677]
			yyc3677 = true
		}
		yyj3677 := 0
		for ; yyj3677 < yyrr3677; yyj3677++ {
			yyh3677.ElemContainerState(yyj3677)
			if r.TryDecodeAsNil() {
				yyv3677[yyj3677] = Namespace{}
			} else {
				yyv3678 := &yyv3677[yyj3677]
				yyv3678.CodecDecodeSelf(d)
			}

		}
		if yyrt3677 {
			for ; yyj3677 < yyl3677; yyj3677++ {
				yyv3677 = append(yyv3677, Namespace{})
				yyh3677.ElemContainerState(yyj3677)
				if r.TryDecodeAsNil() {
					yyv3677[yyj3677] = Namespace{}
				} else {
					yyv3679 := &yyv3677[yyj3677]
					yyv3679.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3677 := 0
		for ; !r.CheckBreak(); yyj3677++ {

			if yyj3677 >= len(yyv3677) {
				yyv3677 = append(yyv3677, Namespace{}) // var yyz3677 Namespace
				yyc3677 = true
			}
			yyh3677.ElemContainerState(yyj3677)
			if yyj3677 < len(yyv3677) {
				if r.TryDecodeAsNil() {
					yyv3677[yyj3677] = Namespace{}
				} else {
					yyv3680 := &yyv3677[yyj3677]
					yyv3680.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3677 < len(yyv3677) {
			yyv3677 = yyv3677[:yyj3677]
			yyc3677 = true
		} else if yyj3677 == 0 && yyv3677 == nil {
			yyv3677 = []Namespace{}
			yyc3677 = true
		}
	}
	yyh3677.End()
	if yyc3677 {
		*v = yyv3677
	}
}

func (x codecSelfer1234) encSliceEvent(v []Event, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3681 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3682 := &yyv3681
		yy3682.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEvent(v *[]Event, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3683 := *v
	yyh3683, yyl3683 := z.DecSliceHelperStart()
	var yyc3683 bool
	if yyl3683 == 0 {
		if yyv3683 == nil {
			yyv3683 = []Event{}
			yyc3683 = true
		} else if len(yyv3683) != 0 {
			yyv3683 = yyv3683[:0]
			yyc3683 = true
		}
	} else if yyl3683 > 0 {
		var yyrr3683, yyrl3683 int
		var yyrt3683 bool
		if yyl3683 > cap(yyv3683) {

			yyrg3683 := len(yyv3683) > 0
			yyv23683 := yyv3683
			yyrl3683, yyrt3683 = z.DecInferLen(yyl3683, z.DecBasicHandle().MaxInitLen, 440)
			if yyrt3683 {
				if yyrl3683 <= cap(yyv3683) {
					yyv3683 = yyv3683[:yyrl3683]
				} else {
					yyv3683 = make([]Event, yyrl3683)
				}
			} else {
				yyv3683 = make([]Event, yyrl3683)
			}
			yyc3683 = true
			yyrr3683 = len(yyv3683)
			if yyrg3683 {
				copy(yyv3683, yyv23683)
			}
		} else if yyl3683 != len(yyv3683) {
			yyv3683 = yyv3683[:yyl3683]
			yyc3683 = true
		}
		yyj3683 := 0
		for ; yyj3683 < yyrr3683; yyj3683++ {
			yyh3683.ElemContainerState(yyj3683)
			if r.TryDecodeAsNil() {
				yyv3683[yyj3683] = Event{}
			} else {
				yyv3684 := &yyv3683[yyj3683]
				yyv3684.CodecDecodeSelf(d)
			}

		}
		if yyrt3683 {
			for ; yyj3683 < yyl3683; yyj3683++ {
				yyv3683 = append(yyv3683, Event{})
				yyh3683.ElemContainerState(yyj3683)
				if r.TryDecodeAsNil() {
					yyv3683[yyj3683] = Event{}
				} else {
					yyv3685 := &yyv3683[yyj3683]
					yyv3685.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3683 := 0
		for ; !r.CheckBreak(); yyj3683++ {

			if yyj3683 >= len(yyv3683) {
				yyv3683 = append(yyv3683, Event{}) // var yyz3683 Event
				yyc3683 = true
			}
			yyh3683.ElemContainerState(yyj3683)
			if yyj3683 < len(yyv3683) {
				if r.TryDecodeAsNil() {
					yyv3683[yyj3683] = Event{}
				} else {
					yyv3686 := &yyv3683[yyj3683]
					yyv3686.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3683 < len(yyv3683) {
			yyv3683 = yyv3683[:yyj3683]
			yyc3683 = true
		} else if yyj3683 == 0 && yyv3683 == nil {
			yyv3683 = []Event{}
			yyc3683 = true
		}
	}
	yyh3683.End()
	if yyc3683 {
		*v = yyv3683
	}
}

func (x codecSelfer1234) encSliceruntime_RawExtension(v []pkg6_runtime.RawExtension, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3687 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3688 := &yyv3687
		yym3689 := z.EncBinary()
		_ = yym3689
		if false {
		} else if z.HasExtensions() && z.EncExt(yy3688) {
		} else if !yym3689 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy3688)
		} else {
			z.EncFallback(yy3688)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceruntime_RawExtension(v *[]pkg6_runtime.RawExtension, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3690 := *v
	yyh3690, yyl3690 := z.DecSliceHelperStart()
	var yyc3690 bool
	if yyl3690 == 0 {
		if yyv3690 == nil {
			yyv3690 = []pkg6_runtime.RawExtension{}
			yyc3690 = true
		} else if len(yyv3690) != 0 {
			yyv3690 = yyv3690[:0]
			yyc3690 = true
		}
	} else if yyl3690 > 0 {
		var yyrr3690, yyrl3690 int
		var yyrt3690 bool
		if yyl3690 > cap(yyv3690) {

			yyrg3690 := len(yyv3690) > 0
			yyv23690 := yyv3690
			yyrl3690, yyrt3690 = z.DecInferLen(yyl3690, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt3690 {
				if yyrl3690 <= cap(yyv3690) {
					yyv3690 = yyv3690[:yyrl3690]
				} else {
					yyv3690 = make([]pkg6_runtime.RawExtension, yyrl3690)
				}
			} else {
				yyv3690 = make([]pkg6_runtime.RawExtension, yyrl3690)
			}
			yyc3690 = true
			yyrr3690 = len(yyv3690)
			if yyrg3690 {
				copy(yyv3690, yyv23690)
			}
		} else if yyl3690 != len(yyv3690) {
			yyv3690 = yyv3690[:yyl3690]
			yyc3690 = true
		}
		yyj3690 := 0
		for ; yyj3690 < yyrr3690; yyj3690++ {
			yyh3690.ElemContainerState(yyj3690)
			if r.TryDecodeAsNil() {
				yyv3690[yyj3690] = pkg6_runtime.RawExtension{}
			} else {
				yyv3691 := &yyv3690[yyj3690]
				yym3692 := z.DecBinary()
				_ = yym3692
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3691) {
				} else if !yym3692 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3691)
				} else {
					z.DecFallback(yyv3691, false)
				}
			}

		}
		if yyrt3690 {
			for ; yyj3690 < yyl3690; yyj3690++ {
				yyv3690 = append(yyv3690, pkg6_runtime.RawExtension{})
				yyh3690.ElemContainerState(yyj3690)
				if r.TryDecodeAsNil() {
					yyv3690[yyj3690] = pkg6_runtime.RawExtension{}
				} else {
					yyv3693 := &yyv3690[yyj3690]
					yym3694 := z.DecBinary()
					_ = yym3694
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv3693) {
					} else if !yym3694 && z.IsJSONHandle() {
						z.DecJSONUnmarshal(yyv3693)
					} else {
						z.DecFallback(yyv3693, false)
					}
				}

			}
		}

	} else {
		yyj3690 := 0
		for ; !r.CheckBreak(); yyj3690++ {

			if yyj3690 >= len(yyv3690) {
				yyv3690 = append(yyv3690, pkg6_runtime.RawExtension{}) // var yyz3690 pkg6_runtime.RawExtension
				yyc3690 = true
			}
			yyh3690.ElemContainerState(yyj3690)
			if yyj3690 < len(yyv3690) {
				if r.TryDecodeAsNil() {
					yyv3690[yyj3690] = pkg6_runtime.RawExtension{}
				} else {
					yyv3695 := &yyv3690[yyj3690]
					yym3696 := z.DecBinary()
					_ = yym3696
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv3695) {
					} else if !yym3696 && z.IsJSONHandle() {
						z.DecJSONUnmarshal(yyv3695)
					} else {
						z.DecFallback(yyv3695, false)
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3690 < len(yyv3690) {
			yyv3690 = yyv3690[:yyj3690]
			yyc3690 = true
		} else if yyj3690 == 0 && yyv3690 == nil {
			yyv3690 = []pkg6_runtime.RawExtension{}
			yyc3690 = true
		}
	}
	yyh3690.End()
	if yyc3690 {
		*v = yyv3690
	}
}

func (x codecSelfer1234) encSliceLimitRangeItem(v []LimitRangeItem, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3697 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3698 := &yyv3697
		yy3698.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRangeItem(v *[]LimitRangeItem, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3699 := *v
	yyh3699, yyl3699 := z.DecSliceHelperStart()
	var yyc3699 bool
	if yyl3699 == 0 {
		if yyv3699 == nil {
			yyv3699 = []LimitRangeItem{}
			yyc3699 = true
		} else if len(yyv3699) != 0 {
			yyv3699 = yyv3699[:0]
			yyc3699 = true
		}
	} else if yyl3699 > 0 {
		var yyrr3699, yyrl3699 int
		var yyrt3699 bool
		if yyl3699 > cap(yyv3699) {

			yyrg3699 := len(yyv3699) > 0
			yyv23699 := yyv3699
			yyrl3699, yyrt3699 = z.DecInferLen(yyl3699, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt3699 {
				if yyrl3699 <= cap(yyv3699) {
					yyv3699 = yyv3699[:yyrl3699]
				} else {
					yyv3699 = make([]LimitRangeItem, yyrl3699)
				}
			} else {
				yyv3699 = make([]LimitRangeItem, yyrl3699)
			}
			yyc3699 = true
			yyrr3699 = len(yyv3699)
			if yyrg3699 {
				copy(yyv3699, yyv23699)
			}
		} else if yyl3699 != len(yyv3699) {
			yyv3699 = yyv3699[:yyl3699]
			yyc3699 = true
		}
		yyj3699 := 0
		for ; yyj3699 < yyrr3699; yyj3699++ {
			yyh3699.ElemContainerState(yyj3699)
			if r.TryDecodeAsNil() {
				yyv3699[yyj3699] = LimitRangeItem{}
			} else {
				yyv3700 := &yyv3699[yyj3699]
				yyv3700.CodecDecodeSelf(d)
			}

		}
		if yyrt3699 {
			for ; yyj3699 < yyl3699; yyj3699++ {
				yyv3699 = append(yyv3699, LimitRangeItem{})
				yyh3699.ElemContainerState(yyj3699)
				if r.TryDecodeAsNil() {
					yyv3699[yyj3699] = LimitRangeItem{}
				} else {
					yyv3701 := &yyv3699[yyj3699]
					yyv3701.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3699 := 0
		for ; !r.CheckBreak(); yyj3699++ {

			if yyj3699 >= len(yyv3699) {
				yyv3699 = append(yyv3699, LimitRangeItem{}) // var yyz3699 LimitRangeItem
				yyc3699 = true
			}
			yyh3699.ElemContainerState(yyj3699)
			if yyj3699 < len(yyv3699) {
				if r.TryDecodeAsNil() {
					yyv3699[yyj3699] = LimitRangeItem{}
				} else {
					yyv3702 := &yyv3699[yyj3699]
					yyv3702.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3699 < len(yyv3699) {
			yyv3699 = yyv3699[:yyj3699]
			yyc3699 = true
		} else if yyj3699 == 0 && yyv3699 == nil {
			yyv3699 = []LimitRangeItem{}
			yyc3699 = true
		}
	}
	yyh3699.End()
	if yyc3699 {
		*v = yyv3699
	}
}

func (x codecSelfer1234) encSliceLimitRange(v []LimitRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3703 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3704 := &yyv3703
		yy3704.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRange(v *[]LimitRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3705 := *v
	yyh3705, yyl3705 := z.DecSliceHelperStart()
	var yyc3705 bool
	if yyl3705 == 0 {
		if yyv3705 == nil {
			yyv3705 = []LimitRange{}
			yyc3705 = true
		} else if len(yyv3705) != 0 {
			yyv3705 = yyv3705[:0]
			yyc3705 = true
		}
	} else if yyl3705 > 0 {
		var yyrr3705, yyrl3705 int
		var yyrt3705 bool
		if yyl3705 > cap(yyv3705) {

			yyrg3705 := len(yyv3705) > 0
			yyv23705 := yyv3705
			yyrl3705, yyrt3705 = z.DecInferLen(yyl3705, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt3705 {
				if yyrl3705 <= cap(yyv3705) {
					yyv3705 = yyv3705[:yyrl3705]
				} else {
					yyv3705 = make([]LimitRange, yyrl3705)
				}
			} else {
				yyv3705 = make([]LimitRange, yyrl3705)
			}
			yyc3705 = true
			yyrr3705 = len(yyv3705)
			if yyrg3705 {
				copy(yyv3705, yyv23705)
			}
		} else if yyl3705 != len(yyv3705) {
			yyv3705 = yyv3705[:yyl3705]
			yyc3705 = true
		}
		yyj3705 := 0
		for ; yyj3705 < yyrr3705; yyj3705++ {
			yyh3705.ElemContainerState(yyj3705)
			if r.TryDecodeAsNil() {
				yyv3705[yyj3705] = LimitRange{}
			} else {
				yyv3706 := &yyv3705[yyj3705]
				yyv3706.CodecDecodeSelf(d)
			}

		}
		if yyrt3705 {
			for ; yyj3705 < yyl3705; yyj3705++ {
				yyv3705 = append(yyv3705, LimitRange{})
				yyh3705.ElemContainerState(yyj3705)
				if r.TryDecodeAsNil() {
					yyv3705[yyj3705] = LimitRange{}
				} else {
					yyv3707 := &yyv3705[yyj3705]
					yyv3707.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3705 := 0
		for ; !r.CheckBreak(); yyj3705++ {

			if yyj3705 >= len(yyv3705) {
				yyv3705 = append(yyv3705, LimitRange{}) // var yyz3705 LimitRange
				yyc3705 = true
			}
			yyh3705.ElemContainerState(yyj3705)
			if yyj3705 < len(yyv3705) {
				if r.TryDecodeAsNil() {
					yyv3705[yyj3705] = LimitRange{}
				} else {
					yyv3708 := &yyv3705[yyj3705]
					yyv3708.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3705 < len(yyv3705) {
			yyv3705 = yyv3705[:yyj3705]
			yyc3705 = true
		} else if yyj3705 == 0 && yyv3705 == nil {
			yyv3705 = []LimitRange{}
			yyc3705 = true
		}
	}
	yyh3705.End()
	if yyc3705 {
		*v = yyv3705
	}
}

func (x codecSelfer1234) encSliceResourceQuota(v []ResourceQuota, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3709 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3710 := &yyv3709
		yy3710.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuota(v *[]ResourceQuota, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3711 := *v
	yyh3711, yyl3711 := z.DecSliceHelperStart()
	var yyc3711 bool
	if yyl3711 == 0 {
		if yyv3711 == nil {
			yyv3711 = []ResourceQuota{}
			yyc3711 = true
		} else if len(yyv3711) != 0 {
			yyv3711 = yyv3711[:0]
			yyc3711 = true
		}
	} else if yyl3711 > 0 {
		var yyrr3711, yyrl3711 int
		var yyrt3711 bool
		if yyl3711 > cap(yyv3711) {

			yyrg3711 := len(yyv3711) > 0
			yyv23711 := yyv3711
			yyrl3711, yyrt3711 = z.DecInferLen(yyl3711, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt3711 {
				if yyrl3711 <= cap(yyv3711) {
					yyv3711 = yyv3711[:yyrl3711]
				} else {
					yyv3711 = make([]ResourceQuota, yyrl3711)
				}
			} else {
				yyv3711 = make([]ResourceQuota, yyrl3711)
			}
			yyc3711 = true
			yyrr3711 = len(yyv3711)
			if yyrg3711 {
				copy(yyv3711, yyv23711)
			}
		} else if yyl3711 != len(yyv3711) {
			yyv3711 = yyv3711[:yyl3711]
			yyc3711 = true
		}
		yyj3711 := 0
		for ; yyj3711 < yyrr3711; yyj3711++ {
			yyh3711.ElemContainerState(yyj3711)
			if r.TryDecodeAsNil() {
				yyv3711[yyj3711] = ResourceQuota{}
			} else {
				yyv3712 := &yyv3711[yyj3711]
				yyv3712.CodecDecodeSelf(d)
			}

		}
		if yyrt3711 {
			for ; yyj3711 < yyl3711; yyj3711++ {
				yyv3711 = append(yyv3711, ResourceQuota{})
				yyh3711.ElemContainerState(yyj3711)
				if r.TryDecodeAsNil() {
					yyv3711[yyj3711] = ResourceQuota{}
				} else {
					yyv3713 := &yyv3711[yyj3711]
					yyv3713.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3711 := 0
		for ; !r.CheckBreak(); yyj3711++ {

			if yyj3711 >= len(yyv3711) {
				yyv3711 = append(yyv3711, ResourceQuota{}) // var yyz3711 ResourceQuota
				yyc3711 = true
			}
			yyh3711.ElemContainerState(yyj3711)
			if yyj3711 < len(yyv3711) {
				if r.TryDecodeAsNil() {
					yyv3711[yyj3711] = ResourceQuota{}
				} else {
					yyv3714 := &yyv3711[yyj3711]
					yyv3714.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3711 < len(yyv3711) {
			yyv3711 = yyv3711[:yyj3711]
			yyc3711 = true
		} else if yyj3711 == 0 && yyv3711 == nil {
			yyv3711 = []ResourceQuota{}
			yyc3711 = true
		}
	}
	yyh3711.End()
	if yyc3711 {
		*v = yyv3711
	}
}

func (x codecSelfer1234) encMapstringSliceuint8(v map[string][]uint8, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk3715, yyv3715 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yym3716 := z.EncBinary()
		_ = yym3716
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyk3715))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		if yyv3715 == nil {
			r.EncodeNil()
		} else {
			yym3717 := z.EncBinary()
			_ = yym3717
			if false {
			} else {
				r.EncodeStringBytes(codecSelferC_RAW1234, []byte(yyv3715))
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decMapstringSliceuint8(v *map[string][]uint8, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3718 := *v
	yyl3718 := r.ReadMapStart()
	yybh3718 := z.DecBasicHandle()
	if yyv3718 == nil {
		yyrl3718, _ := z.DecInferLen(yyl3718, yybh3718.MaxInitLen, 40)
		yyv3718 = make(map[string][]uint8, yyrl3718)
		*v = yyv3718
	}
	var yymk3718 string
	var yymv3718 []uint8
	var yymg3718 bool
	if yybh3718.MapValueReset {
		yymg3718 = true
	}
	if yyl3718 > 0 {
		for yyj3718 := 0; yyj3718 < yyl3718; yyj3718++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk3718 = ""
			} else {
				yymk3718 = string(r.DecodeString())
			}

			if yymg3718 {
				yymv3718 = yyv3718[yymk3718]
			} else {
				yymv3718 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv3718 = nil
			} else {
				yyv3720 := &yymv3718
				yym3721 := z.DecBinary()
				_ = yym3721
				if false {
				} else {
					*yyv3720 = r.DecodeBytes(*(*[]byte)(yyv3720), false, false)
				}
			}

			if yyv3718 != nil {
				yyv3718[yymk3718] = yymv3718
			}
		}
	} else if yyl3718 < 0 {
		for yyj3718 := 0; !r.CheckBreak(); yyj3718++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk3718 = ""
			} else {
				yymk3718 = string(r.DecodeString())
			}

			if yymg3718 {
				yymv3718 = yyv3718[yymk3718]
			} else {
				yymv3718 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv3718 = nil
			} else {
				yyv3723 := &yymv3718
				yym3724 := z.DecBinary()
				_ = yym3724
				if false {
				} else {
					*yyv3723 = r.DecodeBytes(*(*[]byte)(yyv3723), false, false)
				}
			}

			if yyv3718 != nil {
				yyv3718[yymk3718] = yymv3718
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceSecret(v []Secret, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3725 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3726 := &yyv3725
		yy3726.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceSecret(v *[]Secret, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3727 := *v
	yyh3727, yyl3727 := z.DecSliceHelperStart()
	var yyc3727 bool
	if yyl3727 == 0 {
		if yyv3727 == nil {
			yyv3727 = []Secret{}
			yyc3727 = true
		} else if len(yyv3727) != 0 {
			yyv3727 = yyv3727[:0]
			yyc3727 = true
		}
	} else if yyl3727 > 0 {
		var yyrr3727, yyrl3727 int
		var yyrt3727 bool
		if yyl3727 > cap(yyv3727) {

			yyrg3727 := len(yyv3727) > 0
			yyv23727 := yyv3727
			yyrl3727, yyrt3727 = z.DecInferLen(yyl3727, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt3727 {
				if yyrl3727 <= cap(yyv3727) {
					yyv3727 = yyv3727[:yyrl3727]
				} else {
					yyv3727 = make([]Secret, yyrl3727)
				}
			} else {
				yyv3727 = make([]Secret, yyrl3727)
			}
			yyc3727 = true
			yyrr3727 = len(yyv3727)
			if yyrg3727 {
				copy(yyv3727, yyv23727)
			}
		} else if yyl3727 != len(yyv3727) {
			yyv3727 = yyv3727[:yyl3727]
			yyc3727 = true
		}
		yyj3727 := 0
		for ; yyj3727 < yyrr3727; yyj3727++ {
			yyh3727.ElemContainerState(yyj3727)
			if r.TryDecodeAsNil() {
				yyv3727[yyj3727] = Secret{}
			} else {
				yyv3728 := &yyv3727[yyj3727]
				yyv3728.CodecDecodeSelf(d)
			}

		}
		if yyrt3727 {
			for ; yyj3727 < yyl3727; yyj3727++ {
				yyv3727 = append(yyv3727, Secret{})
				yyh3727.ElemContainerState(yyj3727)
				if r.TryDecodeAsNil() {
					yyv3727[yyj3727] = Secret{}
				} else {
					yyv3729 := &yyv3727[yyj3727]
					yyv3729.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3727 := 0
		for ; !r.CheckBreak(); yyj3727++ {

			if yyj3727 >= len(yyv3727) {
				yyv3727 = append(yyv3727, Secret{}) // var yyz3727 Secret
				yyc3727 = true
			}
			yyh3727.ElemContainerState(yyj3727)
			if yyj3727 < len(yyv3727) {
				if r.TryDecodeAsNil() {
					yyv3727[yyj3727] = Secret{}
				} else {
					yyv3730 := &yyv3727[yyj3727]
					yyv3730.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3727 < len(yyv3727) {
			yyv3727 = yyv3727[:yyj3727]
			yyc3727 = true
		} else if yyj3727 == 0 && yyv3727 == nil {
			yyv3727 = []Secret{}
			yyc3727 = true
		}
	}
	yyh3727.End()
	if yyc3727 {
		*v = yyv3727
	}
}

func (x codecSelfer1234) encSliceComponentCondition(v []ComponentCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3731 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3732 := &yyv3731
		yy3732.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentCondition(v *[]ComponentCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3733 := *v
	yyh3733, yyl3733 := z.DecSliceHelperStart()
	var yyc3733 bool
	if yyl3733 == 0 {
		if yyv3733 == nil {
			yyv3733 = []ComponentCondition{}
			yyc3733 = true
		} else if len(yyv3733) != 0 {
			yyv3733 = yyv3733[:0]
			yyc3733 = true
		}
	} else if yyl3733 > 0 {
		var yyrr3733, yyrl3733 int
		var yyrt3733 bool
		if yyl3733 > cap(yyv3733) {

			yyrg3733 := len(yyv3733) > 0
			yyv23733 := yyv3733
			yyrl3733, yyrt3733 = z.DecInferLen(yyl3733, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt3733 {
				if yyrl3733 <= cap(yyv3733) {
					yyv3733 = yyv3733[:yyrl3733]
				} else {
					yyv3733 = make([]ComponentCondition, yyrl3733)
				}
			} else {
				yyv3733 = make([]ComponentCondition, yyrl3733)
			}
			yyc3733 = true
			yyrr3733 = len(yyv3733)
			if yyrg3733 {
				copy(yyv3733, yyv23733)
			}
		} else if yyl3733 != len(yyv3733) {
			yyv3733 = yyv3733[:yyl3733]
			yyc3733 = true
		}
		yyj3733 := 0
		for ; yyj3733 < yyrr3733; yyj3733++ {
			yyh3733.ElemContainerState(yyj3733)
			if r.TryDecodeAsNil() {
				yyv3733[yyj3733] = ComponentCondition{}
			} else {
				yyv3734 := &yyv3733[yyj3733]
				yyv3734.CodecDecodeSelf(d)
			}

		}
		if yyrt3733 {
			for ; yyj3733 < yyl3733; yyj3733++ {
				yyv3733 = append(yyv3733, ComponentCondition{})
				yyh3733.ElemContainerState(yyj3733)
				if r.TryDecodeAsNil() {
					yyv3733[yyj3733] = ComponentCondition{}
				} else {
					yyv3735 := &yyv3733[yyj3733]
					yyv3735.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3733 := 0
		for ; !r.CheckBreak(); yyj3733++ {

			if yyj3733 >= len(yyv3733) {
				yyv3733 = append(yyv3733, ComponentCondition{}) // var yyz3733 ComponentCondition
				yyc3733 = true
			}
			yyh3733.ElemContainerState(yyj3733)
			if yyj3733 < len(yyv3733) {
				if r.TryDecodeAsNil() {
					yyv3733[yyj3733] = ComponentCondition{}
				} else {
					yyv3736 := &yyv3733[yyj3733]
					yyv3736.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3733 < len(yyv3733) {
			yyv3733 = yyv3733[:yyj3733]
			yyc3733 = true
		} else if yyj3733 == 0 && yyv3733 == nil {
			yyv3733 = []ComponentCondition{}
			yyc3733 = true
		}
	}
	yyh3733.End()
	if yyc3733 {
		*v = yyv3733
	}
}

func (x codecSelfer1234) encSliceComponentStatus(v []ComponentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3737 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3738 := &yyv3737
		yy3738.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentStatus(v *[]ComponentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3739 := *v
	yyh3739, yyl3739 := z.DecSliceHelperStart()
	var yyc3739 bool
	if yyl3739 == 0 {
		if yyv3739 == nil {
			yyv3739 = []ComponentStatus{}
			yyc3739 = true
		} else if len(yyv3739) != 0 {
			yyv3739 = yyv3739[:0]
			yyc3739 = true
		}
	} else if yyl3739 > 0 {
		var yyrr3739, yyrl3739 int
		var yyrt3739 bool
		if yyl3739 > cap(yyv3739) {

			yyrg3739 := len(yyv3739) > 0
			yyv23739 := yyv3739
			yyrl3739, yyrt3739 = z.DecInferLen(yyl3739, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt3739 {
				if yyrl3739 <= cap(yyv3739) {
					yyv3739 = yyv3739[:yyrl3739]
				} else {
					yyv3739 = make([]ComponentStatus, yyrl3739)
				}
			} else {
				yyv3739 = make([]ComponentStatus, yyrl3739)
			}
			yyc3739 = true
			yyrr3739 = len(yyv3739)
			if yyrg3739 {
				copy(yyv3739, yyv23739)
			}
		} else if yyl3739 != len(yyv3739) {
			yyv3739 = yyv3739[:yyl3739]
			yyc3739 = true
		}
		yyj3739 := 0
		for ; yyj3739 < yyrr3739; yyj3739++ {
			yyh3739.ElemContainerState(yyj3739)
			if r.TryDecodeAsNil() {
				yyv3739[yyj3739] = ComponentStatus{}
			} else {
				yyv3740 := &yyv3739[yyj3739]
				yyv3740.CodecDecodeSelf(d)
			}

		}
		if yyrt3739 {
			for ; yyj3739 < yyl3739; yyj3739++ {
				yyv3739 = append(yyv3739, ComponentStatus{})
				yyh3739.ElemContainerState(yyj3739)
				if r.TryDecodeAsNil() {
					yyv3739[yyj3739] = ComponentStatus{}
				} else {
					yyv3741 := &yyv3739[yyj3739]
					yyv3741.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3739 := 0
		for ; !r.CheckBreak(); yyj3739++ {

			if yyj3739 >= len(yyv3739) {
				yyv3739 = append(yyv3739, ComponentStatus{}) // var yyz3739 ComponentStatus
				yyc3739 = true
			}
			yyh3739.ElemContainerState(yyj3739)
			if yyj3739 < len(yyv3739) {
				if r.TryDecodeAsNil() {
					yyv3739[yyj3739] = ComponentStatus{}
				} else {
					yyv3742 := &yyv3739[yyj3739]
					yyv3742.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3739 < len(yyv3739) {
			yyv3739 = yyv3739[:yyj3739]
			yyc3739 = true
		} else if yyj3739 == 0 && yyv3739 == nil {
			yyv3739 = []ComponentStatus{}
			yyc3739 = true
		}
	}
	yyh3739.End()
	if yyc3739 {
		*v = yyv3739
	}
}

func (x codecSelfer1234) encSliceDownwardAPIVolumeFile(v []DownwardAPIVolumeFile, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3743 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3744 := &yyv3743
		yy3744.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDownwardAPIVolumeFile(v *[]DownwardAPIVolumeFile, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3745 := *v
	yyh3745, yyl3745 := z.DecSliceHelperStart()
	var yyc3745 bool
	if yyl3745 == 0 {
		if yyv3745 == nil {
			yyv3745 = []DownwardAPIVolumeFile{}
			yyc3745 = true
		} else if len(yyv3745) != 0 {
			yyv3745 = yyv3745[:0]
			yyc3745 = true
		}
	} else if yyl3745 > 0 {
		var yyrr3745, yyrl3745 int
		var yyrt3745 bool
		if yyl3745 > cap(yyv3745) {

			yyrg3745 := len(yyv3745) > 0
			yyv23745 := yyv3745
			yyrl3745, yyrt3745 = z.DecInferLen(yyl3745, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt3745 {
				if yyrl3745 <= cap(yyv3745) {
					yyv3745 = yyv3745[:yyrl3745]
				} else {
					yyv3745 = make([]DownwardAPIVolumeFile, yyrl3745)
				}
			} else {
				yyv3745 = make([]DownwardAPIVolumeFile, yyrl3745)
			}
			yyc3745 = true
			yyrr3745 = len(yyv3745)
			if yyrg3745 {
				copy(yyv3745, yyv23745)
			}
		} else if yyl3745 != len(yyv3745) {
			yyv3745 = yyv3745[:yyl3745]
			yyc3745 = true
		}
		yyj3745 := 0
		for ; yyj3745 < yyrr3745; yyj3745++ {
			yyh3745.ElemContainerState(yyj3745)
			if r.TryDecodeAsNil() {
				yyv3745[yyj3745] = DownwardAPIVolumeFile{}
			} else {
				yyv3746 := &yyv3745[yyj3745]
				yyv3746.CodecDecodeSelf(d)
			}

		}
		if yyrt3745 {
			for ; yyj3745 < yyl3745; yyj3745++ {
				yyv3745 = append(yyv3745, DownwardAPIVolumeFile{})
				yyh3745.ElemContainerState(yyj3745)
				if r.TryDecodeAsNil() {
					yyv3745[yyj3745] = DownwardAPIVolumeFile{}
				} else {
					yyv3747 := &yyv3745[yyj3745]
					yyv3747.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3745 := 0
		for ; !r.CheckBreak(); yyj3745++ {

			if yyj3745 >= len(yyv3745) {
				yyv3745 = append(yyv3745, DownwardAPIVolumeFile{}) // var yyz3745 DownwardAPIVolumeFile
				yyc3745 = true
			}
			yyh3745.ElemContainerState(yyj3745)
			if yyj3745 < len(yyv3745) {
				if r.TryDecodeAsNil() {
					yyv3745[yyj3745] = DownwardAPIVolumeFile{}
				} else {
					yyv3748 := &yyv3745[yyj3745]
					yyv3748.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3745 < len(yyv3745) {
			yyv3745 = yyv3745[:yyj3745]
			yyc3745 = true
		} else if yyj3745 == 0 && yyv3745 == nil {
			yyv3745 = []DownwardAPIVolumeFile{}
			yyc3745 = true
		}
	}
	yyh3745.End()
	if yyc3745 {
		*v = yyv3745
	}
}
